<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko-KR, en-US"><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://nan0silver.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://nan0silver.github.io/" rel="alternate" type="text/html" hreflang="ko-KR, en-US" /><updated>2025-03-06T14:09:08+00:00</updated><id>https://nan0silver.github.io/feed.xml</id><title type="html">NAHYUN BLOG</title><subtitle>Nahyun’s Development Blog
Hi, I’m Nahyun Eun, a student from South Korea studying backend development with Java.  In this blog, I organize and share my learning journey in programming, with notes and insights on backend concepts and practical examples.
 Follow along as I dive into the world of coding!
</subtitle><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><entry><title type="html">Boiler Plate</title><link href="https://nan0silver.github.io/miscellaneous/2025-03-06-boiler-plate/" rel="alternate" type="text/html" title="Boiler Plate" /><published>2025-03-06T00:00:00+00:00</published><updated>2025-03-06T14:08:22+00:00</updated><id>https://nan0silver.github.io/miscellaneous/boiler-plate</id><content type="html" xml:base="https://nan0silver.github.io/miscellaneous/2025-03-06-boiler-plate/"><![CDATA[]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="miscellaneous" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">[JAVA] 🚀 ArrayList vs 배열(int[]) 성능 비교</title><link href="https://nan0silver.github.io/java/2025-02-25-arraylist-array/" rel="alternate" type="text/html" title="[JAVA] 🚀 ArrayList vs 배열(int[]) 성능 비교" /><published>2025-02-25T00:00:00+00:00</published><updated>2025-03-06T14:08:22+00:00</updated><id>https://nan0silver.github.io/java/arraylist-array</id><content type="html" xml:base="https://nan0silver.github.io/java/2025-02-25-arraylist-array/"><![CDATA[<ul>
  <li><a href="#-arraylistinteger는-언제-더-유리할까"><code class="language-plaintext highlighter-rouge">ArrayList&lt;Integer&gt;</code>는 언제 더 유리할까?</a></li>
  <li><a href="#-int-배열이-더-유리한-경우"><code class="language-plaintext highlighter-rouge">int[] 배열</code>이 더 유리한 경우</a></li>
  <li><a href="#-성능-비교-실험-java">성능 비교 실험 (Java)</a></li>
  <li><a href="#-결론-언제-arraylist를-쓰고-언제-배열int을-써야-할까">결론: 언제 <code class="language-plaintext highlighter-rouge">ArrayList</code>를 쓰고, 언제 <code class="language-plaintext highlighter-rouge">배열(int[])</code>을 써야 할까?</a></li>
  <li><a href="#추가--hashmapinteger-integer와의-성능-비교">추가 : HashMap&lt;Integer, Integer&gt;와의 성능 비교</a></li>
</ul>

<hr />

<h2 id="-arraylist-vs-배열int-성능-비교"><strong>🚀 <code class="language-plaintext highlighter-rouge">ArrayList</code> vs <code class="language-plaintext highlighter-rouge">배열(int[])</code> 성능 비교</strong></h2>

<table>
  <thead>
    <tr>
      <th> </th>
      <th><code class="language-plaintext highlighter-rouge">ArrayList&lt;Integer&gt;</code></th>
      <th><code class="language-plaintext highlighter-rouge">int[] 배열</code></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>저장 방식</strong></td>
      <td>내부적으로 동적 배열(<code class="language-plaintext highlighter-rouge">Object[]</code>) 사용</td>
      <td>고정 크기의 <code class="language-plaintext highlighter-rouge">int[]</code> 배열 사용</td>
    </tr>
    <tr>
      <td><strong>메모리 사용량</strong></td>
      <td><code class="language-plaintext highlighter-rouge">Integer</code> 객체를 사용하여 오버헤드가 큼</td>
      <td><code class="language-plaintext highlighter-rouge">int</code> 원시 타입 사용 (메모리 효율적)</td>
    </tr>
    <tr>
      <td><strong>속도 (읽기/쓰기)</strong></td>
      <td>일반적으로 <code class="language-plaintext highlighter-rouge">int[]</code>보다 느림</td>
      <td><strong>빠름 (메모리 직접 접근)</strong></td>
    </tr>
    <tr>
      <td><strong>크기 변경 가능 여부</strong></td>
      <td>가능 (<code class="language-plaintext highlighter-rouge">add()</code>, <code class="language-plaintext highlighter-rouge">remove()</code> 등 제공)</td>
      <td>불가능 (고정 크기)</td>
    </tr>
    <tr>
      <td><strong>사용 편의성</strong></td>
      <td>유동적인 크기 조절이 가능</td>
      <td>크기 변경이 불가능하여 유연성이 떨어짐</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="-arraylistinteger는-언제-더-유리할까"><strong>📌 <code class="language-plaintext highlighter-rouge">ArrayList&lt;Integer&gt;</code>는 언제 더 유리할까?</strong></h2>

<ul>
  <li><strong>크기가 가변적인 데이터를 다룰 때</strong> (<code class="language-plaintext highlighter-rouge">add()</code>로 쉽게 추가 가능)</li>
  <li><strong>삭제, 삽입이 자주 발생할 때</strong> (<code class="language-plaintext highlighter-rouge">remove()</code> 메서드 활용 가능)</li>
  <li><strong>제네릭(<code class="language-plaintext highlighter-rouge">List&lt;T&gt;</code>)을 활용해야 할 때</strong></li>
</ul>

<h4 id="-예제-arraylist-사용-시"><strong>🚀 예제: <code class="language-plaintext highlighter-rouge">ArrayList</code> 사용 시</strong></h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
<span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>  <span class="c1">// 값 추가</span>
<span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
<span class="n">list</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>  <span class="c1">// 첫 번째 요소 삭제</span>
</code></pre></div></div>

<ul>
  <li>크기가 유동적으로 변할 수 있음 (<code class="language-plaintext highlighter-rouge">add()</code>, <code class="language-plaintext highlighter-rouge">remove()</code> 사용 가능)</li>
  <li>그러나 <strong>내부적으로 <code class="language-plaintext highlighter-rouge">Integer</code> 객체를 사용하므로 메모리 사용량이 큼</strong> (<code class="language-plaintext highlighter-rouge">int</code>보다 많은 메모리 차지)</li>
</ul>

<hr />

<h2 id="-int-배열이-더-유리한-경우"><strong>📌 <code class="language-plaintext highlighter-rouge">int[] 배열</code>이 더 유리한 경우</strong></h2>

<ul>
  <li><strong>고정된 크기의 데이터를 다룰 때</strong> (메모리 절약 가능)</li>
  <li><strong>빠른 접근 속도가 필요할 때</strong>
    <ul>
      <li>메모리에 <strong>직접 접근 (O(1))</strong> 가능</li>
    </ul>
  </li>
  <li><strong>성능 최적화가 필요한 경우</strong> (특히 대량 데이터)</li>
</ul>

<h4 id="-예제-int-사용-시"><strong>🚀 예제: <code class="language-plaintext highlighter-rouge">int[]</code> 사용 시</strong></h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
<span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
<span class="n">arr</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span>
<span class="n">arr</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="mi">30</span><span class="o">;</span>
</code></pre></div></div>

<ul>
  <li>메모리를 <strong><code class="language-plaintext highlighter-rouge">int</code> 타입 크기만큼만 사용</strong>(불필요한 <code class="language-plaintext highlighter-rouge">Integer</code> 객체 생성 없음)</li>
  <li><strong>읽기/쓰기 속도가 빠름</strong></li>
</ul>

<hr />

<h2 id="-성능-비교-실험-java"><strong>⏳ 성능 비교 실험 (Java)</strong></h2>

<p>내가 직접 <code class="language-plaintext highlighter-rouge">ArrayList&lt;Integer&gt;</code>와 <code class="language-plaintext highlighter-rouge">int[]</code>의 속도를 비교하는 코드를 실행해볼게!<br />
아래 코드로 <strong>같은 데이터를 저장하고 조회하는데 걸리는 시간</strong>을 비교해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PerformanceTest</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="no">SIZE</span> <span class="o">=</span> <span class="mi">10_000_000</span><span class="o">;</span> <span class="c1">// 1천만 개의 데이터 테스트</span>

        <span class="c1">// 1️⃣ 배열 테스트</span>
        <span class="kt">long</span> <span class="n">startTime</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">SIZE</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">SIZE</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="kt">long</span> <span class="n">endTime</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"배열(int[]) 실행 시간: "</span> <span class="o">+</span> <span class="o">(</span><span class="n">endTime</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">)</span> <span class="o">/</span> <span class="mi">1_000_000</span> <span class="o">+</span> <span class="s">" ms"</span><span class="o">);</span>

        <span class="c1">// 2️⃣ ArrayList 테스트</span>
        <span class="n">startTime</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="no">SIZE</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">SIZE</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">endTime</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"ArrayList 실행 시간: "</span> <span class="o">+</span> <span class="o">(</span><span class="n">endTime</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">)</span> <span class="o">/</span> <span class="mi">1_000_000</span> <span class="o">+</span> <span class="s">" ms"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="-성능-테스트-결과-대략적인-차이"><strong>⏳ 성능 테스트 결과 (대략적인 차이)</strong></h2>

<p><strong>테스트 환경:</strong> <code class="language-plaintext highlighter-rouge">10,000,000</code>개의 데이터를 저장하는 경우<br />
(결과는 실행 환경에 따라 다를 수 있음)</p>

<table>
  <thead>
    <tr>
      <th>데이터 크기</th>
      <th><code class="language-plaintext highlighter-rouge">int[] 배열</code> (배열)</th>
      <th><code class="language-plaintext highlighter-rouge">ArrayList&lt;Integer&gt;</code> (리스트)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>10,000,000개 데이터 저장</td>
      <td><strong>30~50ms</strong></td>
      <td><strong>100~200ms</strong></td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p><strong>✅ 배열(<code class="language-plaintext highlighter-rouge">int[]</code>)이 <code class="language-plaintext highlighter-rouge">ArrayList&lt;Integer&gt;</code>보다 약 3~5배 빠름!</strong></p>
</blockquote>

<hr />

<h2 id="-결론-언제-arraylist를-쓰고-언제-배열int을-써야-할까"><strong>📌 결론: 언제 <code class="language-plaintext highlighter-rouge">ArrayList</code>를 쓰고, 언제 <code class="language-plaintext highlighter-rouge">배열(int[])</code>을 써야 할까?</strong></h2>

<table>
  <thead>
    <tr>
      <th>상황</th>
      <th><code class="language-plaintext highlighter-rouge">ArrayList&lt;Integer&gt;</code></th>
      <th><code class="language-plaintext highlighter-rouge">int[] 배열</code></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>데이터 크기가 가변적일 때</strong></td>
      <td>✅ 추천 (자동 크기 증가)</td>
      <td>❌ 비효율적 (고정 크기)</td>
    </tr>
    <tr>
      <td><strong>빠른 읽기/쓰기 성능이 필요할 때</strong></td>
      <td>❌ 상대적으로 느림</td>
      <td>✅ 빠름 (메모리 직접 접근)</td>
    </tr>
    <tr>
      <td><strong>메모리 사용량 최적화가 필요할 때</strong></td>
      <td>❌ <code class="language-plaintext highlighter-rouge">Integer</code> 객체로 인해 메모리 낭비</td>
      <td>✅ <code class="language-plaintext highlighter-rouge">int</code> 원시 타입이므로 메모리 절약</td>
    </tr>
    <tr>
      <td><strong>삭제/삽입이 자주 발생할 때</strong></td>
      <td>✅ <code class="language-plaintext highlighter-rouge">remove()</code> 지원</td>
      <td>❌ 배열 크기 고정이라 비효율적</td>
    </tr>
  </tbody>
</table>

<ol>
  <li><strong>성능이 중요하다면 <code class="language-plaintext highlighter-rouge">int[]</code> 배열이 훨씬 빠르고 메모리도 절약된다!</strong> 🚀</li>
  <li><strong>크기가 변하는 데이터를 다룰 때는 <code class="language-plaintext highlighter-rouge">ArrayList&lt;Integer&gt;</code>가 편리하다.</strong> ✅</li>
  <li><strong>데이터 개수가 많고, 읽기/쓰기 성능이 중요하다면 <code class="language-plaintext highlighter-rouge">int[]</code>을 사용하는 것이 좋다.</strong> ⚡</li>
  <li><strong>일반적인 상황에서는 <code class="language-plaintext highlighter-rouge">ArrayList&lt;Integer&gt;</code>를 쓰는 게 개발 편의성 면에서 좋다.</strong></li>
</ol>

<p>즉, <strong>고정된 크기라면 배열을 쓰고, 크기가 유동적이면 <code class="language-plaintext highlighter-rouge">ArrayList</code>를 쓰는 게 정답!</strong> 😃</p>

<hr />

<h2 id="추가--hashmapinteger-integer와의-성능-비교">추가 : HashMap&lt;Integer, Integer&gt;와의 성능 비교</h2>

<table>
  <thead>
    <tr>
      <th>데이터 구조</th>
      <th>실행 속도 (초)</th>
      <th>특징</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>배열 (<code class="language-plaintext highlighter-rouge">int[]</code>)</strong></td>
      <td><strong>가장 빠름</strong> (0.03~0.05초)</td>
      <td>메모리 직접 접근 (고정 크기)</td>
    </tr>
    <tr>
      <td><strong>ArrayList (<code class="language-plaintext highlighter-rouge">ArrayList&lt;Integer&gt;</code>)</strong></td>
      <td><strong>중간 (0.1~0.2초)</strong></td>
      <td>동적 크기 조정 가능</td>
    </tr>
    <tr>
      <td><strong>HashMap (<code class="language-plaintext highlighter-rouge">HashMap&lt;Integer, Integer&gt;</code>)</strong></td>
      <td><strong>가장 느림 (0.3~0.5초)</strong></td>
      <td>키-값 매핑 (빠른 탐색)</td>
    </tr>
  </tbody>
</table>

<hr />

<h3 id="3️⃣-hashmap-hashmapinteger-integer"><strong>3️⃣ HashMap (<code class="language-plaintext highlighter-rouge">HashMap&lt;Integer, Integer&gt;</code>)</strong></h3>

<ul>
  <li><strong>속도:</strong> <strong>가장 느림 (배열보다 약 5~10배 느림)</strong></li>
  <li><strong>이유:</strong>
    <ul>
      <li>내부적으로 <strong>해시 함수(Hashing)</strong> 사용 → 빠른 탐색(O(1)) 가능</li>
      <li>하지만 키-값 저장 방식이라 <strong>메모리 오버헤드가 큼</strong></li>
    </ul>
  </li>
  <li><strong>장점:</strong>
    <ul>
      <li>데이터 검색이 <strong>O(1) (거의 즉각적)</strong></li>
      <li>키 기반으로 <strong>빠르게 값에 접근 가능</strong></li>
    </ul>
  </li>
  <li><strong>언제 사용하면 좋을까?</strong>
    <ul>
      <li><strong>Key-Value 형태의 데이터 저장이 필요할 때</strong></li>
      <li><strong>데이터 조회 속도가 중요한 경우</strong> (탐색이 많을 때)</li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="-결론"><strong>💡 결론</strong></h3>

<table>
  <thead>
    <tr>
      <th>사용 목적</th>
      <th>추천 자료 구조</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>고정된 크기의 데이터</strong></td>
      <td><code class="language-plaintext highlighter-rouge">int[]</code> (배열)</td>
    </tr>
    <tr>
      <td><strong>크기가 유동적인 리스트</strong></td>
      <td><code class="language-plaintext highlighter-rouge">ArrayList&lt;Integer&gt;</code></td>
    </tr>
    <tr>
      <td><strong>빠른 탐색이 필요한 경우</strong></td>
      <td><code class="language-plaintext highlighter-rouge">HashMap&lt;Integer, Integer&gt;</code></td>
    </tr>
  </tbody>
</table>

<p>즉,<br />
✔ <strong>빠른 연산이 필요하면 <code class="language-plaintext highlighter-rouge">int[] 배열</code></strong><br />
✔ <strong>동적 크기가 필요하면 <code class="language-plaintext highlighter-rouge">ArrayList&lt;Integer&gt;</code></strong><br />
✔ <strong>키-값 조회가 많다면 <code class="language-plaintext highlighter-rouge">HashMap&lt;Integer, Integer&gt;</code></strong></p>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="java" /><summary type="html"><![CDATA[ArrayList와 배열(int[])의 성능을 비교해보자.]]></summary></entry><entry><title type="html">[JAVA] SOLID 원칙</title><link href="https://nan0silver.github.io/java/2025-02-23-solid/" rel="alternate" type="text/html" title="[JAVA] SOLID 원칙" /><published>2025-02-23T00:00:00+00:00</published><updated>2025-03-06T14:08:22+00:00</updated><id>https://nan0silver.github.io/java/solid</id><content type="html" xml:base="https://nan0silver.github.io/java/2025-02-23-solid/"><![CDATA[<ul>
  <li><a href="#1-srp-single-responsibility-principle">1. 단일 책임 원칙</a></li>
  <li><a href="#2-ocp-openclosed-principle">2. 개방-폐쇄 원칙</a></li>
  <li><a href="#3-lsp-liskov-substitution-principle">3. 리스코프 치환 원칙</a></li>
  <li><a href="#4-isp-interface-segregation-principle">4. 인터페이스 분리 원칙</a></li>
  <li><a href="#5-dip-dependency-inversion-principle">5. 의존성 역전 원칙</a></li>
</ul>

<hr />

<h2 id="solid-원칙">SOLID 원칙</h2>

<ul>
  <li>객체지향 프로그래밍(OOP)에서 SOLID 원칙이란, 유지보수와 확장이 쉬운 소프트웨어를 만들기 위한 5가지 설계 원칙</li>
  <li>각각의 원칙의 첫글자를 따서 만든 약자.</li>
  <li><img src="https://raw.githubusercontent.com/nan0silver/nan0silver.github.io/3820f9cfa16c85c0487a9fd198d804a6f957a658/assets/img/blog/2025-02-23-solid.svg" alt="solid 원칙" /></li>
</ul>

<h2 id="1-srp-single-responsibility-principle"><strong>1. SRP (Single Responsibility Principle)</strong></h2>

<blockquote>
  <p>🔴 단일 책임 원칙</p>
</blockquote>

<ul>
  <li>정의
    <ul>
      <li>하나의 클래스는 단 하나의 책임(기능)만 가져야 한다.</li>
      <li>즉, 클래스가 변경될 이유는 오직 하나여야 한다/</li>
    </ul>
  </li>
  <li>의미
    <ul>
      <li>클래스가 너무 많은 역할을 담당하게 되면, 유지보수나 확장 시 하나의 변경 사항이 다른 기능까지 의도치 않게 영향을 줄 수 있음</li>
      <li>하나의 클래스가 단 하나의 목적만 수행하도록 하면, 코드 관리가 쉬워지고 명확해짐</li>
    </ul>
  </li>
  <li>예시
    <ul>
      <li>❌ 나쁜 예시 : 회원 관리 클래스가 로그인, 회원정보 관리, 이메일 발송까지 전부 담당</li>
      <li>✅ 좋은 예시 : 로그인 클래스, 회원정보 관리 클래스, 이메일 발송 클래스를 각각 따로 분리</li>
    </ul>
  </li>
</ul>

<h2 id="2-ocp-openclosed-principle"><strong>2. OCP (Open/Closed Principle)</strong></h2>

<blockquote>
  <p>🟠 개방-폐쇄 원칙</p>
</blockquote>

<ul>
  <li>정의
    <ul>
      <li>소프트웨어의 구성 요소(클래스, 모듈, 함수 등)는 확장에는 열려있고, 변경에는 닫혀있어야 한다.</li>
    </ul>
  </li>
  <li>의미
    <ul>
      <li>새로운 기능을 추가할 때 기존 코드를 수정하지 않고도 기능을 확장할 수 있어야 함.</li>
    </ul>
  </li>
  <li>예시
    <ul>
      <li>❌ 나쁜 예시 : 새로운 결제 방식을 추가할 때마다 기존의 결제 클래스를 직접 수정</li>
      <li>✅ 좋은 예시 : 결제 방식 인터페이스를 정의하고, 이를 구현한 클래스(신용카드 결제, 페이팔 결제 등)를 추가함으로써 기존 코드 수정 없이 확장 가능</li>
    </ul>
  </li>
</ul>

<h2 id="3-lsp-liskov-substitution-principle"><strong>3. LSP (Liskov Substitution Principle)</strong></h2>

<blockquote>
  <p>🟡 리스코프 치환 원칙</p>
</blockquote>

<ul>
  <li>정의
    <ul>
      <li>자식 클래스는 언제나 부모 클래스를 대체할 수 있어야 함.</li>
      <li>부모 클래스가 사용되는 곳에 자식 클래스를 넣었을 때도 프로그램이 정확히 동작해야 함</li>
    </ul>
  </li>
  <li>의미
    <ul>
      <li>상속 관계를 올바르게 설계해 자식 클래스가 부모 클래스의 본질적인 특성을 바꾸지 않아야 한다.</li>
      <li>자식 클래스는 부모 클래스가 가진 모든 속성과 메서드를 위반 없이 사용할 수 있어야함</li>
    </ul>
  </li>
  <li>예시
    <ul>
      <li>❌ 나쁜 예시 : ‘정사각형’ 클래스를 ‘직사각형’의 자식 클래스로 만들었지만, 가로세로를 독립적으로 조정할 수 없어서 예상한 동작이 깨지는 경우</li>
      <li>✅ 좋은 예시 : ‘도형’이라는 부모 클래스를 상속하여 ‘직사각형’, ‘정사각형’, ‘삼각형’ 등으로 각자 독립적으로 확장하여 서로 간섭 없이 동작</li>
    </ul>
  </li>
</ul>

<h2 id="4-isp-interface-segregation-principle"><strong>4. ISP (Interface Segregation Principle)</strong></h2>

<blockquote>
  <p>🟢 인터페이스 분리 원칙</p>
</blockquote>

<ul>
  <li>정의
    <ul>
      <li>클라이언트는 자신이 사용하지 않은 메서드에 의존하지 않아야 함.</li>
      <li>하나의 일반적인 인터페이스보다 여러 개의 구체적이고 세분화된 인터페이스를 사용하는 것이 좋음</li>
    </ul>
  </li>
  <li>의미
    <ul>
      <li>하나의 크고 범용적인 인터페이스보다, 용도에 따라 작고 명확하게 구분된 인터페이스를 제공하는 것이 좋음</li>
      <li>클라이언트가 필요로 하는 최소한의 메서드만 포함한 인터페이스를 만들어야함</li>
    </ul>
  </li>
  <li>예시
    <ul>
      <li>❌ 나쁜 예시 : 하나의 인터페이스에 “프린트, 팩스, 복사, 스캔” 기능을 모두 넣어서 일부만 사용하는 프린터 기기같이 모든 메서드를 구현해야하는 경우</li>
      <li>✅ 좋은 예시 : “프린트 인터페이스”, “팩스 인터페이스”, “복사 인터페이스”, “스캔 인터페이스”로 나눠서 필요한 기능만 구현하도록 제공</li>
    </ul>
  </li>
</ul>

<h2 id="5-dip-dependency-inversion-principle"><strong>5. DIP (Dependency Inversion Principle)</strong></h2>

<blockquote>
  <p>🔵 의존성 역전 원칙</p>
</blockquote>

<ul>
  <li>정의
    <ul>
      <li>고수준 모듈은 저수준 모듈의 구현에 의존해서는 안되며 둘 다 추상화에 의존해야함</li>
      <li>또한, 추상화(인터페이스나 추상 클래스)는 세부 사항에 의존해서는 안되고, 세부 사항이 추상화에 의존해야함</li>
    </ul>
  </li>
  <li>의미
    <ul>
      <li>클래스가 특정 구현(구체적 클래스)이 아닌, 추상화된 인터페이스에 의존하도록 설계해야 함.</li>
      <li>이는 의존 관계룰 유연하게 만들어 유지보수 및 확장이 편리해지게 횜</li>
    </ul>
  </li>
  <li>
    <p>예시</p>

    <ul>
      <li>❌ 나쁜 예시 : 데이터베이스 클래스가 특정 DB(에: MySQL)에 직접 의존하는 코드 설계</li>
      <li>✅ 좋은 예시 : 데이터베이스 인터페이스를 정의하고, 이를 구현하는 다양한 DB클래스(MySQL, PostgreSQL 등)를 만들어 상위 모듈이 인터페이스에만 의존하도록 설계</li>
    </ul>

    <h2 id="solid-원칙을-지켰을-때의-장점">SOLID 원칙을 지켰을 때의 장점</h2>

    <ul>
      <li>유지보수 용이성</li>
      <li>코드 확장 용이성</li>
      <li>가독성 및 코드 품질 향상</li>
      <li>테스트 용이성</li>
    </ul>
  </li>
</ul>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="java" /><summary type="html"><![CDATA[유지보수와 확장이 쉬운 소프트웨어를 만들기 위한 5가지 설계 원칙인 SOLID 원칙에 대해 알아보자.]]></summary></entry><entry><title type="html">[Etc] 🔑 Access Token과 Refresh Token 완벽 정리</title><link href="https://nan0silver.github.io/miscellaneous/2025-02-22-token/" rel="alternate" type="text/html" title="[Etc] 🔑 Access Token과 Refresh Token 완벽 정리" /><published>2025-02-22T00:00:00+00:00</published><updated>2025-03-06T14:08:22+00:00</updated><id>https://nan0silver.github.io/miscellaneous/token</id><content type="html" xml:base="https://nan0silver.github.io/miscellaneous/2025-02-22-token/"><![CDATA[<ul>
  <li><a href="#1-access-token과-refresh-token이란">Access Token과 Refresh Token이란?</a></li>
  <li><a href="#2-access-token">Access Token</a></li>
  <li><a href="#3-refresh-token">Refresh Token</a></li>
  <li><a href="#4-access-token-vs-refresh-token-비교">Access Token vs. Refresh Token 비교</a></li>
  <li><a href="#5-access-token과-refresh-token을-사용하는-이유">Access Token과 Refresh Token을 사용하는 이유</a></li>
  <li><a href="#6-access-token과-refresh-token을-활용한-인증-흐름">Access Token과 Refresh Token을 활용한 인증 흐름</a></li>
  <li><a href="#7-access-token--refresh-token-보안-고려-사항">Access Token &amp; Refresh Token 보안 고려 사항</a></li>
  <li><a href="#8-access-token--refresh-token-실제-코드-구현-java-spring-security">실제 코드 구현 (Java, Spring Security)</a></li>
</ul>

<hr />

<h2 id="1-access-token과-refresh-token이란"><strong>1. Access Token과 Refresh Token이란?</strong></h2>

<blockquote>
  <p>OAuth 2.0을 사용할 때 핵심이 되는 토큰</p>
</blockquote>

<table>
  <thead>
    <tr>
      <th>토큰 종류</th>
      <th>역할</th>
      <th>유효 기간</th>
      <th>사용 목적</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Access Token</strong></td>
      <td>API 요청 시 인증을 위한 토큰</td>
      <td>짧음 (몇 분~1시간)</td>
      <td>사용자가 인증된 후 API 접근</td>
    </tr>
    <tr>
      <td><strong>Refresh Token</strong></td>
      <td>Access Token이 만료되었을 때 새 토큰 발급</td>
      <td>김 (며칠~몇 달)</td>
      <td>Access Token을 갱신</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="2-access-token"><strong>2. Access Token</strong></h2>

<h3 id="-access-token이란">✅ <strong>Access Token이란?</strong></h3>

<ul>
  <li>사용자가 OAuth 인증을 마치면 <strong>Authorization Server</strong>가 발급하는 <strong>단기 유효 토큰</strong>.</li>
  <li>이 토큰을 API 요청의 <strong>Authorization 헤더</strong>에 포함하여 사용.</li>
  <li>일반적으로 <strong>Bearer Token 방식</strong>으로 사용됨.</li>
</ul>

<h3 id="-access-token-사용-예시">🎯 <strong>Access Token 사용 예시</strong></h3>

<p>HTTP 요청에서 Access Token을 포함하여 API 호출:</p>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">GET</span> <span class="nn">/user/profile</span> <span class="k">HTTP</span><span class="o">/</span><span class="m">1.1</span>
<span class="na">Host</span><span class="p">:</span> <span class="s">api.example.com</span>
<span class="na">Authorization</span><span class="p">:</span> <span class="s">Bearer ACCESS_TOKEN</span>
</code></pre></div></div>

<h3 id="-access-token의-유효-기간">⏳ <strong>Access Token의 유효 기간</strong></h3>

<ul>
  <li>보안상 <strong>짧은 시간(몇 분~1시간 정도)</strong> 만 유지됨.</li>
  <li>Access Token이 만료되면 더 이상 API를 호출할 수 없음.</li>
  <li>해결 방법: <strong>Refresh Token을 사용하여 새로운 Access Token 발급</strong>.</li>
</ul>

<hr />

<h2 id="3-refresh-token"><strong>3. Refresh Token</strong></h2>

<h3 id="-refresh-token이란">✅ <strong>Refresh Token이란?</strong></h3>

<ul>
  <li>Access Token이 만료되었을 때, <strong>새로운 Access Token을 요청할 수 있도록 제공되는 장기 토큰</strong>.</li>
  <li>Access Token과 다르게, Refresh Token 자체로는 API 요청을 보낼 수 없음.</li>
  <li>일반적으로 <strong>다시 로그인하지 않고도 인증을 연장할 때 사용</strong>.</li>
</ul>

<h3 id="-refresh-token-사용-예시">🎯 <strong>Refresh Token 사용 예시</strong></h3>

<p>Access Token이 만료되면, Refresh Token을 이용하여 새 Access Token을 요청:</p>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">POST</span> <span class="nn">/auth/token</span> <span class="k">HTTP</span><span class="o">/</span><span class="m">1.1</span>
<span class="na">Host</span><span class="p">:</span> <span class="s">auth.example.com</span>
<span class="na">Content-Type</span><span class="p">:</span> <span class="s">application/x-www-form-urlencoded</span>

grant_type=refresh_token&amp;
client_id=YOUR_CLIENT_ID&amp;
client_secret=YOUR_CLIENT_SECRET&amp;
refresh_token=YOUR_REFRESH_TOKEN
</code></pre></div></div>

<h3 id="-refresh-token의-유효-기간">⏳ <strong>Refresh Token의 유효 기간</strong></h3>

<ul>
  <li><strong>며칠~몇 달까지 유지 가능</strong> (보안 정책에 따라 다름).</li>
  <li>일반적으로 <strong>기기 변경, 비밀번호 변경, 보안 위험 감지 시 강제 만료됨</strong>.</li>
</ul>

<hr />

<h2 id="4-access-token-vs-refresh-token-비교"><strong>4. Access Token vs. Refresh Token 비교</strong></h2>

<table>
  <thead>
    <tr>
      <th> </th>
      <th><strong>Access Token</strong></th>
      <th><strong>Refresh Token</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>목적</strong></td>
      <td>API 요청 인증</td>
      <td>새로운 Access Token 발급</td>
    </tr>
    <tr>
      <td><strong>유효 기간</strong></td>
      <td>짧음 (몇 분~1시간)</td>
      <td>김 (며칠~몇 달)</td>
    </tr>
    <tr>
      <td><strong>보관 위치</strong></td>
      <td>클라이언트 저장</td>
      <td>클라이언트 저장 (보안 필요)</td>
    </tr>
    <tr>
      <td><strong>보안 위험</strong></td>
      <td>탈취되면 API 무단 접근 가능</td>
      <td>탈취되면 새로운 Access Token 발급 가능</td>
    </tr>
    <tr>
      <td><strong>사용 가능 횟수</strong></td>
      <td>여러 번 API 요청 가능</td>
      <td>1회 또는 제한적 사용</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="5-access-token과-refresh-token을-사용하는-이유"><strong>5. Access Token과 Refresh Token을 사용하는 이유</strong></h2>

<h3 id="access-token만-사용하면"><strong>Access Token만 사용하면?</strong></h3>

<ul>
  <li>보안상 유효 기간을 길게 설정할 수 없음.</li>
  <li>토큰이 만료될 때마다 사용자가 다시 로그인해야 함 → <strong>불편함</strong>.</li>
</ul>

<h3 id="refresh-token을-추가하면"><strong>Refresh Token을 추가하면?</strong></h3>

<ul>
  <li><strong>Access Token을 자주 갱신할 수 있음</strong> → 보안 강화.</li>
  <li>사용자가 다시 로그인할 필요 없이 <strong>자동으로 인증 연장 가능</strong>.</li>
</ul>

<p>👉 <strong>Refresh Token을 사용하면 보안과 사용자 편의성 모두 향상됨</strong>.</p>

<hr />

<h2 id="6-access-token과-refresh-token을-활용한-인증-흐름"><strong>6. Access Token과 Refresh Token을 활용한 인증 흐름</strong></h2>

<p>1️⃣ <strong>사용자가 로그인 &amp; 권한 부여</strong><br />
 → OAuth 서버가 <strong>Access Token과 Refresh Token 발급</strong><br />
2️⃣ <strong>클라이언트가 API 요청</strong><br />
 → <code class="language-plaintext highlighter-rouge">Authorization: Bearer Access_Token</code> 포함하여 요청<br />
3️⃣ <strong>Access Token이 만료됨</strong><br />
 → API 서버가 <strong>401 Unauthorized</strong> 응답 반환<br />
4️⃣ <strong>Refresh Token을 사용해 새 Access Token 요청</strong><br />
 → 새 Access Token 발급 후 다시 API 요청 가능<br />
5️⃣ <strong>Refresh Token도 만료됨</strong><br />
 → 사용자는 <strong>다시 로그인 필요</strong></p>

<p>👉 <strong>Access Token은 API 요청을 인증하는 용도, Refresh Token은 새로운 Access Token을 발급하는 용도!</strong><br />
👉 <strong>보안이 중요한 만큼 저장 방식과 유효 기간을 잘 관리해야 함!</strong> 🚀</p>

<hr />

<h2 id="7-access-token--refresh-token-보안-고려-사항"><strong>7. Access Token &amp; Refresh Token 보안 고려 사항</strong></h2>

<h3 id="-access-token-보안">✅ <strong>Access Token 보안</strong></h3>

<ul>
  <li><strong>유효 기간을 짧게 설정</strong> (몇 분~1시간)</li>
  <li><strong>HTTPS 사용 필수</strong> (네트워크 스니핑 방지)</li>
  <li><strong>탈취되면 API 접근 가능 → 짧은 유효 기간이 보안성을 보장</strong></li>
</ul>

<h3 id="-refresh-token-보안">✅ <strong>Refresh Token 보안</strong></h3>

<ul>
  <li><strong>보안 저장소 사용</strong> (예: 모바일 앱에서는 <strong>Secure Storage</strong>)</li>
  <li><strong>HTTP 요청 시 노출되지 않도록 주의</strong> (쿠키 또는 안전한 저장소에 보관)</li>
  <li><strong>유출 시 즉시 무효화 필요</strong> (서버에서 토큰 무효화 기능 추가)</li>
</ul>

<h3 id="-탈취-방지-방법">🚨 <strong>탈취 방지 방법</strong></h3>

<ol>
  <li><strong>Refresh Token을 클라이언트에서 안전하게 저장</strong>
    <ul>
      <li>브라우저: <strong>HttpOnly Secure Cookie</strong> 사용</li>
      <li>모바일 앱: <strong>Secure Storage / Keychain</strong> 사용</li>
    </ul>
  </li>
  <li><strong>Refresh Token 재사용 방지 (One-Time Refresh Token)</strong>
    <ul>
      <li>Refresh Token을 사용할 때마다 새 Refresh Token을 발급하고 이전 것은 무효화</li>
    </ul>
  </li>
  <li><strong>IP &amp; 디바이스 검증</strong>
    <ul>
      <li>Refresh Token 사용 시 <strong>IP 주소와 디바이스 정보를 확인하여 이상 감지 시 무효화</strong></li>
    </ul>
  </li>
  <li><strong>토큰 암호화 및 서명</strong>
    <ul>
      <li>JWT 기반 Access Token은 <strong>서명(Signature)</strong> 을 포함하여 위변조 방지</li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="8-access-token--refresh-token-실제-코드-구현-java-spring-security"><strong>8. Access Token &amp; Refresh Token 실제 코드 구현 (Java, Spring Security)</strong></h2>

<h3 id="-access-token--refresh-token-발급-api-예제-spring-boot"><strong>🔹 Access Token &amp; Refresh Token 발급 API 예제 (Spring Boot)</strong></h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/auth"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthController</span> <span class="o">{</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/token"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ResponseEntity</span><span class="o">&lt;?&gt;</span> <span class="n">getToken</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="nc">String</span> <span class="n">refreshToken</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">isValidRefreshToken</span><span class="o">(</span><span class="n">refreshToken</span><span class="o">))</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">newAccessToken</span> <span class="o">=</span> <span class="n">generateNewAccessToken</span><span class="o">();</span>
            <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="n">newAccessToken</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">UNAUTHORIZED</span><span class="o">).</span><span class="na">body</span><span class="o">(</span><span class="s">"Invalid Refresh Token"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isValidRefreshToken</span><span class="o">(</span><span class="nc">String</span> <span class="n">token</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Refresh Token 검증 로직</span>
        <span class="k">return</span> <span class="n">token</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"valid-refresh-token"</span><span class="o">);</span> <span class="c1">// 예제 코드</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">generateNewAccessToken</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 새로운 Access Token 생성 (JWT 사용 가능)</span>
        <span class="k">return</span> <span class="no">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="miscellaneous" /><summary type="html"><![CDATA[OAuth 2.0을 사용할때 핵심인 Access Token과 Refresh Token에 대해 알아보자.]]></summary></entry><entry><title type="html">[Etc] OAuth란?</title><link href="https://nan0silver.github.io/miscellaneous/2025-02-20-OAuth/" rel="alternate" type="text/html" title="[Etc] OAuth란?" /><published>2025-02-20T00:00:00+00:00</published><updated>2025-03-06T14:08:22+00:00</updated><id>https://nan0silver.github.io/miscellaneous/OAuth</id><content type="html" xml:base="https://nan0silver.github.io/miscellaneous/2025-02-20-OAuth/"><![CDATA[<ul>
  <li><a href="#1-oauth-개념과-특징">OAuth 개념과 특징</a></li>
  <li><a href="#2-oauth-10-vs-oauth-20">OAuth 1.0 vs. OAuth 2.0</a></li>
  <li><a href="#3-oauth-20-상세-동작-방식">OAuth 2.0 상세 동작 방식</a></li>
  <li><a href="#4-oauth-20-grant-types-인증-방식">OAuth 2.0 Grant Types (인증 방식)</a></li>
  <li><a href="#5-oauth-20의-주요-용어">OAuth 2.0의 주요 용어</a></li>
  <li><a href="#6-oauth-20을-실제-코드로-구현">OAuth 2.0을 실제 코드로 구현</a></li>
  <li><a href="#7-oauth의-장점--단점">OAuth의 장점 &amp; 단점</a></li>
</ul>

<hr />

<h2 id="oauth란"><strong>OAuth란?</strong></h2>

<blockquote>
  <p><strong>서드파티 애플리케이션이 사용자 인증 정보를 직접 다루지 않고, 다른 서비스의 인증을 통해 특정 리소스에 접근할 수 있도록 하는 인증 및 권한 부여 프로토콜</strong></p>
</blockquote>

<ul>
  <li><strong>“카카오 로그인”, “구글 로그인”, “페이스북 로그인”</strong> 같은 기능이 OAuth를 사용한 대표적인 사례</li>
</ul>

<hr />

<h2 id="1-oauth-개념과-특징"><strong>1. OAuth 개념과 특징</strong></h2>

<h3 id="-oauth의-핵심-개념">✅ <strong>OAuth의 핵심 개념</strong></h3>

<ul>
  <li><strong>인증(Authentication)</strong>: 사용자가 누구인지 확인하는 과정</li>
  <li><strong>권한 부여(Authorization)</strong>: 사용자가 특정 리소스에 대한 액세스를 허용하는 과정</li>
  <li><strong>토큰 기반 인증</strong>: ID/비밀번호 대신 <strong>Access Token</strong>을 사용하여 API 요청</li>
  <li><strong>안전한 인증 방식</strong>: 클라이언트가 직접 사용자 계정 정보를 저장하지 않아 보안 강화</li>
</ul>

<h3 id="-oauth-동작-방식">✅ <strong>OAuth 동작 방식</strong></h3>

<ol>
  <li>사용자가 서드파티 앱에서 로그인 버튼 클릭</li>
  <li>OAuth 서버(예: Google, Kakao)가 사용자에게 로그인 페이지 제공</li>
  <li>사용자가 로그인하고 권한을 승인</li>
  <li>OAuth 서버가 서드파티 앱에 <strong>Authorization Code</strong> 제공</li>
  <li>서드파티 앱이 Authorization Code를 사용하여 <strong>Access Token</strong> 요청</li>
  <li>Access Token을 통해 리소스 서버(API)에 접근하여 데이터 제공</li>
</ol>

<hr />

<h2 id="2-oauth-10-vs-oauth-20"><strong>2. OAuth 1.0 vs. OAuth 2.0</strong></h2>

<blockquote>
  <p>OAuth는 <strong>1.0과 2.0 두 가지 버전</strong>이 있으며 현재는 <strong>OAuth 2.0</strong>이 표준.</p>
</blockquote>

<table>
  <thead>
    <tr>
      <th>특징</th>
      <th>OAuth 1.0</th>
      <th>OAuth 2.0</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>출시</strong></td>
      <td>2010년 이전</td>
      <td>2012년 이후</td>
    </tr>
    <tr>
      <td><strong>보안 방식</strong></td>
      <td>HMAC-SHA1 서명</td>
      <td>Bearer Token 방식</td>
    </tr>
    <tr>
      <td><strong>암호화 필수 여부</strong></td>
      <td>요청마다 암호화 필요</td>
      <td>HTTPS만 사용하면 됨</td>
    </tr>
    <tr>
      <td><strong>사용성</strong></td>
      <td>복잡함</td>
      <td>간단하고 확장성이 좋음</td>
    </tr>
    <tr>
      <td><strong>클라이언트 유형</strong></td>
      <td>웹 앱 중심</td>
      <td>모바일, 웹, 서버, IoT 지원</td>
    </tr>
    <tr>
      <td><strong>인증 방식</strong></td>
      <td>Access Token, Secret Key</td>
      <td>Access Token, Refresh Token</td>
    </tr>
  </tbody>
</table>

<p>💡 현재 OAuth 2.0을 대부분 사용</p>

<hr />

<h2 id="3-oauth-20-상세-동작-방식"><strong>3. OAuth 2.0 상세 동작 방식</strong></h2>

<h3 id="-oauth-20의-핵심-개념">🔑 <strong>OAuth 2.0의 핵심 개념</strong></h3>

<ul>
  <li><strong>Authorization Code</strong>: Access Token을 받기 위한 코드</li>
  <li><strong>Access Token</strong>: API 요청 시 사용하는 인증 키</li>
  <li><strong>Refresh Token</strong>: Access Token이 만료될 때 새로운 Token을 발급하는 키</li>
  <li><strong>Redirect URI</strong>: OAuth 서버가 Authorization Code를 전달할 URL</li>
</ul>

<h3 id="oauth-20-인증-과정"><strong>OAuth 2.0 인증 과정</strong></h3>

<h4 id="1️⃣-사용자-인증--권한-부여-authorization-request">1️⃣ <strong>사용자 인증 &amp; 권한 부여 (Authorization Request)</strong></h4>

<ul>
  <li>클라이언트가 <strong>OAuth 제공자(Google, Kakao 등)</strong>에게 로그인 요청</li>
  <li>사용자 로그인 후, 권한 허용 여부를 선택</li>
</ul>

<h4 id="2️⃣-authorization-code-발급">2️⃣ <strong>Authorization Code 발급</strong></h4>

<ul>
  <li>사용자가 권한을 허용하면, OAuth 서버가 <strong>Authorization Code</strong>를 클라이언트에게 전달</li>
</ul>

<h4 id="3️⃣-access-token-발급-token-exchange">3️⃣ <strong>Access Token 발급 (Token Exchange)</strong></h4>

<ul>
  <li>클라이언트는 Authorization Code를 사용해 <strong>Access Token 요청</strong></li>
  <li>OAuth 서버가 유효성 검증 후, <strong>Access Token과 Refresh Token 발급</strong></li>
</ul>

<h4 id="4️⃣-api-요청-resource-access">4️⃣ <strong>API 요청 (Resource Access)</strong></h4>

<ul>
  <li>클라이언트는 Access Token을 포함하여 API 서버에 요청</li>
  <li>API 서버는 토큰을 확인한 후 데이터 반환</li>
</ul>

<h4 id="5️⃣-access-token-갱신-token-refresh">5️⃣ <strong>Access Token 갱신 (Token Refresh)</strong></h4>

<ul>
  <li>Access Token이 만료되면, Refresh Token을 사용하여 새로운 Access Token 발급</li>
</ul>

<hr />

<h2 id="4-oauth-20-grant-types-인증-방식"><strong>4. OAuth 2.0 Grant Types (인증 방식)</strong></h2>

<table>
  <thead>
    <tr>
      <th>Grant Type</th>
      <th>설명</th>
      <th>사용 예시</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Authorization Code</strong></td>
      <td>보안이 뛰어난 방식으로, 서버를 거쳐 Access Token을 받음</td>
      <td>웹, 모바일 앱에서 로그인 연동</td>
    </tr>
    <tr>
      <td><strong>Implicit</strong></td>
      <td>Access Token을 직접 발급 (보안 약함)</td>
      <td>예전 프론트엔드 앱에서 사용 (현재는 사용 X)</td>
    </tr>
    <tr>
      <td><strong>Resource Owner Password Credentials (ROPC)</strong></td>
      <td>사용자 ID/PW를 직접 입력받아 Access Token 발급</td>
      <td>신뢰할 수 있는 앱 (예: 사내 시스템)</td>
    </tr>
    <tr>
      <td><strong>Client Credentials</strong></td>
      <td>클라이언트(서버) 자체가 인증됨 (사용자 없음)</td>
      <td>서버 간 API 호출</td>
    </tr>
    <tr>
      <td><strong>Device Code</strong></td>
      <td>디바이스(스마트 TV 등)에서 로그인</td>
      <td>TV, IoT 기기</td>
    </tr>
  </tbody>
</table>

<p>💡 <strong>일반적으로 “Authorization Code” 방식이 가장 많이 사용됨</strong>.</p>

<hr />

<h2 id="5-oauth-20의-주요-용어"><strong>5. OAuth 2.0의 주요 용어</strong></h2>

<table>
  <thead>
    <tr>
      <th>용어</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Resource Owner (사용자)</strong></td>
      <td>API의 데이터를 소유한 사용자</td>
    </tr>
    <tr>
      <td><strong>Client (클라이언트 앱)</strong></td>
      <td>사용자의 데이터를 요청하는 앱 (예: 서드파티 앱)</td>
    </tr>
    <tr>
      <td><strong>Authorization Server</strong></td>
      <td>인증을 담당하는 서버 (Google, Kakao 등)</td>
    </tr>
    <tr>
      <td><strong>Resource Server</strong></td>
      <td>API 요청을 처리하는 서버 (Google API, Kakao API 등)</td>
    </tr>
    <tr>
      <td><strong>Access Token</strong></td>
      <td>사용자가 인증된 후 API에 접근할 수 있는 키</td>
    </tr>
    <tr>
      <td><strong>Refresh Token</strong></td>
      <td>Access Token이 만료되었을 때 재발급하는 키</td>
    </tr>
    <tr>
      <td><strong>Redirect URI</strong></td>
      <td>OAuth 서버가 Authorization Code를 전달하는 URL</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="6-oauth-20을-실제-코드로-구현"><strong>6. OAuth 2.0을 실제 코드로 구현</strong></h2>

<h3 id="1-authorization-code-방식-java"><strong>(1) Authorization Code 방식 (Java)</strong></h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.net.URI</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.net.http.HttpClient</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.net.http.HttpRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.net.http.HttpResponse</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OAuthExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 1. Authorization Code 요청</span>
        <span class="nc">String</span> <span class="n">clientId</span> <span class="o">=</span> <span class="s">"your-client-id"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">redirectUri</span> <span class="o">=</span> <span class="s">"https://your-app.com/callback"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">authUrl</span> <span class="o">=</span> <span class="s">"https://oauth-provider.com/auth?client_id="</span> <span class="o">+</span> <span class="n">clientId</span> <span class="o">+</span> <span class="s">"&amp;redirect_uri="</span> <span class="o">+</span> <span class="n">redirectUri</span> <span class="o">+</span> <span class="s">"&amp;response_type=code"</span><span class="o">;</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Login URL: "</span> <span class="o">+</span> <span class="n">authUrl</span><span class="o">);</span>

        <span class="c1">// 2. Access Token 요청</span>
        <span class="nc">String</span> <span class="n">authCode</span> <span class="o">=</span> <span class="s">"received-authorization-code"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">tokenUrl</span> <span class="o">=</span> <span class="s">"https://oauth-provider.com/token"</span><span class="o">;</span>

        <span class="nc">HttpClient</span> <span class="n">client</span> <span class="o">=</span> <span class="nc">HttpClient</span><span class="o">.</span><span class="na">newHttpClient</span><span class="o">();</span>
        <span class="nc">HttpRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="nc">HttpRequest</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
            <span class="o">.</span><span class="na">uri</span><span class="o">(</span><span class="no">URI</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">tokenUrl</span><span class="o">))</span>
            <span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">"Content-Type"</span><span class="o">,</span> <span class="s">"application/x-www-form-urlencoded"</span><span class="o">)</span>
            <span class="o">.</span><span class="na">POST</span><span class="o">(</span><span class="nc">HttpRequest</span><span class="o">.</span><span class="na">BodyPublishers</span><span class="o">.</span><span class="na">ofString</span><span class="o">(</span><span class="s">"client_id="</span> <span class="o">+</span> <span class="n">clientId</span> <span class="o">+</span> <span class="s">"&amp;code="</span> <span class="o">+</span> <span class="n">authCode</span> <span class="o">+</span> <span class="s">"&amp;redirect_uri="</span> <span class="o">+</span> <span class="n">redirectUri</span> <span class="o">+</span> <span class="s">"&amp;grant_type=authorization_code"</span><span class="o">))</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>

        <span class="nc">HttpResponse</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="nc">HttpResponse</span><span class="o">.</span><span class="na">BodyHandlers</span><span class="o">.</span><span class="na">ofString</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Access Token Response: "</span> <span class="o">+</span> <span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="7-oauth의-장점--단점"><strong>7. OAuth의 장점 &amp; 단점</strong></h2>

<h3 id="-장점">✅ <strong>장점</strong></h3>

<ol>
  <li><strong>보안성 강화</strong>: ID/PW를 직접 저장하지 않고, Access Token으로 인증</li>
  <li><strong>편리한 로그인</strong>: Google, Kakao 로그인 등 쉽게 연동 가능</li>
  <li><strong>API 사용 간편화</strong>: 서드파티 서비스와 연동할 때 필수</li>
  <li><strong>토큰 만료로 보안 강화</strong>: Access Token이 주기적으로 만료되므로 보안성 향상</li>
</ol>

<h3 id="-단점">❌ <strong>단점</strong></h3>

<ol>
  <li><strong>구현이 복잡함</strong>: Access Token, Refresh Token 관리 필요</li>
  <li><strong>서버 부하 증가</strong>: 토큰 발급 및 검증 과정에서 추가적인 요청 발생</li>
  <li><strong>Refresh Token 유출 위험</strong>: Refresh Token이 유출되면 악용될 가능성 있음</li>
</ol>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="miscellaneous" /><summary type="html"><![CDATA[인증 및 권한 부여 프로토콜인 OAuth에 대해 알아보자.]]></summary></entry><entry><title type="html">[Git] 효율적인 Git commit 전략: 단위 결정, 스타일, 충돌 해결 방법</title><link href="https://nan0silver.github.io/miscellaneous/2025-02-19-git-commit/" rel="alternate" type="text/html" title="[Git] 효율적인 Git commit 전략: 단위 결정, 스타일, 충돌 해결 방법" /><published>2025-02-19T00:00:00+00:00</published><updated>2025-03-06T14:08:22+00:00</updated><id>https://nan0silver.github.io/miscellaneous/git-commit</id><content type="html" xml:base="https://nan0silver.github.io/miscellaneous/2025-02-19-git-commit/"><![CDATA[<ul>
  <li><a href="#commit-단위를-결정-짓는-요소">Commit 단위를 결정 짓는 요소</a></li>
  <li><a href="#udacity-style">Udacity style</a></li>
  <li><a href="#rebase를-잘쓰자">Rebase를 잘쓰자!</a></li>
  <li><a href="#conflict를-해결하는-방법-reset--force-push">conflict를 해결하는 방법</a></li>
</ul>

<hr />

<h2 id="commit-단위를-결정-짓는-요소">Commit 단위를 결정 짓는 요소</h2>

<ol>
  <li>하나의 목적 / 의도</li>
</ol>

<ul>
  <li>커밋은 하나의 논리적 작업 단위만 포함한다.
    <ul>
      <li>예시
        <ul>
          <li>“로그인 버튼 스타일 수정” 과 “API 요청 추가”는 별도 커밋으로 나눔</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<ol>
  <li>변경 사항의 크기
    <ul>
      <li>가능한 작은 크기로 나누되, 완결성을 가져야 한다.</li>
    </ul>
  </li>
  <li>독립성</li>
</ol>

<ul>
  <li>독립적으로 동작할 수 있어야 한다.
    <ul>
      <li>커밋 후 언제든 코드를 실행하거나 테스트할 수 있어야 한다.</li>
    </ul>
  </li>
</ul>

<ol>
  <li>관련성</li>
</ol>

<ul>
  <li>서로 연관된 변경사항은 하나의 커밋으로 묶는다.
    <ul>
      <li>예시: 새로운 기능을 추가하면서 해당 기능의 스타일을 함께 수정하는 경우, 하나의 커밋으로 처리 가능</li>
      <li>하지만 독립적인 기능 수정과 스타일 변경은 별도의 커밋으로 분리해야 함.</li>
    </ul>
  </li>
</ul>

<ol>
  <li>의미 있는 메시지</li>
</ol>

<ul>
  <li>커밋 메시지가 변경 사항을 명확하게 설명할 수 있도록 구성해야함
    <ul>
      <li>예시
        <ul>
          <li>좋은 예 : “사용자 로그인 API 요청 로직 추가”</li>
          <li>나쁜 예 : “수정함” 또는 “업데이트”</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="udacity-style">Udacity style</h2>

<ul>
  <li>Udacity에서 권장하는 <strong>커밋 메시지 작성 스타일</strong>을 의미</li>
</ul>

<h3 id="-udacity-커밋-메시지-스타일">📌 <strong>Udacity 커밋 메시지 스타일</strong></h3>

<p><strong><code class="language-plaintext highlighter-rouge">type: 설명 (길이 72자 이내)</code></strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">type</code>: 변경 사항의 유형을 나타냄 (예: feat, fix, refactor 등)</li>
  <li><code class="language-plaintext highlighter-rouge">설명</code>: 간결하고 명확한 변경 사항 설명</li>
</ul>

<h3 id="-udacity-스타일-커밋-메시지-예시">✅ <strong>Udacity 스타일 커밋 메시지 예시</strong></h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>feat: 로그인 API 요청 추가
fix: 비밀번호 입력 검증 로직 수정
refactor: 중복된 코드 제거 및 함수 리팩토링
style: 코드 스타일 정리 (불필요한 공백 제거)
docs: README 파일 업데이트
test: 회원가입 유닛 테스트 추가
chore: 패키지 버전 업데이트
</code></pre></div></div>

<h3 id="-udacity-스타일-주요-특징">🛠 <strong>Udacity 스타일 주요 특징</strong></h3>

<ol>
  <li><strong>첫 글자는 소문자 사용</strong>
    <ul>
      <li>Git 커밋 메시지 관례에 따라 소문자로 시작함</li>
    </ul>
  </li>
  <li><strong>커밋 타입을 명확히 구분</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">feat</code>: 새로운 기능 추가</li>
      <li><code class="language-plaintext highlighter-rouge">fix</code>: 버그 수정</li>
      <li><code class="language-plaintext highlighter-rouge">refactor</code>: 코드 리팩토링</li>
      <li>기능 유지 + 코드의 가독성, 유지보수성, 성능 최적화등 코드 구조 개선</li>
      <li><code class="language-plaintext highlighter-rouge">style</code>: 코드 스타일 변경 (기능 변경 없음)</li>
      <li>기능 유지 + 들여쓰기, 공백, 줄정리 등 코드 포맷 정리</li>
      <li><code class="language-plaintext highlighter-rouge">docs</code>: 문서 수정</li>
      <li><code class="language-plaintext highlighter-rouge">test</code>: 테스트 코드 추가/수정</li>
      <li><code class="language-plaintext highlighter-rouge">chore</code>: 빌드 및 패키지 관련 작업</li>
    </ul>
  </li>
  <li><strong>제목 길이는 72자 이내로 유지</strong>
    <ul>
      <li>Git 로그에서 한눈에 보기 쉽게 유지</li>
    </ul>
  </li>
  <li><strong>명령형 사용</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">"Fixed login bug"</code> ❌ → <code class="language-plaintext highlighter-rouge">"fix: 로그인 버그 수정"</code> ✅</li>
    </ul>
  </li>
</ol>

<h3 id="-udacity-스타일을-쓰는-이유">🎯 <strong>Udacity 스타일을 쓰는 이유</strong></h3>

<ul>
  <li>협업 시 <strong>일관성 있는 커밋 로그 유지</strong></li>
  <li><strong>Git 커밋 히스토리 가독성 향상</strong></li>
  <li>자동화된 릴리즈 노트 생성 가능 (Conventional Commits 방식과 유사)</li>
  <li><strong>커밋 이력이 깔끔하게 정리</strong>되고 <strong>팀원들이 쉽게 이해</strong>할 수 있어 유지보수 및 협업에 유리하다.</li>
</ul>

<hr />

<h2 id="rebase를-잘쓰자">Rebase를 잘쓰자!</h2>

<ul>
  <li>참조하는 commit을 변경하는 명령어</li>
  <li>base branch가 변경될 때마다 rebase를 하면 conflict를 최소화할 수 있다.</li>
</ul>

<h3 id="rebase란">Rebase란?</h3>

<blockquote>
  <p><a href="https://nan0silver.github.io/miscellaneous/2025-01-23-git-rebase/">🔗 [Git] git rebase</a> 블로그에 정리되어 있습니다!</p>
</blockquote>

<hr />

<h2 id="conflict를-해결하는-방법-reset--force-push">conflict를 해결하는 방법, Reset + force push</h2>

<h3 id="reset이란">Reset이란?</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">git reset</code> 명령어는 특정 커밋으로 되돌리는 기능을 하며, 되돌리는 방식에 따라 코드 변경 사항을 유지할 수도 있고, 삭제할 수도 있음</li>
  <li><code class="language-plaintext highlighter-rouge">git reset</code>의 주요 옵션
    <ul>
      <li><code class="language-plaintext highlighter-rouge">--soft</code>
        <ul>
          <li>특정 커밋 이전으로 HEAD를 이동하지만, 변경된 파일과 스테이징 영역은 그대로 유지</li>
          <li>보통 최근 커밋을 수정하고 다시 커밋할 때 사용</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">--mixed</code> (기본 옵션)
        <ul>
          <li>특정 커밋 이전으로 HEAD 이동, 스테이징 영역은 초기화되지만 작업 디렉터리는 유지됨</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">--hard</code>
        <ul>
          <li>특정 커밋 이전으로 HEAD 이동, 변경된 코드까지 전부 삭제되며 되돌릴 수 없음</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="reset-후-force-push-사용">Reset 후 force push 사용</h3>

<ul>
  <li>로컬에서 <code class="language-plaintext highlighter-rouge">git reset</code>을 사용하여 커밋을 변경하면, 원격 저장소와 커밋 이력이 달라져 <code class="language-plaintext highlighter-rouge">git push</code>시 conflict가 발생할 수 있다.</li>
  <li>이 문제를 해결하기 위해 <code class="language-plaintext highlighter-rouge">git push --force</code>를 사용하면, 로컬 브랜치의 변경사항을 강제로 원격 저장소에 반영할 수 있음</li>
  <li>conflict 해결 방법으로써의 Reset + force push
    <ul>
      <li>commit이 여러개인 경우, 중간에 conflict가 난 경우, 이 후의 커밋 모두 conflict가 발생
        <ul>
          <li>하지만 <code class="language-plaintext highlighter-rouge">git reset</code>으로 커밋을 하나의 커밋으로 만들면 코드 충돌을 빠르게 해결할 수 있음</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="miscellaneous" /><summary type="html"><![CDATA[직렬화 (Serialization)와 역직렬화(Deserialization)에 대해 알아보자.]]></summary></entry><entry><title type="html">[JavaScript] DOM &amp;amp; BOM</title><link href="https://nan0silver.github.io/javascript/2025-02-05-dom-bom/" rel="alternate" type="text/html" title="[JavaScript] DOM &amp;amp; BOM" /><published>2025-02-05T00:00:00+00:00</published><updated>2025-03-06T14:08:22+00:00</updated><id>https://nan0silver.github.io/javascript/dom-bom</id><content type="html" xml:base="https://nan0silver.github.io/javascript/2025-02-05-dom-bom/"><![CDATA[<ul>
  <li><a href="#dom-document-object-model">DOM (Document Object Model)</a></li>
  <li><a href="#dom-기본-구조">DOM 기본 구조</a></li>
  <li><a href="#dom의-특징">DOM의 특징</a></li>
  <li><a href="#dom을-활용한-사례">DOM을 활용한 사례</a></li>
  <li><a href="#bom-browser-object-model">BOM (Browser Object Model)</a></li>
  <li><a href="#bom의-특징">BOM의 특징</a></li>
  <li><a href="#bom-주요-객체-사용-예제">BOM 주요 객체 사용 예제</a></li>
  <li><a href="#dom과-bom의-차이점">DOM과 BOM의 차이점</a></li>
</ul>

<hr />

<h2 id="dom-document-object-model">DOM (Document Object Model)</h2>

<ul>
  <li>웹페이지의 HTML을 트리 구조로 표현한 객체 모델
    <ul>
      <li><code class="language-plaintext highlighter-rouge">document</code>객체를 통해 접근 가능</li>
      <li>루트 노드는 항상 <code class="language-plaintext highlighter-rouge">document</code> 객체</li>
    </ul>
  </li>
  <li>JavaScript를 통해 브라우저에서 웹 페이지를 동적으로 문서를 조작할 수 있게 하는 API
    <ul>
      <li>요소를 추가, 수정, 삭제 가능</li>
    </ul>
  </li>
  <li>필요한 이유
    <ul>
      <li>웹 페이지 내용 동적으로 변경 가능</li>
      <li>사용자 입력에 따라 인터랙티브한 기능 추가</li>
      <li>HTML 요소를 추가, 수정, 삭제 가능</li>
      <li>CSS 스타일을 JavaScript로 변경 가능</li>
      <li>이벤트 핸들링(클릭, 키보드 입력 등) 가능</li>
    </ul>
  </li>
</ul>

<h3 id="dom-기본-구조">DOM 기본 구조</h3>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>My Page<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1</span> <span class="na">id=</span><span class="s">"title"</span><span class="nt">&gt;</span>Hello, DOM!<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"text"</span><span class="nt">&gt;</span>This is a paragraph.<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<ul>
  <li>이 HTML 문서는 DOM 트리 구조로 변환됨</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Document
 ├── &lt;html&gt;
 │   ├── &lt;head&gt;
 │   │   └── &lt;title&gt;My Page&lt;/title&gt;
 │   ├── &lt;body&gt;
 │   │   ├── &lt;h1 id="title"&gt;Hello, DOM!&lt;/h1&gt;
 │   │   └── &lt;p class="text"&gt;This is a paragraph.&lt;/p&gt;
</code></pre></div></div>

<ul>
  <li>
    <p>DOM 조작 예제 (JavaScript)</p>

    <ul>
      <li>
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 요소 선택</span>
<span class="kd">let</span> <span class="nx">title</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">title</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// &lt;h1&gt; 요소 선택</span>
<span class="kd">let</span> <span class="nx">text</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">.text</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// &lt;p&gt; 요소 선택</span>

<span class="c1">// 요소 내용 변경</span>
<span class="nx">title</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello, World!</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">text</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">&lt;b&gt;Updated paragraph!&lt;/b&gt;</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">// 요소 스타일 변경</span>
<span class="nx">title</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">blue</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">// 요소 추가</span>
<span class="kd">let</span> <span class="nx">newParagraph</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">p</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">newParagraph</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">This is a new paragraph!</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h3 id="dom의-특징">DOM의 특징</h3>

<ul>
  <li>주요 속성 및 메서드
    <ul>
      <li><code class="language-plaintext highlighter-rouge">document.body</code>
        <ul>
          <li>문서의 <code class="language-plaintext highlighter-rouge">&lt;body&gt;</code> 요소 반환</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">firstElementChile</code>, <code class="language-plaintext highlighter-rouge">lastElementChild</code>
        <ul>
          <li>첫 번째와 마지막 자식 요소를 반환</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">children</code>
        <ul>
          <li>모든 자식 요소의 컬렉션을 반환</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="dom을-활용한-사례">DOM을 활용한 사례</h3>

<ul>
  <li>동적 리스트 추가</li>
  <li>
    <p>html</p>

    <ul>
      <li>
        <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">"itemList"</span><span class="nt">&gt;&lt;/ul&gt;</span>
<span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">"addItem"</span><span class="nt">&gt;</span>Add Item<span class="nt">&lt;/button&gt;</span>
</code></pre></div>        </div>
      </li>
    </ul>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div>    </div>
  </li>
  <li>
    <p>javascript</p>

    <ul>
      <li>
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">addItem</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">list</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">itemList</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">button</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">newItem</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">li</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">newItem</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">New Item</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">list</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">newItem</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h2 id="bom-browser-object-model">BOM (Browser Object Model)</h2>

<ul>
  <li>브라우저 창과 관련된 객체를 제공하는 모델
    <blockquote>
      <p>웹페이지가 아닌 브라우저 자체를 제어할 수 있도록 해주는 API</p>
    </blockquote>
  </li>
</ul>

<h3 id="bom의-특징">BOM의 특징</h3>

<ul>
  <li>웹 브우저 창, URL, 히스토리, 콘솔 등을 조작 가능</li>
  <li><code class="language-plaintext highlighter-rouge">window</code> 객체를 통해 접근 가능</li>
  <li>대표적인 BOM 객체
    <ul>
      <li><code class="language-plaintext highlighter-rouge">window</code> -&gt; 브라우저 창 전체</li>
      <li><code class="language-plaintext highlighter-rouge">navigator</code> -&gt; 브라우저 정보</li>
      <li><code class="language-plaintext highlighter-rouge">location</code> -&gt; 현재 URL 정보</li>
      <li><code class="language-plaintext highlighter-rouge">history</code> -&gt; 방문 기록 관리</li>
      <li><code class="language-plaintext highlighter-rouge">screen</code> -&gt; 디바이스 화면 정보</li>
    </ul>
  </li>
</ul>

<h3 id="bom-주요-객체-사용-예제">BOM 주요 객체 사용 예제</h3>

<ol>
  <li><code class="language-plaintext highlighter-rouge">window</code></li>
</ol>

<ul>
  <li>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">);</span> <span class="c1">//현재 브라우저 창 너비</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">);</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">This is an alert!</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
</ul>

<ol>
  <li><code class="language-plaintext highlighter-rouge">navigator</code></li>
</ol>

<ul>
  <li>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">);</span> <span class="c1">//사용자 브라우저 정보</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">navigator</span><span class="p">.</span><span class="nx">language</span><span class="p">);</span> <span class="c1">//사용 언어</span>
</code></pre></div>    </div>
  </li>
</ul>

<ol>
  <li><code class="language-plaintext highlighter-rouge">histofy</code></li>
</ol>

<ul>
  <li>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">history</span><span class="p">.</span><span class="nx">back</span><span class="p">();</span> <span class="c1">//이전 페이지로 이동</span>
<span class="nx">history</span><span class="p">.</span><span class="nx">forward</span><span class="p">();</span> <span class="c1">//다음 페이지로 이동</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="dom과-bom의-차이점">DOM과 BOM의 차이점</h2>

<table>
  <thead>
    <tr>
      <th>비교 항목</th>
      <th>DOM</th>
      <th>BOM</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>역할</td>
      <td>HTML 문서를 객체로 표현하여 조작</td>
      <td>브라우저 창과 관련된 기능 제공</td>
    </tr>
    <tr>
      <td>중심 객체</td>
      <td><code class="language-plaintext highlighter-rouge">document</code> 객체</td>
      <td><code class="language-plaintext highlighter-rouge">window</code> 객체</td>
    </tr>
    <tr>
      <td>조작 대상</td>
      <td>HTML 요소, 스타일, 속성</td>
      <td>브라우저 창, URL, 히스토리, 화면 정보</td>
    </tr>
    <tr>
      <td>사용 예시</td>
      <td><code class="language-plaintext highlighter-rouge">&lt;div&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;p&gt;</code> 등의 조작</td>
      <td>새 창 열기, 페이지 이동, 알림 띄우기</td>
    </tr>
    <tr>
      <td>주요 메서드</td>
      <td><code class="language-plaintext highlighter-rouge">.getElementById()</code>, <code class="language-plaintext highlighter-rouge">.querySelector()</code>, <code class="language-plaintext highlighter-rouge">.innerText</code></td>
      <td><code class="language-plaintext highlighter-rouge">alert()</code>, <code class="language-plaintext highlighter-rouge">location.href</code>, <code class="language-plaintext highlighter-rouge">history.back()</code></td>
    </tr>
  </tbody>
</table>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="javascript" /><summary type="html"><![CDATA[JavaScript의 DOM과 BOM에 대해 알아보자.]]></summary></entry><entry><title type="html">[JavaScript] 로컬 스토리지 VS 세션 스토리지</title><link href="https://nan0silver.github.io/javascript/2025-02-04-storage/" rel="alternate" type="text/html" title="[JavaScript] 로컬 스토리지 VS 세션 스토리지" /><published>2025-02-04T00:00:00+00:00</published><updated>2025-03-06T14:08:22+00:00</updated><id>https://nan0silver.github.io/javascript/storage</id><content type="html" xml:base="https://nan0silver.github.io/javascript/2025-02-04-storage/"><![CDATA[<ul>
  <li><a href="#로컬-스토리지-local-storage-vs-세션-스토리지-session-storage">로컬 스토리지 VS 세션 스토리지</a></li>
  <li><a href="#데이터-유지-기간">데이터 유지 기간</a></li>
  <li><a href="#접근-범위">접근 범위</a></li>
  <li><a href="#활용-예제">활용 예제</a></li>
  <li><a href="#사용-방법-javascript">사용 방법 (JavaScript)</a></li>
</ul>

<hr />

<h2 id="로컬-스토리지-local-storage-vs-세션-스토리지-session-storage">로컬 스토리지 (Local Storage) VS 세션 스토리지 (Session Storage)</h2>

<ul>
  <li>둘 다 웹 브라우저의 저장소</li>
  <li>데이터를 클라이언트 측에 저장할 수 있는 기능을 제공
<br /></li>
  <li>아래는 차이점을 확인할 수 있다.</li>
</ul>

<h3 id="데이터-유지-기간">데이터 유지 기간</h3>

<ul>
  <li>Local Storage
    <ul>
      <li>브라우저를 닫아도 데이터가 유지됨</li>
      <li>명시적으로 삭제하지 않는 한 영구적으로 저장됨</li>
    </ul>
  </li>
  <li>Session Storage
    <ul>
      <li>브라우저의 탭을 닫으면 데이터가 삭제됨</li>
      <li>세션동안만 유지됨
        <blockquote>
          <p>세션 : 일정 기간 동안 유지되는 사용자와 시스템 간의 연결 상태 (주로 사용자의 로그인 상태 유지, 임시 데이터 저장에 사용됨)</p>
        </blockquote>
      </li>
    </ul>
  </li>
</ul>

<h3 id="접근-범위">접근 범위</h3>

<ul>
  <li>Local Storage
    <ul>
      <li>같은 출처 (Origin, 즉 도메인+프로토콜+포트)가 같다면 모든 탬과 창에서 접근 가능</li>
    </ul>
  </li>
  <li>Session Storage
    <ul>
      <li>같은 출처라도 각 탭과 창마다 개별적인 저장소 가짐</li>
      <li>다른 탭에서 접근 불가</li>
    </ul>
  </li>
</ul>

<h3 id="활용-예제">활용 예제</h3>

<ul>
  <li>Local Storage
    <ul>
      <li>로그인 정보, 사용자 설정, 테마 설정 등 장기적으로 유지해야하는 데이터 저장</li>
    </ul>
  </li>
  <li>Session Storage
    <ul>
      <li>특정 페이지에서만 필요한 임시 데이터 등 일시적인 데이터 저장</li>
    </ul>
  </li>
</ul>

<h3 id="사용-방법-javascript">사용 방법 (JavaScript)</h3>

<ul>
  <li>
    <p>Local Storage</p>

    <ul>
      <li>
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 데이터 저장</span>
<span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="dl">"</span><span class="s2">username</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">JohnDoe</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// 데이터 가져오기</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">"</span><span class="s2">username</span><span class="dl">"</span><span class="p">));</span> <span class="c1">// "JohnDoe"</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>Session Storage</p>
    <ul>
      <li>
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 데이터 저장</span>
<span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="dl">"</span><span class="s2">sessionUser</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">JaneDoe</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// 데이터 가져오기</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">"</span><span class="s2">sessionUser</span><span class="dl">"</span><span class="p">));</span> <span class="c1">// "JaneDoe"</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="javascript" /><summary type="html"><![CDATA[JavaScript의 로컬 스토리지와 세션 스토리지에 대해 알아보자.]]></summary></entry><entry><title type="html">[Etc] 직렬화 (Serialization)와 역직렬화(Deserialization)</title><link href="https://nan0silver.github.io/miscellaneous/2025-02-04-serialization/" rel="alternate" type="text/html" title="[Etc] 직렬화 (Serialization)와 역직렬화(Deserialization)" /><published>2025-02-04T00:00:00+00:00</published><updated>2025-03-06T14:08:22+00:00</updated><id>https://nan0silver.github.io/miscellaneous/serialization</id><content type="html" xml:base="https://nan0silver.github.io/miscellaneous/2025-02-04-serialization/"><![CDATA[<ul>
  <li><a href="#직렬화serialization과-역직렬화deserialization--️-">직렬화와 역직렬화</a></li>
  <li><a href="#직렬화-serialization-이란-">직렬화란? 📦</a></li>
  <li><a href="#역직렬화-deserialization-이란--️-">역직렬화란? 📦 ➡️ 💻</a></li>
  <li><a href="#언어별-직렬화-및-역직렬화-예시">언어별 직렬화 및 역직렬화 예시</a></li>
</ul>

<hr />

<h2 id="직렬화serialization과-역직렬화deserialization--️-">직렬화(Serialization)과 역직렬화(Deserialization) 💾 ➡️ 💻</h2>

<ul>
  <li><strong>직렬화</strong>
    <ul>
      <li>프로그램에서 사용하는 데이터를 파일이나 네트워크를 통해 전송하거나 저장하기 쉬운 형태로 변환하는 과정</li>
    </ul>
  </li>
  <li><strong>역직렬화</strong>
    <ul>
      <li>그 반대로, 저장되거나 전송된 데이터를 다시 프로그램에서 사용할 수 있는 원래의 데이터 형태로 복원하는 과정</li>
    </ul>
  </li>
</ul>

<h2 id="직렬화-serialization-이란-">직렬화 (Serialization) 이란? 📦</h2>

<p><strong>직렬화</strong>는 메모리 상에 있는 객체나 데이터 구조를 바이트 스트림 형태로 변환하는 것을 의미한다.</p>

<blockquote>
  <p>마치 택배 상자에 물건을 포장하는 것처럼, 데이터를 “직렬” 형태로 나열하여 보관하거나 전송하기 좋게 만드는 것.</p>
</blockquote>

<ul>
  <li>
    <p><strong>주요 목적</strong>:</p>

    <ul>
      <li><strong>데이터 저장</strong>: 객체의 상태를 파일이나 데이터베이스에 저장하여 영구적으로 보관 💾</li>
      <li><strong>데이터 전송</strong>: 네트워크를 통해 객체를 다른 시스템으로 전송 🌐</li>
      <li><strong>원격 호출 (RPC, RMI)</strong>: 객체를 네트워크를 통해 다른 시스템의 메소드 인자로 전달 📞</li>
    </ul>
  </li>
  <li>
    <p><strong>예시</strong>:</p>
    <ul>
      <li>객체를 JSON이나 XML 형태로 변환하여 텍스트 파일에 저장</li>
      <li>객체를 바이너리 형태로 변환하여 네트워크 소켓을 통해 전송</li>
    </ul>
  </li>
</ul>

<h2 id="역직렬화-deserialization-이란--️-">역직렬화 (Deserialization) 이란? 📦 ➡️ 💻</h2>

<p><strong>역직렬화</strong>는 직렬화된 바이트 스트림을 다시 원래의 객체나 데이터 구조로 복원하는 과정</p>

<blockquote>
  <p>택배 상자를 열어 내용물을 꺼내는 것과 비슷하게, 직렬화된 데이터를 “역으로 직렬”화하여 프로그램이 이해할 수 있는 형태로 되돌리는 것.</p>
</blockquote>

<ul>
  <li>
    <p><strong>주요 목적</strong>:</p>

    <ul>
      <li><strong>저장된 데이터 로드</strong>: 파일이나 데이터베이스에서 직렬화된 객체를 읽어와 메모리에 복원 💾 ➡️ 💻</li>
      <li><strong>전송된 데이터 수신</strong>: 네트워크를 통해 수신된 직렬화된 데이터를 객체로 변환 🌐 ➡️ 💻</li>
      <li><strong>원격 호출 결과 처리</strong>: 원격 시스템으로부터 직렬화된 객체 형태로 결과를 받아 원래 객체로 복원 📞 ➡️ 💻</li>
    </ul>
  </li>
  <li>
    <p><strong>예시</strong>:</p>
    <ul>
      <li>JSON이나 XML 텍스트 파일을 읽어 객체로 복원</li>
      <li>바이너리 데이터를 네트워크 소켓으로부터 읽어 객체로 복원</li>
    </ul>
  </li>
</ul>

<h2 id="언어별-직렬화-및-역직렬화-예시">언어별 직렬화 및 역직렬화 예시</h2>

<h3 id="javascripnt-nodejs">JavaScripnt (Node.js)</h3>

<p>JavaScript에서는 기본적으로 JSON 객체를 사용하여 직렬화 및 역직렬화를 많이 수행</p>

<ul>
  <li>바이너리 직렬화는 Buffer 객체 등을 활용해야 합니다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 직렬화 (Serialization)</span>
<span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">David</span><span class="dl">"</span><span class="p">,</span> <span class="na">city</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Seoul</span><span class="dl">"</span> <span class="p">};</span>
<span class="kd">const</span> <span class="nx">jsonString</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> <span class="c1">// 📦 -&gt; JSON String</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">jsonString</span><span class="p">);</span> <span class="c1">// {"name":"David","city":"Seoul"}</span>

<span class="c1">// 역직렬화 (Deserialization)</span>
<span class="kd">const</span> <span class="nx">loadedData</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">jsonString</span><span class="p">);</span> <span class="c1">// JSON String -&gt; 📦 -&gt; 💻</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">loadedData</span><span class="p">);</span> <span class="c1">// { name: 'David', city: 'Seoul' }</span>
</code></pre></div></div>

<h3 id="python">Python</h3>

<p>Python에서는 <code class="language-plaintext highlighter-rouge">pickle</code> 모듈을 사용하여 직렬화 및 역직렬화를 기본적으로 지원한다.</p>

<ul>
  <li>JSON, <code class="language-plaintext highlighter-rouge">marshal</code> 등 다양한 모듈도 활용 가능</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kn">import</span> <span class="nn">pickle</span>

    <span class="c1"># 직렬화 (Serialization)
</span>    <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s">'name'</span><span class="p">:</span> <span class="s">'Alice'</span><span class="p">,</span> <span class="s">'age'</span><span class="p">:</span> <span class="mi">30</span><span class="p">}</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'data.pickle'</span><span class="p">,</span> <span class="s">'wb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">pickle</span><span class="p">.</span><span class="n">dump</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span> <span class="c1"># 📦 -&gt; 💾
</span>
    <span class="c1"># 역직렬화 (Deserialization)
</span>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'data.pickle'</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">loaded_data</span> <span class="o">=</span> <span class="n">pickle</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="c1"># 💾 -&gt; 📦 -&gt; 💻
</span>    <span class="k">print</span><span class="p">(</span><span class="n">loaded_data</span><span class="p">)</span> <span class="c1"># {'name': 'Alice', 'age': 30}
</span></code></pre></div></div>

<h3 id="java">Java</h3>

<p>Java는 <code class="language-plaintext highlighter-rouge">java.io.Serializable</code> 인터페이스를 구현한 클래스에 대해 직렬화를 기본적으로 지원합니다.</p>

<ul>
  <li>JSON 라이브러리 (Jackson, Gson 등)를 사용하여 JSON 직렬화/역직렬화도 많이 사용됨.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Person</span> <span class="kd">implements</span> <span class="nc">Serializable</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Person{name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">"', age="</span> <span class="o">+</span> <span class="n">age</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SerializationExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 직렬화 (Serialization)</span>
        <span class="nc">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Bob"</span><span class="o">,</span> <span class="mi">25</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">FileOutputStream</span> <span class="n">fileOut</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="s">"person.ser"</span><span class="o">);</span>
             <span class="nc">ObjectOutputStream</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectOutputStream</span><span class="o">(</span><span class="n">fileOut</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">out</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="n">person</span><span class="o">);</span> <span class="c1">// 📦 -&gt; 💾</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Serialized data is saved in person.ser"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">i</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="c1">// 역직렬화 (Deserialization)</span>
        <span class="nc">Person</span> <span class="n">loadedPerson</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">FileInputStream</span> <span class="n">fileIn</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="s">"person.ser"</span><span class="o">);</span>
             <span class="nc">ObjectInputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectInputStream</span><span class="o">(</span><span class="n">fileIn</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">loadedPerson</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Person</span><span class="o">)</span> <span class="n">in</span><span class="o">.</span><span class="na">readObject</span><span class="o">();</span> <span class="c1">// 💾 -&gt; 📦 -&gt; 💻</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">i</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ClassNotFoundException</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Person class not found"</span><span class="o">);</span>
            <span class="n">c</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Deserialized Person: "</span> <span class="o">+</span> <span class="n">loadedPerson</span><span class="o">);</span> <span class="c1">// Deserialized Person: Person{name='Bob', age=25}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="kotlin">Kotlin</h3>

<p>Kotlin은 Java와 유사하게 <code class="language-plaintext highlighter-rouge">java.io.Serializable</code> 인터페이스를 사용하거나, Jackson, Gson 같은 JSON 라이브러리를 활용</p>

<ul>
  <li>Kotlin Serialization library를 사용하여 더 간편하게 직렬화/역직렬화를 할 수도 있음</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">import</span> <span class="nn">kotlinx.serialization.*</span>
    <span class="k">import</span> <span class="nn">kotlinx.serialization.json.*</span>
    <span class="k">import</span> <span class="nn">java.io.*</span>

    <span class="nd">@Serializable</span>
    <span class="kd">data class</span> <span class="nc">User</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span> <span class="kd">val</span> <span class="py">age</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span>

    <span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// 직렬화 (Serialization)</span>
        <span class="kd">val</span> <span class="py">user</span> <span class="p">=</span> <span class="nc">User</span><span class="p">(</span><span class="s">"Eve"</span><span class="p">,</span> <span class="mi">28</span><span class="p">)</span>
        <span class="kd">val</span> <span class="py">json</span> <span class="p">=</span> <span class="nc">Json</span><span class="p">.</span><span class="nf">encodeToString</span><span class="p">(</span><span class="nc">User</span><span class="p">.</span><span class="nf">serializer</span><span class="p">(),</span> <span class="n">user</span><span class="p">)</span> <span class="err">#</span> <span class="err">📦</span> <span class="p">-&gt;</span> <span class="nc">JSON</span> <span class="nc">String</span>
        <span class="nf">println</span><span class="p">(</span><span class="n">json</span><span class="p">)</span> <span class="err">#</span> <span class="p">{</span><span class="s">"name"</span><span class="p">:</span><span class="s">"Eve"</span><span class="p">,</span><span class="s">"age"</span><span class="p">:</span><span class="mi">28</span><span class="p">}</span>

        <span class="c1">// 역직렬화 (Deserialization)</span>
        <span class="kd">val</span> <span class="py">loadedUser</span> <span class="p">=</span> <span class="nc">Json</span><span class="p">.</span><span class="nf">decodeFromString</span><span class="p">(</span><span class="nc">User</span><span class="p">.</span><span class="nf">serializer</span><span class="p">(),</span> <span class="n">json</span><span class="p">)</span> <span class="err">#</span> <span class="nc">JSON</span> <span class="nc">String</span> <span class="p">-&gt;</span> <span class="err">📦</span> <span class="p">-&gt;</span> <span class="err">💻</span>
        <span class="nf">println</span><span class="p">(</span><span class="n">loadedUser</span><span class="p">)</span> <span class="err">#</span> <span class="nc">User</span><span class="p">(</span><span class="n">name</span><span class="p">=</span><span class="nc">Eve</span><span class="p">,</span> <span class="n">age</span><span class="p">=</span><span class="mi">28</span><span class="p">)</span>


        <span class="c1">// Java Serializable 사용 (Java와 동일)</span>
        <span class="c1">// ... (Java 예시 코드와 유사)</span>
    <span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="miscellaneous" /><summary type="html"><![CDATA[직렬화 (Serialization)와 역직렬화(Deserialization)에 대해 알아보자.]]></summary></entry><entry><title type="html">[JavaScript] 함수</title><link href="https://nan0silver.github.io/javascript/2025-01-30-js-function/" rel="alternate" type="text/html" title="[JavaScript] 함수" /><published>2025-01-30T00:00:00+00:00</published><updated>2025-03-06T14:08:22+00:00</updated><id>https://nan0silver.github.io/javascript/js-function</id><content type="html" xml:base="https://nan0silver.github.io/javascript/2025-01-30-js-function/"><![CDATA[<ul>
  <li><a href="#함수-function">함수 (function)</a></li>
  <li><a href="#화살표-함수">화살표 함수</a></li>
  <li><a href="#고차-함수">고차 함수 (map, filter, reduce)</a></li>
  <li><a href="#구조-분해-할당">구조 분해 할당</a></li>
</ul>

<hr />

<h2 id="함수-function">함수 (function)</h2>

<ul>
  <li>
    <p>함수 선언</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">function</code>으로 선언</li>
      <li>
        <p>호이스팅 (hoisting)</p>

        <ul>
          <li>JavaScript에서 변수, 함수 선언, 클래스 등의 선언이 코드 실행 전에 메모리에 미리 할당되는 현상
            <ul>
              <li>코드에서 선언이 끌어올려진(hoisted) 것처럼 동작</li>
            </ul>
          </li>
          <li>
            <table>
              <thead>
                <tr>
                  <th>변수 타입</th>
                  <th>선언 Hoisting</th>
                  <th>초기화 여부</th>
                  <th>선언 전 접근</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td><code class="language-plaintext highlighter-rouge">var</code></td>
                  <td>✅ O</td>
                  <td>✅ (undefined)</td>
                  <td>✅ 가능 (undefined 반환)</td>
                </tr>
                <tr>
                  <td><code class="language-plaintext highlighter-rouge">let</code></td>
                  <td>✅ O</td>
                  <td>❌ (TDZ 존재)</td>
                  <td>❌ ReferenceError</td>
                </tr>
                <tr>
                  <td><code class="language-plaintext highlighter-rouge">const</code></td>
                  <td>✅ O</td>
                  <td>❌ (TDZ 존재)</td>
                  <td>❌ ReferenceError</td>
                </tr>
              </tbody>
            </table>
          </li>
          <li>함수 선언 이전에 호출이 가능</li>
        </ul>
      </li>
      <li>
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">welcomeMessage</span><span class="p">(</span><span class="nx">username</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="dl">"</span><span class="s2">Hi, ${username}!</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">welcomeMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Lily</span><span class="dl">"</span><span class="p">));</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>함수 표현식</p>
    <ul>
      <li>이름이 없는 함수를 만들어 변수에 할당하여 정의</li>
      <li>호이스팅되지 않으므로, 함수 정의 이후에만 호출 가능</li>
    </ul>
  </li>
</ul>

<h2 id="화살표-함수">화살표 함수</h2>

<ul>
  <li>ES6에서 도입된 간결한 함수 표현 방식</li>
  <li>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//ex1</span>
<span class="kd">const</span> <span class="nx">welcomeMessage</span> <span class="o">=</span> <span class="p">(</span><span class="nx">username</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="dl">"</span><span class="s2">Hi, ${username}!</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">welcomeMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Lily</span><span class="dl">"</span><span class="p">));</span>

<span class="c1">//ex2</span>
<span class="kd">const</span> <span class="nx">calculateArea</span> <span class="o">=</span> <span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">area</span> <span class="o">=</span> <span class="nx">width</span> <span class="o">*</span> <span class="nx">height</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">area</span><span class="p">;</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">calculateArea</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">));</span> <span class="c1">// 출력: 50</span>
</code></pre></div>    </div>
  </li>
  <li>함수 표현식보다 간결하게 작성 가능함</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">this</code> 바인딩이 화살표 함수의 정의 위치에서 고정되는 특성을 가짐</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">this</code> 바인딩 (Binding)</p>

        <ul>
          <li><code class="language-plaintext highlighter-rouge">this</code> 키워드가 특정 실행 문맥(Excution Context)에서 어떤 객체를 가리키는지 결정되는 과정</li>
          <li>JavaScript에서 <code class="language-plaintext highlighter-rouge">this</code>는 어떻게, 어디서 호출되었느냐에 따라 값이 달라짐</li>
          <li>전통적인 함수와 화살표 함수의 <code class="language-plaintext highlighter-rouge">this</code> 바인딩 방식이 다름
            <ul>
              <li>전통적인 함수
                <ul>
                  <li>호출 맥락에 따라 this가 변경될 수 있음</li>
                </ul>
              </li>
              <li>화살표 함수
                <ul>
                  <li>this가 고정되어 예상치 못한 this의 문제를 방지함</li>
                </ul>
              </li>
            </ul>
          </li>
          <li>
            <h3 id="기본적인-this-바인딩-규칙">기본적인 this 바인딩 규칙</h3>

            <ul>
              <li>
                <table>
                  <thead>
                    <tr>
                      <th>호출 방식</th>
                      <th><code class="language-plaintext highlighter-rouge">this</code>가 가리키는 대상</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>일반 함수 호출</td>
                      <td><code class="language-plaintext highlighter-rouge">window</code> (브라우저) 또는 <code class="language-plaintext highlighter-rouge">undefined</code> (strict mode)</td>
                    </tr>
                    <tr>
                      <td>메서드 호출 (객체 안에서)</td>
                      <td>해당 객체</td>
                    </tr>
                    <tr>
                      <td>생성자 함수</td>
                      <td>새로 생성된 인스턴스</td>
                    </tr>
                    <tr>
                      <td><code class="language-plaintext highlighter-rouge">call</code>, <code class="language-plaintext highlighter-rouge">apply</code>, <code class="language-plaintext highlighter-rouge">bind</code> 사용</td>
                      <td>명시적으로 지정된 객체</td>
                    </tr>
                    <tr>
                      <td>화살표 함수</td>
                      <td>부모(외부) 스코프의 <code class="language-plaintext highlighter-rouge">this</code></td>
                    </tr>
                  </tbody>
                </table>
              </li>
              <li>예시</li>
            </ul>

            <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//일반 함수 호출</span>
    <span class="kd">function</span> <span class="nx">showThis</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">showThis</span><span class="p">();</span> <span class="c1">//브라우저: window, strict mode: undefined</span>

    <span class="c1">//화살표 함수</span>
    <span class="kd">const</span> <span class="nx">user2</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Lily</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">greet</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">arrow</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
            <span class="p">};</span>
            <span class="nx">arrow</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">};</span>
    <span class="nx">user2</span><span class="p">.</span><span class="nx">greet</span><span class="p">();</span> <span class="c1">//"Lily"</span>
    <span class="s2">```
</span></code></pre></div>            </div>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="고차-함수">고차 함수</h2>

<h3 id="map">map</h3>

<ul>
  <li>배열의 각 요소를 변환하여 새로운 배열 생성</li>
  <li>원본 배열은 유지</li>
  <li>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">num</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">mul</span> <span class="o">=</span> <span class="nx">num</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">n</span> <span class="o">*</span> <span class="mi">10</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">mul</span><span class="p">);</span> <span class="c1">//[ 10, 20, 30 ]</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="filter">filter</h3>

<ul>
  <li>배열에서 조건에 맞는 요소만 반환하여 새로운 배열을 생성</li>
  <li>원본 배열은 유지</li>
  <li>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">words</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">apple</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">banana</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">avocado</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">cherry</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">apricot</span><span class="dl">"</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">aWords</span> <span class="o">=</span> <span class="nx">words</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">word</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">word</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">));</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">aWords</span><span class="p">);</span> <span class="c1">// ["apple", "avocado", "apricot"]</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="reduce">reduce</h3>

<ul>
  <li>배열의 모든 요소를 순회하며 누적하여 단일 값(accumulator) 생성</li>
  <li>초기값 설정 가능</li>
  <li>집계 연산에 유용</li>
  <li>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">product</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">num</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">acc</span> <span class="o">*</span> <span class="nx">num</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">product</span><span class="p">);</span> <span class="c1">// 120</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="구조-분해-할당">구조 분해 할당</h2>

<ul>
  <li>배열 구조 분해 할당
    <ul>
      <li>배열을 개별 변수로 분해 가능</li>
      <li>스프레드 연산자(<code class="language-plaintext highlighter-rouge">...</code>)로 나머지 요소 처리 가능</li>
      <li>
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="p">...</span><span class="nx">remaining</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">];</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">remaining</span><span class="p">);</span> <span class="c1">// 10 20 [30, 40, 50]</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>객체 구조 분해 할당</p>

    <ul>
      <li>객체에서 속성을 변후로 추출 가능</li>
      <li>기본값 설정 가능</li>
      <li>
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">brand</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">year</span> <span class="o">=</span> <span class="mi">2023</span> <span class="p">}</span> <span class="o">=</span> <span class="p">{</span> <span class="na">brand</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Tesla</span><span class="dl">"</span><span class="p">,</span> <span class="na">model</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Model S</span><span class="dl">"</span> <span class="p">};</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">brand</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">year</span><span class="p">);</span> <span class="c1">// Tesla Model S 2023</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>중첩된 객체의 속성도 분해하여 사용 가능</p>

        <ul>
          <li>
            <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">info</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">firstName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Alice</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Johnson</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">28</span><span class="p">,</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="p">{</span>
  <span class="na">info</span><span class="p">:</span> <span class="p">{</span> <span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span> <span class="p">},</span>
  <span class="nx">age</span><span class="p">,</span>
<span class="p">}</span> <span class="o">=</span> <span class="nx">person</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">,</span> <span class="nx">age</span><span class="p">);</span> <span class="c1">// Alice Johnson 28</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>함수에서 구조 분해 활용</p>

    <ul>
      <li>
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">displayCar</span><span class="p">({</span> <span class="nx">brand</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">year</span> <span class="p">})</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`The car is a </span><span class="p">${</span><span class="nx">year</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nx">brand</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nx">model</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">displayCar</span><span class="p">({</span> <span class="na">brand</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Toyota</span><span class="dl">"</span><span class="p">,</span> <span class="na">model</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Corolla</span><span class="dl">"</span><span class="p">,</span> <span class="na">year</span><span class="p">:</span> <span class="mi">2022</span> <span class="p">});</span>
<span class="c1">// The car is a 2022 Toyota Corolla</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="javascript" /><summary type="html"><![CDATA[JavaScript의 함수에 대해 알아보자.]]></summary></entry></feed>