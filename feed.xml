<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko-KR, en-US"><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://nan0silver.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://nan0silver.github.io/" rel="alternate" type="text/html" hreflang="ko-KR, en-US" /><updated>2025-01-16T02:42:51+00:00</updated><id>https://nan0silver.github.io/feed.xml</id><title type="html">NAHYUN BLOG</title><subtitle>Nahyun’s Development Blog
Hi, I’m Nahyun Eun, a student from South Korea studying backend development with Java.  In this blog, I organize and share my learning journey in programming, with notes and insights on backend concepts and practical examples.
 Follow along as I dive into the world of coding!
</subtitle><author><name>Nahyun Eun</name><email>dmsskgus@sookmyung.ac.kr</email></author><entry><title type="html">[AI] Linear Time Sorting Algorithm</title><link href="https://nan0silver.github.io/ai/2025-01-16-basic/" rel="alternate" type="text/html" title="[AI] Linear Time Sorting Algorithm" /><published>2025-01-16T00:00:00+00:00</published><updated>2025-01-16T02:42:07+00:00</updated><id>https://nan0silver.github.io/ai/basic</id><content type="html" xml:base="https://nan0silver.github.io/ai/2025-01-16-basic/"><![CDATA[<h2 id="gpt-genertive-pre-trained-transformer">GPT (Genertive Pre-trained Transformer)</h2>

<ul>
  <li>Pre-training</li>
  <li>Fine-tuning</li>
  <li>
    <p>생성 능력</p>
  </li>
  <li>ChatGPT
    <ul>
      <li>맥락을 파악하는 능력이 뛰어남</li>
      <li>문제점
        <ul>
          <li>환각(Hallucinate)
            <ul>
              <li>실제 데이터나 사실을 반영하지 않고 비현실적이거나 오류를 포함하 내용을 만들어내는 경우가 있다</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name>Nahyun Eun</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="ai" /><summary type="html"><![CDATA[선형 시간이 걸리는 정렬 알고리즘에 대해 알아본다.]]></summary></entry><entry><title type="html">[Algorithm] Linear Time Sorting Algorithm</title><link href="https://nan0silver.github.io/algorithm/2024-12-13-linear-time-sorting/" rel="alternate" type="text/html" title="[Algorithm] Linear Time Sorting Algorithm" /><published>2024-12-13T00:00:00+00:00</published><updated>2025-01-16T02:42:07+00:00</updated><id>https://nan0silver.github.io/algorithm/linear-time-sorting</id><content type="html" xml:base="https://nan0silver.github.io/algorithm/2024-12-13-linear-time-sorting/"><![CDATA[<p>목차</p>
<ol>
  <li><a href="#counting-sort">Counting Sort</a></li>
  <li><a href="#radix-sort">Radix Sort</a></li>
  <li><a href="#order-statistics">Order Statistics</a></li>
  <li><a href="#randomized-selection">Randomized Selection</a></li>
  <li><a href="#worst-case-linear-time-selection">Worst-Case Linear-Time Selection</a></li>
  <li><a href="#그외">그외</a></li>
</ol>

<hr />

<h2 id="counting-sort">Counting Sort</h2>

<ul>
  <li>No comparison sort</li>
  <li>조건
    <ul>
      <li>데이터의 크기 범위가 제한된 경우</li>
      <li>데이터의 갯수가 상수개인 경우</li>
    </ul>
  </li>
  <li>
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">CountingSort</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="n">to</span> <span class="n">k</span>
          <span class="n">C</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="k">for</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span> <span class="n">to</span> <span class="n">n</span>
          <span class="n">C</span><span class="p">[</span><span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
      <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span> <span class="n">to</span> <span class="n">k</span>
          <span class="n">C</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">C</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">C</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
      <span class="k">for</span> <span class="n">j</span> <span class="o">=</span> <span class="n">n</span> <span class="n">downto</span> <span class="mi">1</span>
      <span class="c1">//stable하게 만들기 위해 1 to n이 아닌 n to 1 수행</span>
          <span class="n">B</span><span class="p">[</span><span class="n">C</span><span class="p">[</span><span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">]]]</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
          <span class="n">C</span><span class="p">[</span><span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">]]</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>k가 n개 이하일 때 정렬이 가능하다.
    <ul>
      <li>k가 너무 큰 경우 각 자리수마다 counting sort를 수행하는 방법을 사용할 수 있다. - radix sort</li>
    </ul>
  </li>
  <li>시간 복잡도 : \(O(n)\)</li>
  <li>장점
    <ul>
      <li>stable하다</li>
    </ul>
  </li>
  <li>단점
    <ul>
      <li>in-place 알고리즘은 아니다. (extra place 필요)</li>
    </ul>
  </li>
</ul>

<h2 id="radix-sort">Radix Sort</h2>

<ul>
  <li>counting sort의 일반 버전</li>
  <li>
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">RadixSort</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">d</span><span class="p">){</span>
      <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span> <span class="n">to</span> <span class="n">d</span>
          <span class="n">StableSort</span><span class="p">(</span><span class="n">A</span><span class="p">)</span> <span class="n">on</span> <span class="n">digit</span> <span class="n">i</span> 
          <span class="c1">//StableSort = counting sort</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>시간 복잡도 : \(d*O(n)\)</li>
  <li>Radix Sort의 핵심은 stable한 것이다.</li>
  <li>counting sort때문에 in-place하진 않다.</li>
  <li>자릿수의 최대 값은 \(logn\)이다. 따라서 radix sort가 merge sort보다 빠를 수 있다.</li>
  <li>한계
    <ul>
      <li>길이가 다른 문자열같은 digit이 정확하지 않으면 사용할 수 없다.</li>
    </ul>
  </li>
</ul>

<h2 id="order-statistics">Order Statistics</h2>

<ul>
  <li>n개의 요소들 중 i번째로 작은 요소를 고르는 것</li>
  <li>minimun은 첫 번째 order statistic</li>
</ul>

<h3 id="randomized-selection">Randomized Selection</h3>

<ul>
  <li>quicksort의 partition()을 사용한다.</li>
  <li>하지만 우리는 오직 하나의 subarray만 평가하면 된다.</li>
  <li><code class="language-plaintext highlighter-rouge">c
  RandomizedSelect(A, l, r, k)
      if (l == r) then return A[l];
      p = RandomizedPartition(A, l, r)
      if (p == k) then return A[p];
      if (p &lt; k) then
          return RandomizedSelect(A, l, p-1, k);
      else
          return RandomizedSelect(A, p+1, r, k);
     </code></li>
  <li>시간 복잡도
    <ul>
      <li>worst case : \(O(n^2)\)</li>
      <li>best, average case : \(O(n)\)</li>
    </ul>
  </li>
</ul>

<h3 id="worst-case-linear-time-selection">Worst-Case Linear-Time Selection</h3>

<ul>
  <li>generte a good partitioning element</li>
  <li>Randomized selection에서 pivot value를 고르는데 추가로 $\Theta(n)$시간을 써 업그레이드한 방법</li>
  <li>알고리즘
    <ul>
      <li>n개의 element들을 5개씩 묶어 그룹을 만든다.</li>
      <li>각 그룹의 중간값을 찾는다. -&gt; \(O(const)\)</li>
      <li>Select()를 재귀적으로 사용해 n/5개의 중간값 x를 찾는다.
        <ul>
          <li>
\[n/5 + n/25 + n/125 + ... &lt; n\]
          </li>
        </ul>
      </li>
      <li>x를 중심으로 partition을 진행한다.</li>
    </ul>
  </li>
  <li>시간 복잡도 : \(O(n)\)</li>
  <li>Quick sort에서도 해당 알고리즘을 이용해 worst case의 시간복잡도를 \(O(nlogn)\)으로 만들 수 있다.
    <ul>
      <li>하지만 이 경우 pivot value를 찾는 과정에서 캐쉬가 한번 뒤집혀져 quick sort의 장점 중 하나인 cache friendly 장점이 사라진다.</li>
      <li>차라리 merge sort나 heap sort를 사용한다.</li>
    </ul>
  </li>
</ul>

<h3 id="그외">그외</h3>

<ul>
  <li>Insertion sort
    <ul>
      <li>
\[O(n^2)\]
      </li>
    </ul>
  </li>
  <li>Merge sort, Heap sort, Quick sort
    <ul>
      <li>comparison sort</li>
      <li>all comparison sorts are \(\Omega(nlogn)\)</li>
    </ul>
  </li>
</ul>]]></content><author><name>Nahyun Eun</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="algorithm" /><summary type="html"><![CDATA[선형 시간이 걸리는 정렬 알고리즘에 대해 알아본다.]]></summary></entry><entry><title type="html">[Algorithm] 분할정복 알고리즘 (Divide and conquer)</title><link href="https://nan0silver.github.io/algorithm/2024-12-12-divide-conquer/" rel="alternate" type="text/html" title="[Algorithm] 분할정복 알고리즘 (Divide and conquer)" /><published>2024-12-12T00:00:00+00:00</published><updated>2025-01-16T02:42:07+00:00</updated><id>https://nan0silver.github.io/algorithm/divide-conquer</id><content type="html" xml:base="https://nan0silver.github.io/algorithm/2024-12-12-divide-conquer/"><![CDATA[<p>목차</p>
<ol>
  <li>
    <p><a href="#분할정복-알고리즘-divide-and-conquer-algorithm">분할정복 알고리즘</a></p>

    <p>1) <a href="#설계-방법">설계 방법</a></p>

    <p>2) <a href="#특징-및-장단점">특징 및 장단점</a></p>
  </li>
</ol>

<hr />

<h2 id="분할정복-알고리즘-divide-and-conquer-algorithm">분할정복 알고리즘 (Divide and conquer algorithm)</h2>

<ul>
  <li>
    <p>그대로 해결할 수 없는 문제를 작은 문제로 분할하여 문제를 해결하는 방법.</p>
  </li>
  <li>
    <p>대표적인 예로는 정렬 알고리즘 중에서 퀵 정렬이나 합병 정렬과 이진 탐색, 선택 문제, 고속 푸리에 변환(FFT) 문제들이 있음.</p>
  </li>
</ul>

<h3 id="설계-방법"><strong>설계 방법</strong></h3>

<p><strong>1) Divide</strong></p>

<p>∙  원래 문제가 분할하여 비슷한 유형의 더 작은 하위 문제로 분할이 가능할 때 까지 나눈다.</p>

<p><strong>2) Conquer</strong></p>

<p>∙  각 하위 문제를 재귀적으로 해결한다. 하위 문제의 규모가 나눌 수 없는 단위가 되면 탈출 조건을 설정하고 해결한다.</p>

<p><strong>3) Combine</strong></p>

<p>∙  Conquer한 문제들을 통합하여 원래 문제의 답을 얻어 해결한다.</p>

<p>🖋 Divide를 제대로 나누면 Conquer과정은 자동으로 쉬워진다. 그래서 Divide를 잘 설계하는 것이 중요!</p>

<p>🖋 분할정복 알고리즘은 재귀 알고리즘이 많이 사용되는데, 이 부분에서 분할정복 알고리즘의 효율성을 깎아내릴 수 있다.</p>

<h3 id="특징-및-장단점"><strong>특징 및 장단점</strong></h3>

<p>∙  분할된 작은 문제는 원래 문제와 성격이 동일하다  -&gt; 입력 크기만 작아짐</p>

<p>∙  분할된 문제는 서로 독립적이다(중복 제거 X) -&gt; 순환적 분할  및 결과 결합 가능</p>

<p>∙  분할정복은 Top-down방식으로 재귀 호출의 장단점과 똑같다고 보면 된다.</p>

<table>
  <thead>
    <tr>
      <th>장점</th>
      <th>단점</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>∙  Top-down 재귀방식으로 구현하기 때문에 코드가 직관적이다.</td>
      <td>∙  재귀함수 호출로 오버헤드가 발생할 수 있다</td>
    </tr>
    <tr>
      <td>∙  문제를 나누어 해결한다는 특징상 병렬적으로 문제를 해결할 수 있다.</td>
      <td>∙  스택에 다량의 데이터가 보관되는 경우 오버플로우가 발생할 수 있다.</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Nahyun Eun</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="algorithm" /><summary type="html"><![CDATA[분할정복 알고리즘에 대한 설명입니다.]]></summary></entry><entry><title type="html">[JAVA] Set</title><link href="https://nan0silver.github.io/java/2024-12-08-set/" rel="alternate" type="text/html" title="[JAVA] Set" /><published>2024-12-08T00:00:00+00:00</published><updated>2025-01-16T02:42:07+00:00</updated><id>https://nan0silver.github.io/java/set</id><content type="html" xml:base="https://nan0silver.github.io/java/2024-12-08-set/"><![CDATA[<p>목차</p>
<ol>
  <li><a href="#텍스트-블록">텍스트 블록</a></li>
  <li><a href="#formatted-메서드">formatted() 메서드</a></li>
  <li><a href="#레코드">레코드</a></li>
  <li><a href="#패턴-매칭">패턴 매칭</a></li>
  <li><a href="#자료형에-맞는-case-처리">case문 개선</a></li>
</ol>

<hr />

<h2 id="set">Set</h2>
<ul>
  <li>데이터 자료구조(데이터 컬렉션) 중 하나로, 특정한 값들을 저장하는 추상자료형</li>
  <li>List와 다르게 데이터를 중복해서 저장할 수 없음</li>
  <li>저장된 데이터를 인덱스로 관리하지 않기 때문에 저장 순서가 보장되지 않음</li>
  <li>수학의 유한 집합을 컴퓨터로 구현한 것</li>
  <li>특성
    <ul>
      <li>데이터를 비순차적으로 저장할 수 있는 순열 자료구조</li>
      <li>삽입한 데이터가 순서대로 저장되지 않음</li>
      <li>수정 가능(mutable)</li>
      <li>중복해서 삽입 불가능</li>
      <li>Fast Lookup이 필요할 때 주로 쓰임</li>
    </ul>
  </li>
  <li>대표적인 클래스
    <ul>
      <li>HashSet, TreeSet, LinkedHashSet</li>
    </ul>
  </li>
  <li>클래스들의 주요 메소드
    <ul>
      <li>add(E e)
        <ul>
          <li>리턴타입 : boolean</li>
        </ul>
      </li>
      <li>interator()
        <ul>
          <li>리턴타입 : Iterator<E></E></li>
          <li>검색을 위한 반복자 생성</li>
        </ul>
      </li>
      <li>size()
        <ul>
          <li>리턴타입 : int</li>
        </ul>
      </li>
      <li>clear()
        <ul>
          <li>리턴타입 : void</li>
        </ul>
      </li>
      <li>remove(Object o)
        <ul>
          <li>리턴타입 : boolean</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="hashset">HashSet</h3>
<ul>
  <li>Set 컬랙션을 구현하는 대표적인 클래스</li>
  <li>데이터를 중복 저장할 수 없고 순서를 보장하지 않는다.</li>
  <li>예시
    <ul>
      <li>
        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;();</span>
  <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"one"</span><span class="o">);</span>
  <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"two"</span><span class="o">);</span>

  <span class="nc">Interator</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">set</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
        
  <span class="k">while</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span> <span class="c1">//꺼낼 것이 있다면 true 리턴</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">());</span> <span class="c1">//다음 데이터 리턴</span>
  <span class="o">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h3 id="treeset">TreeSet</h3>
<ul>
  <li>중복된 데이터를 저장할 수 없고 입력한 순서대로 값을 저장하지 않음</li>
  <li>TreeSet은 기본적으로 오름차순으로 데이터를 정렬</li>
</ul>

<h3 id="linkedhashset">LinkedHashSet</h3>
<ul>
  <li>입력된 순서대로 데이터를 관리한다.</li>
  <li>중복된 데이터를 저장할 수는 없음</li>
  <li>저장된 데이터의 존재를 빠르게 확인할 수 있지만 내부에 삽입 순서로 정렬된 목록이 포함됨</li>
  <li>포켓몬 고와 같은 게임에서 객체가 이미 목록에 있는지 여부를 빠르게 확인하고 목록에 없는 경우 목록에 추가할 수 있음</li>
  <li>LinkedHashSet vs HashSet
    <ul>
      <li>HashSet은 HashMap을 사용해 개체를 저장</li>
      <li>LinkedHashSet은 LinkedHashMap을 사용</li>
      <li>삽입 순서를 유지할 필요가 없지만 고유한 개체를 저장해야하는 경우 HashSet이 적합</li>
      <li>LinkedHashSet의 성능은 HashSet보다 약간 느림</li>
    </ul>
  </li>
</ul>]]></content><author><name>Nahyun Eun</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="java" /><summary type="html"><![CDATA[JAVA의 Set의 사용법을 알아본다.]]></summary></entry><entry><title type="html">[TIL] 2024.12.03</title><link href="https://nan0silver.github.io/devdiary/2024-12-03-til/" rel="alternate" type="text/html" title="[TIL] 2024.12.03" /><published>2024-12-03T00:00:00+00:00</published><updated>2025-01-16T02:42:07+00:00</updated><id>https://nan0silver.github.io/devdiary/til</id><content type="html" xml:base="https://nan0silver.github.io/devdiary/2024-12-03-til/"><![CDATA[<p>목차</p>
<ul>
  <li><a href="#맵핑-mapping">Mapping</a></li>
</ul>

<hr />

<h2 id="맵핑-mapping">맵핑 (Mapping)</h2>

<ul>
  <li>Mapping
    <ul>
      <li>클라이언트로 부터 요청이 들어오는 URL과 컨트롤러 메서드를 연결하는 작업</li>
      <li>Mapping 애너테이션을 사용해 클라이언트의 요청이 URL로 들어올 때 해당 URL에 맞는 컨트롤러가 있는지 확인하고 해당 컨트롤러를 매핑하여 요청을 처리</li>
    </ul>
  </li>
  <li>@RequestMapping
    <ul>
      <li>클라이언트가 특정 URL로 요청을 보낼 때, 이 요청을 처리할 컨트롤러 메서드를 정의하는 것</li>
      <li>Get, Post, Put, Delete, Patch등의 URL을 다 포함하고 있으며, 옵션을 통해 종류를 지정할 수 있음
        <ul>
          <li>
            <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@Controller</span>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="o">{</span>
      <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/products"</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="nc">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
      <span class="kd">public</span> <span class="nc">String</span> <span class="nf">listProducts</span><span class="o">()</span> <span class="o">{</span>
          <span class="k">return</span> <span class="s">"product-list"</span><span class="o">;</span>
      <span class="o">}</span>

      <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/products"</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="nc">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">)</span>
      <span class="kd">public</span> <span class="nc">String</span> <span class="nf">addProducts</span><span class="o">()</span> <span class="o">{</span>
          <span class="k">return</span> <span class="s">"product-added"</span><span class="o">;</span>
      <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>HTTP 메서드에 특화된 매핑
    <ul>
      <li>@GetMapping
        <ul>
          <li>GET 요청만 받는 애노테이션</li>
          <li>@RequestMapping(method = RequestMethod.GET)</li>
        </ul>
      </li>
      <li>@PostMapping
        <ul>
          <li>POST 요청만 받는 애노테이션</li>
          <li>@RequestMapping(method = RequestMethod.POST)</li>
        </ul>
      </li>
      <li>@PutMapping
        <ul>
          <li>PUT 요청만 받는 애노테이션</li>
          <li>@RequestMapping(method = RequestMethod.PUT)</li>
        </ul>
      </li>
      <li>@DeleteMapping
        <ul>
          <li>DELETE 요청만 받는 애노테이션</li>
          <li>@RequestMapping(method = RequestMethod.DELETE)</li>
        </ul>
      </li>
      <li>@PatchtMapping
        <ul>
          <li>PATCT 요청만 받는 애노테이션</li>
          <li>@RequestMapping(method = RequestMethod.PATCH)</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name>Nahyun Eun</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="devdiary" /><summary type="html"><![CDATA[2024년 12월 3일 하루 공부 내용 정리]]></summary></entry><entry><title type="html">[TIL] 2024.12.02</title><link href="https://nan0silver.github.io/devdiary/2024-12-02-til/" rel="alternate" type="text/html" title="[TIL] 2024.12.02" /><published>2024-12-02T00:00:00+00:00</published><updated>2025-01-16T02:42:07+00:00</updated><id>https://nan0silver.github.io/devdiary/til</id><content type="html" xml:base="https://nan0silver.github.io/devdiary/2024-12-02-til/"><![CDATA[<p>목차</p>
<ul>
  <li><a href="#스프링-콘셉트">스프링 콘셉트</a></li>
</ul>

<hr />

<h2 id="스프링-콘셉트">스프링 콘셉트</h2>

<ul>
  <li>IoC
    <ul>
      <li>Inversion of Control</li>
      <li>객체의 생성과 관리를 개발자가 아니라 프레임워크가 대신하는 것</li>
      <li>
        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
      <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>
  <span class="o">}</span>
</code></pre></div>        </div>
      </li>
      <li>객체를 직접 생성하지 않고(new 키워드 사용하지 않고) 외부에서 관리하는 객체를 가져와 사용</li>
      <li>스프링에서는 스프링 컨테이너가 객체를 관리, 제공하는 역할을 함
        <ul>
          <li>스프링 컨테이너
            <ul>
              <li>빈이 생성되고 소멸되기 까지의 생명주기를 관리하는 것</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>DI
    <ul>
      <li>Dependency Injection</li>
      <li>외부에서 객체를 주입받아 사용하는 것</li>
      <li>예시 (IoC/DI를 기초로 하는 스프링 코드)
        <ul>
          <li>
            <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
      <span class="c1">//A에서 B를 주입받음</span>
      <span class="nd">@Autowired</span>
      <span class="no">B</span> <span class="n">b</span><span class="o">;</span>
  <span class="o">}</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Bean
    <ul>
      <li>스프링 컨테이너가 생성하고 관리하는 객체</li>
      <li>스프링은 빈을 컨테이너에 등록하기 위해 XML 파일 설정, 애너테이션 추가 등 방법 제공</li>
    </ul>
  </li>
  <li>AOP
    <ul>
      <li>Aspect Oriented Programming</li>
      <li>프로그래밍 시 핵심 관점과 부가 관점을 나누어 개발하는 것</li>
    </ul>
  </li>
  <li>PSA
    <ul>
      <li>Portable Service Abstraction</li>
      <li>어느 기술을 사용하던 일관된 방식으로 처리하도록 하는 것</li>
      <li>대표적인 예
        <ul>
          <li>클라이언트의 매핑과 클래스, 메서드의 매핑을 위한 애너테이션</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name>Nahyun Eun</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="devdiary" /><summary type="html"><![CDATA[2024년 12월 2일 하루 공부 내용 정리]]></summary></entry><entry><title type="html">[JAVA] JAVA 메모리 모델과 변수의 종류 : static, 지역변수, 레퍼런스 변수 이해하기</title><link href="https://nan0silver.github.io/java/2024-11-20-variable/" rel="alternate" type="text/html" title="[JAVA] JAVA 메모리 모델과 변수의 종류 : static, 지역변수, 레퍼런스 변수 이해하기" /><published>2024-11-20T00:00:00+00:00</published><updated>2025-01-16T02:42:07+00:00</updated><id>https://nan0silver.github.io/java/variable</id><content type="html" xml:base="https://nan0silver.github.io/java/2024-11-20-variable/"><![CDATA[<p>목차</p>
<ol>
  <li>
    <p><a href="#static-변수">static 변수</a></p>

    <p>1-1. <a href="#method-area">Method Area</a></p>
  </li>
  <li>
    <p><a href="#지역변수--레퍼런스-변수">지역변수 &amp; 레퍼런스 변수</a></p>

    <p>2-1. <a href="#지역변수-local-variable">지역 변수</a></p>

    <p>2-2. <a href="#레퍼런스-변수-reference-variable">레퍼런스 변수</a></p>
  </li>
  <li>
    <p><a href="#java-변수-비교-static-지역-변수-레퍼런스-변수의-특징과-차이점">JAVA 변수들의 특징 및 차이점 요약</a></p>

    <p>3-1. <a href="#static-변수와-지역-변수-비교">static 변수와 지역 변수 비교</a></p>

    <p>3-2. <a href="#static-변수와-레퍼런스-변수-비교">static 변수와 레퍼런스 변수 비교</a></p>

    <p>3-3. <a href="#지역-변수와-레퍼런스-변수-비교">지역 변수와 레퍼런스 변수 비교</a></p>
  </li>
</ol>

<hr />

<h2 id="static-변수">static 변수</h2>
<ul>
  <li>인스턴스가 아닌 클래스에 귀속</li>
  <li>인스턴스가 여러 개 생성되도 static 변수는 딱 하나
    <ul>
      <li>클래스가 메모리에 로드될 때 한 번 생성됨</li>
      <li>객체가 아닌 클래스 자체에 저장되기 때문에 모든 객체가 동일한 메모리 위치를 공유함</li>
    </ul>
  </li>
  <li>특징
    <ul>
      <li>수명
        <ul>
          <li>클래스가 메모리에 로드될 때 생성되고, 프로그램이 종료될 때까지 유지됨</li>
          <li>일반적인 지역변수와 달리 블록을 벗어나도 소멸되지 않음</li>
        </ul>
      </li>
      <li>메모리 위치
        <ul>
          <li>static 변수는 Method Area에 저장됨</li>
        </ul>
      </li>
      <li>static 변수의 객체 독립성
        <ul>
          <li>static 변수가 클래스 자체에 속해 있기 때문에, 객체를 생성하지 않아도 해당 클래스 이름만으로 직접 접근 가능</li>
          <li>예시
            <ul>
              <li>
                <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Example</span> <span class="o">{</span>
      <span class="kd">static</span> <span class="kt">int</span> <span class="n">staticVar</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span> <span class="c1">//static 변수 (클래스 변수)</span>
      <span class="kt">int</span> <span class="n">instanceVar</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span> <span class="c1">//인스턴스 변수 (객체 변수)</span>

      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
          <span class="c1">//static 변수는 클래스 이름으로 접근 가능</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Static Variable: "</span> <span class="o">+</span> <span class="nc">Example</span><span class="o">.</span><span class="na">staticVar</span><span class="o">);</span> <span class="c1">//출력: 10</span>

          <span class="c1">//객체를 생성하지 않아도 static 변수에 접근 가능</span>
          <span class="nc">Example</span><span class="o">.</span><span class="na">staticVar</span> <span class="o">=</span> <span class="mi">30</span><span class="o">;</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Static Variable: "</span> <span class="o">+</span><span class="nc">Example</span><span class="o">.</span><span class="na">staticVar</span><span class="o">);</span> <span class="c1">//출력: 30</span>

          <span class="c1">//객체를 생성해야 인스턴스 변수에 접근 가능</span>
          <span class="nc">Example</span> <span class="n">obj1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Example</span><span class="o">();</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Instance Variable: "</span> <span class="o">+</span> <span class="n">obj1</span><span class="o">.</span><span class="na">instanceVar</span><span class="o">);</span> <span class="c1">//출력: 20</span>
      <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>                </div>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>static 변수 사용 시점
    <ul>
      <li>공유 데이터가 필요할 때
        <ul>
          <li>모든 객체에서 동일한 값 공유해아 할 때 사용</li>
          <li>예: 총 객체 갯수, 공통 설정값 등</li>
        </ul>
      </li>
      <li>객체와 무관하게 동작해야할 때
        <ul>
          <li>클래스 자체의 정보를 나타내거나, 객체 없이 사용 가능한 값을 저장할 때</li>
          <li>예: 수학 상수 Math.PI, System.out.println()의 out도 static</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestClass</span><span class="o">{</span>
      <span class="kd">static</span> <span class="kt">int</span> <span class="n">number</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span><span class="o">{</span>
      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="o">[]</span><span class="n">arg</span><span class="o">){</span>
          <span class="nc">TestClass</span> <span class="n">class1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TestClass</span><span class="o">();</span>
          <span class="nc">TestClass</span> <span class="n">class2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TestClass</span><span class="o">();</span>

          <span class="n">class1</span><span class="o">.</span><span class="na">number</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
          <span class="n">class2</span><span class="o">.</span><span class="na">number</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>

          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"class1의 number: "</span> <span class="o">+</span> <span class="n">class1</span><span class="o">.</span><span class="na">number</span><span class="o">);</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"class2의 number: "</span> <span class="o">+</span> <span class="n">class2</span><span class="o">.</span><span class="na">number</span><span class="o">);</span>
      <span class="o">}</span>
  <span class="o">}</span>
  <span class="c1">// class1의 number: 5</span>
  <span class="c1">// class2의 number: 5</span>
</code></pre></div>    </div>
  </li>
  <li>마지막에 number에 5가 저장되어있기 때문에 5가 두번 출력</li>
</ul>

<h3 id="method-area">Method Area</h3>
<ul>
  <li>JVM(Java Virtual Machine)의 메모리 구조 중 하나</li>
  <li>클래스 수준의 정보를 저장하는 영역
    <ul>
      <li>저장되는 데이터 종류
        <ol>
          <li>클래스 정보
            <ul>
              <li>클래스의 이름, 부모 클래스, 접근 제어자 등의 메타데이터</li>
            </ul>
          </li>
          <li>클래스 변수 (static 변수)
            <ul>
              <li>클래스가 로드될 때 메모리에 할당되며 모든 객체에서 공유됨</li>
            </ul>
          </li>
          <li>메서드 정보
            <ul>
              <li>메서드의 이름, 리턴 타입, 매개변수 타입 등</li>
              <li>메서드의 바이트코드 포함</li>
            </ul>
          </li>
          <li>상수 (Constant Pool)
            <ul>
              <li>컴파일 시 생성된 상수(문자열, 숫자 리터럴 등)와 참조(메서드 참조, 클래스 참조)가 저장됨</li>
            </ul>
          </li>
          <li>런타임 상수 풀(Runtime Constant Pool)
            <ul>
              <li>런타임 중에 동적으로 생성된 상수와 참조.</li>
            </ul>
          </li>
        </ol>
      </li>
    </ul>
  </li>
  <li>특징
    <ul>
      <li>JVM내에서 유일 : 모든 스레드가 공유</li>
      <li>수명 : JVM이 종료될 때까지 유지</li>
      <li>Garbage Collection 대상 아님 : 클래스 정보는 명시적으로 제거되지 않음</li>
    </ul>
  </li>
</ul>

<h2 id="지역변수--레퍼런스-변수">지역변수 &amp; 레퍼런스 변수</h2>
<h3 id="지역변수-local-variable">지역변수 (Local Variable)</h3>
<ul>
  <li>특정 블록이나 함수 안에서만 선언되고 사용가능한 변수</li>
  <li>해당 블록이나 함수가 실행을 마치면 메모리에서 삭제되며, 외부에서 접근 불가능</li>
  <li>특징
    <ul>
      <li>유효 범위 (Scope)
        <ul>
          <li>변수가 선언된 블록(중괄호 {}로 감싸진 영역) 내에서만 유효</li>
        </ul>
      </li>
      <li>초기화 필요
        <ul>
          <li>지역변수는 자동으로 초기화 되지 않음</li>
        </ul>
      </li>
      <li>메모리 관리
        <ul>
          <li>지역변수는 함수 호출시 생성되고, 함수 종료 시 자동으로 소멸됨</li>
          <li>일반적으로 스택 메모리 사용</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>예제
    <ul>
      <li>
        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Example</span> <span class="o">{</span>
      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
          <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// x는 main 메서드의 지역 변수</span>
          <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">)</span> <span class="o">{</span>
              <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span> <span class="c1">// y는 if 블록의 지역 변수</span>
          <span class="o">}</span>
          <span class="c1">//y는 if블록 밖에서 사용할 수 없음</span>
          <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h3 id="레퍼런스-변수-reference-variable">레퍼런스 변수 (Reference Variable)</h3>
<ul>
  <li>객체의 메모리 주소를 저장한는 변수, 즉 객체를 참조하는 데 사용됨</li>
  <li>실제 객체 데이터를 직접 저장하지 않고 객체가 메모리에 위치한 주소만 저장</li>
  <li>특징
    <ul>
      <li>객체와 연결
        <ul>
          <li>레퍼런스 변수는 new키워드 등을 통해 생성된 객체를 가리킴</li>
        </ul>
      </li>
      <li>동적 메모리 사용
        <ul>
          <li>레퍼런스 변수가 가리키는 객체는 힙(Heap)메모리에 저장됨</li>
        </ul>
      </li>
      <li>null값 가능
        <ul>
          <li>초기화되지 않은 레퍼런스 변수는 null값을 가질 수 있음</li>
          <li>null값을 참조하려면 NullPointerException이 발생</li>
        </ul>
      </li>
      <li>두 레퍼런스 변수가 동일한 객체를 가리킬 수 있음
        <ul>
          <li>한 레퍼런스 변수를 통해 객체를 수정하면 다른 레퍼런스 변수도 수정됨</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>예제
    <ul>
      <li>
        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Example</span><span class="o">{</span>
      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
          <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"Hello"</span><span class="o">;</span> <span class="c1">//str은 String객체를 참조하는 레퍼런스 변수</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">());</span> <span class="c1">//참조된 객체의 메서드 호출 가능</span>

          <span class="n">str</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">//str이 아무 객체도 참조하지 않음</span>
          <span class="c1">//System.out.println(str.length()); //NullPointerException 발생</span>
      <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>        </div>
      </li>
      <li>
        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Example</span> <span class="o">{</span>
      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
          <span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">};</span>
          <span class="kt">int</span><span class="o">[]</span> <span class="n">ref</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">;</span> <span class="c1">//같은 객체 참조</span>
          <span class="n">ref</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span> <span class="c1">//참조를 통해 객체 수정</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">numbers</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span> <span class="c1">//출력: 100</span>
      <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h2 id="java-변수-비교-static-지역-변수-레퍼런스-변수의-특징과-차이점">Java 변수 비교: static, 지역 변수, 레퍼런스 변수의 특징과 차이점</h2>
<h3 id="static-변수와-지역-변수-비교">static 변수와 지역 변수 비교</h3>

<table>
  <thead>
    <tr>
      <th><strong>특징</strong></th>
      <th><strong>static 변수</strong></th>
      <th><strong>지역 변수</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>범위(Scope)</strong></td>
      <td>클래스 전체에서 접근 가능 (전역적)</td>
      <td>선언된 블록(예: 함수) 내에서만 유효</td>
    </tr>
    <tr>
      <td><strong>수명(Lifetime)</strong></td>
      <td>프로그램 종료 시까지 유지</td>
      <td>블록 실행이 끝나면 소멸</td>
    </tr>
    <tr>
      <td><strong>공유</strong></td>
      <td>모든 객체가 같은 값을 공유</td>
      <td>각 함수 호출마다 독립적으로 생성</td>
    </tr>
    <tr>
      <td><strong>메모리 위치</strong></td>
      <td>메서드 영역(Method Area)</td>
      <td>스택(Stack) 메모리</td>
    </tr>
  </tbody>
</table>

<hr />

<h3 id="static-변수와-레퍼런스-변수-비교">static 변수와 레퍼런스 변수 비교</h3>

<table>
  <thead>
    <tr>
      <th><strong>특징</strong></th>
      <th><strong>static 변수</strong></th>
      <th><strong>레퍼런스 변수</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>저장 내용</strong></td>
      <td>클래스 수준에서 공유되는 데이터</td>
      <td>객체의 메모리 주소를 저장</td>
    </tr>
    <tr>
      <td><strong>초기화 여부</strong></td>
      <td>명시적 초기화가 없으면 기본값으로 초기화됨</td>
      <td>초기화되지 않으면 null 값을 가짐</td>
    </tr>
    <tr>
      <td><strong>수명</strong></td>
      <td>클래스 로드부터 프로그램 종료까지 유지</td>
      <td>변수의 유효 범위 내에서만 사용 가능</td>
    </tr>
    <tr>
      <td><strong>클래스 의존성</strong></td>
      <td>클래스와 연결 (객체와 무관)</td>
      <td>객체를 가리킴 (객체가 없으면 의미 없음)</td>
    </tr>
    <tr>
      <td><strong>메모리 위치</strong></td>
      <td>메서드 영역(Method Area)</td>
      <td>스택(지역 변수일 때) 또는 힙(객체를 참조할 때)</td>
    </tr>
  </tbody>
</table>

<h3 id="지역-변수와-레퍼런스-변수-비교">지역 변수와 레퍼런스 변수 비교</h3>

<table>
  <thead>
    <tr>
      <th><strong>특징</strong></th>
      <th><strong>지역 변수</strong></th>
      <th><strong>레퍼런스 변수</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>저장 내용</strong></td>
      <td>값 자체</td>
      <td>객체의 메모리 주소</td>
    </tr>
    <tr>
      <td><strong>유효 범위</strong></td>
      <td>선언된 블록 내</td>
      <td>객체가 참조되는 동안</td>
    </tr>
    <tr>
      <td><strong>메모리 위치</strong></td>
      <td>스택 메모리</td>
      <td>힙 메모리에 저장된 객체를 참조</td>
    </tr>
    <tr>
      <td><strong>초기화 필요성</strong></td>
      <td>명시적 초기화 필요</td>
      <td>초기화되지 않은 경우 null 값을 가질 수 있음</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Nahyun Eun</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="java" /><summary type="html"><![CDATA[static, 지역변수, 레퍼런스 변수 등 JAVA의 변수의 종류와 메모리 모델에 대해 알아본다.]]></summary></entry><entry><title type="html">[JAVA] JAVA version 17의 주요 변화</title><link href="https://nan0silver.github.io/java/2024-11-15-java17/" rel="alternate" type="text/html" title="[JAVA] JAVA version 17의 주요 변화" /><published>2024-11-15T00:00:00+00:00</published><updated>2025-01-16T02:42:07+00:00</updated><id>https://nan0silver.github.io/java/java17</id><content type="html" xml:base="https://nan0silver.github.io/java/2024-11-15-java17/"><![CDATA[<p>목차</p>
<ol>
  <li><a href="#텍스트-블록">텍스트 블록</a></li>
  <li><a href="#formatted-메서드">formatted() 메서드</a></li>
  <li><a href="#레코드">레코드</a></li>
  <li><a href="#패턴-매칭">패턴 매칭</a></li>
  <li><a href="#자료형에-맞는-case-처리">case문 개선</a></li>
</ol>

<hr />

<h2 id="텍스트-블록">텍스트 블록</h2>
<ul>
  <li>이전 버전에서는 여러 줄의 텍스트를 작성할때 \n을 추가해야해서 가독성이 좋지 않은 부분이 개선되었다.</li>
  <li>예시
    <ul>
      <li>
        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">String</span> <span class="n">example11</span> <span class="o">=</span> <span class="s">"SELETE * FROM \"product\"\n"</span> <span class="o">+</span>
                  <span class="s">"WHERE \"country\" = \"KOREA\"\n"</span> <span class="o">+</span>
                  <span class="s">"ORDER BY \"name\";\n"</span><span class="o">;</span>
                    
  <span class="nc">String</span> <span class="n">example17</span> <span class="o">=</span> <span class="s">"""
                      SELECT * FROM "</span><span class="n">product</span><span class="s">"
                      WHERE "</span><span class="n">country</span><span class="s">" = "</span><span class="no">KOREA</span><span class="s">"
                      ORDER BY "</span><span class="n">name</span><span class="o">;</span>
                      <span class="s">""</span><span class="err">"</span><span class="o">;</span>
                      <span class="c1">//가독성이 훨씬 좋아졌다</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h2 id="formatted-메서드">formatted() 메서드</h2>
<ul>
  <li>값을 파싱하는 데 더 편하게 해주는 formatted() 메서드 제공</li>
  <li>예시
    <ul>
      <li>
        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">String</span> <span class="n">example17</span> <span class="o">=</span> <span class="s">"""
  {
      "</span><span class="n">id</span><span class="s">": %d,
      "</span><span class="n">name</span><span class="s">": %s
  }
  """</span><span class="o">.</span><span class="na">formatted</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">"nahyun"</span><span class="o">);</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h2 id="레코드">레코드</h2>
<ul>
  <li>데이터 전달을 위한 객체를 더 빠르고 간편하게 만들기 위한 기능</li>
  <li>getter를 자동으로 만들어 주기 때문에 애너테이션이나 메서드로 게터를 정의하지 않아도 됨</li>
  <li>예시
    <ul>
      <li>
        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">record</span> <span class="nf">Item</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
      <span class="c1">//파라미터가 private final로 정의된다</span>
  <span class="o">}</span>
  <span class="nc">Item</span> <span class="n">product1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Item</span><span class="o">(</span><span class="s">"product1"</span><span class="o">,</span> <span class="mi">2500</span><span class="o">);</span>
  <span class="n">product1</span><span class="o">.</span><span class="na">price</span><span class="o">();</span> <span class="c1">//2500</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h2 id="패턴-매칭">패턴 매칭</h2>
<ul>
  <li>타입 확인을 위해 사용하던 instanceof 키워드를 개선</li>
  <li>이전에는 instanceof 키워드와 형변환 코드를 조합해야 했지만 이제는 바로 형변환 가능</li>
</ul>

<h2 id="자료형에-맞는-case-처리">자료형에 맞는 case 처리</h2>
<ul>
  <li>switch-case문에서 자료형에 맞게 case 처리 가능</li>
  <li>예시
    <ul>
      <li>
        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">static</span> <span class="kt">double</span> <span class="nf">getIntegerValue</span><span class="o">(</span><span class="nc">Object</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="nf">switch</span> <span class="o">(</span><span class="n">object</span><span class="o">)</span> <span class="o">{</span>
          <span class="k">case</span> <span class="nc">Double</span> <span class="n">d</span> <span class="o">-&gt;</span> <span class="n">d</span><span class="o">.</span><span class="na">intValue</span><span class="o">();</span>
          <span class="k">case</span> <span class="nc">Float</span> <span class="n">f</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="o">.</span><span class="na">intValue</span><span class="o">();</span>
          <span class="k">case</span> <span class="nc">String</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
          <span class="k">default</span> <span class="o">-&gt;</span> <span class="mi">0</span><span class="n">d</span><span class="o">;</span>
      <span class="o">};</span>
  <span class="o">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name>Nahyun Eun</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="java" /><summary type="html"><![CDATA[JAVA 17버전의 주요 변화 사항을 알아본다.]]></summary></entry><entry><title type="html">[TIL] 2024.11.08</title><link href="https://nan0silver.github.io/devdiary/2024-11-08-til/" rel="alternate" type="text/html" title="[TIL] 2024.11.08" /><published>2024-11-08T00:00:00+00:00</published><updated>2025-01-16T02:42:07+00:00</updated><id>https://nan0silver.github.io/devdiary/til</id><content type="html" xml:base="https://nan0silver.github.io/devdiary/2024-11-08-til/"><![CDATA[<p>목차</p>
<ul>
  <li><a href="#컴파일-언어-vs-인터프리터-언어">컴파일 언어와 인터프리터 언어</a></li>
</ul>

<hr />

<h2 id="컴파일-언어-vs-인터프리터-언어">컴파일 언어 VS 인터프리터 언어</h2>

<ul>
  <li>
    <p>항상 접할때마다 헷갈려서 정리하기로 했다.</p>
  </li>
  <li>컴파일 언어
    <ul>
      <li>한번에 통째 번역</li>
      <li>컴파일 타임 사용
        <ul>
          <li>코드를 기계어로 바꾸는 시간</li>
          <li>이 과정을 거쳐 소스코드는 기계어가 되어 실행가능한 상태가 됨</li>
        </ul>
      </li>
      <li>대표적인 예
        <ul>
          <li>C, C++, 러스트, JAVA, Go</li>
        </ul>
      </li>
      <li>인터프리터 언어보다 20~100배 이상 빠름</li>
      <li>개발 편의성이 떨어져 개발 과정이 힘듬</li>
    </ul>
  </li>
  <li>인터프리터 언어
    <ul>
      <li>스크립트 언어</li>
      <li>번역과 실행이 동시에 이루어짐</li>
      <li>별도의 실행파일이 필요하지 않고, 빌드 시간이 없음</li>
      <li>런타임 사용
        <ul>
          <li>프로그램을 실행할 때 한 줄씩 읽고 해석한 뒤 실행</li>
          <li>모두 실행하는 속도는 컴파일 언어보다 느림</li>
        </ul>
      </li>
      <li>대표적인 예
        <ul>
          <li>Python, Ruby</li>
        </ul>
      </li>
      <li>python은 C++로 만들어져 있음
        <ul>
          <li>컴파일 언어는 빠르지만 개발 편의성이 떨어져 인터프리터 언어를 만드는데 사용되기도 함</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name>Nahyun Eun</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="devdiary" /><summary type="html"><![CDATA[2024년 11월 8일 하루 공부 내용 정리]]></summary></entry><entry><title type="html">[AWS] AWS 기초</title><link href="https://nan0silver.github.io/aws/2024-09-02-aws/" rel="alternate" type="text/html" title="[AWS] AWS 기초" /><published>2024-09-02T00:00:00+00:00</published><updated>2025-01-16T02:42:07+00:00</updated><id>https://nan0silver.github.io/aws/aws</id><content type="html" xml:base="https://nan0silver.github.io/aws/2024-09-02-aws/"><![CDATA[<p>목차</p>
<ol>
  <li><a href="#aws란">AWS란?</a></li>
  <li><a href="#s3--cloudfront">S3 &amp; Cloudfront</a></li>
  <li><a href="#aws-솔루션-실무-적용-사례">AWS 솔루션 실무 적용 사례</a></li>
  <li><a href="#aws-클라우드-인프라의-구성-요소">AWS 클라우드 인프라의 구성 요소</a></li>
  <li><a href="#aws-네트워크-구성-요소-설명-캠퍼스-예시로-이해하기">AWS 네트워크 구성 요소 설명: 캠퍼스 예시로 이해하기</a></li>
  <li><a href="#aws-초기-설정-및-구성-시-주의점">AWS 초기 설정 및 구성 시 주의점</a></li>
</ol>

<hr />

<h2 id="aws에-대한-기초-내용">AWS에 대한 기초 내용</h2>

<h3 id="aws란">AWS란?</h3>
<ul>
  <li>Amazon Web Service</li>
  <li>클라우드 컴퓨팅 플랫폼
    <ul>
      <li>인터넷을 통해 IT리소스(서버, 스토리지, 데이터베이스, 네트워킹 등)를 제공하고 관리하는 서비스</li>
      <li>특징
        <ol>
          <li>확장성 (Scalability)
            <ul>
              <li>사용자가 필요에 따라 리소스를 쉽게 확장, 축소 가능</li>
              <li>블랙 프라이데이에는 몇 배의 트래픽이 몰림. 이때마다 하드웨어를 사용하는건 비효율적, 이때만 자원을 사용하고 끝나면 반납할 수 있음</li>
            </ul>
          </li>
          <li>유연성 (Flexibility)
            <ul>
              <li>다양한 IT 환경에 맞춰 손쉽게 맞춤화 가능</li>
              <li>자바스크립트로 백엔드 많이 사용</li>
            </ul>
          </li>
          <li>비용 효율성 (Cost Efficiency)
            <ul>
              <li>초기 자본 투자 없이, 사용한 만큼 지불하는 비용 구조</li>
            </ul>
          </li>
          <li>가용성
            <ul>
              <li>높은 가용성과 자동 백업, 복구 기능으로 서비스 중간 최소화</li>
              <li>람다 서비스를 처음 띄울 때 서울 4개의 구역에 띄워놓을 수 있음. 한 개의 구역에 오류가 나도 다른 구역에서는 잘 쓸 수 있음.</li>
            </ul>
          </li>
        </ol>
      </li>
    </ul>
  </li>
  <li>AWS 계정 만들어보기</li>
  <li>AWS Cloud Practitioner Essentials (Korean)
    <ul>
      <li>Cloud Practitioner 자격증 있음
        <ul>
          <li>공부하는 것 추천함 (따는건 비쌈)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>큰 회사에서는 AWS 자격증이 크게 상관없겠지만, 작은 회사에서는 AWS역량이 필수적</li>
</ul>

<h3 id="s3--cloudfront">S3 &amp; Cloudfront</h3>
<ul>
  <li>S3
    <ul>
      <li>Simple Storage Service</li>
      <li>AWS 최초의 서비스</li>
      <li>클라우드 파일 저장소</li>
      <li>AWS 사용하고 있는 회사라면 99%의 확률로 활용하고 있음</li>
      <li>S3는 서버사이트 스크립팅(PHP, Python등)이 필요없는 정적 웹사이트에 최적</li>
      <li>기본 개념
        <ul>
          <li>버킷 (Bucket)
            <ul>
              <li>S3에서 데이터를 저장하는 컨테이너</li>
              <li>모든 S3객체는 반드시 하나의 버킷에 속해 있음</li>
              <li>S3 스토리지의 최상위 계층이며, 사용자가 데이터를 저장하고 관리할 수 있는 폴더와 비슷
                <ul>
                  <li>컴퓨터에서 C드라이브와 비슷한 느낌</li>
                </ul>
              </li>
              <li>각 버킷은 고유한 이름을 가짐(전세걔 유일)</li>
              <li>데이터 저장 위치(region), 권한 설정, 버전 관리, 수명 주기 정책 등 관리 가능</li>
            </ul>
          </li>
          <li>Key
            <ul>
              <li>S3버킷 내 객체(파일)를 고유하게 식별하는 문자열</li>
              <li>버킷 내 키는 객체의 “경로”로 생각 가능</li>
              <li>디렉토리 구조를 흉내낼 수 있도록 설계됨
                <ul>
                  <li>그냥 전체가 하나의 키임</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
      <li>사용 방법
        <ul>
          <li>AWS Console</li>
          <li>AWS Cli</li>
          <li>FTP 프로그램
            <ul>
              <li>file transfer protocol</li>
              <li>사이버덕, 파일질라</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Cloudfront
    <ul>
      <li>AWS CDN 서비스
        <ul>
          <li>Contents Delivery Network</li>
          <li>인터넷 사용자에게 웹 콘텐츠를 빠르고 효율적으로 제공하기 위해 설계된 분산형 서버 네트워크</li>
        </ul>
      </li>
      <li>S3를 비롯한 AWS의 다른 서비스와 연동이 쉬움</li>
      <li>AWS를 사용하는 회사라면 99% 사용</li>
      <li>S3는 저장에 특화, Cloudfront는 전송에 특화
        <ul>
          <li>S3는 직접 접근으로 주로 내부 사용자나 제한된 사용자들에게 제공을 많이함</li>
          <li>하지만 Cloudfront는 CDN을 통해 접근하기때문에 속도도 빠르고 캐싱도 됨</li>
        </ul>
      </li>
      <li>S3 1GB당 약 0.117$, Cloudfront 1GB당 0.095$</li>
      <li>CloudFront는 약정 계약이 가능</li>
    </ul>
  </li>
</ul>

<h3 id="aws-솔루션-실무-적용-사례">AWS 솔루션 실무 적용 사례</h3>

<ol>
  <li>이미지 리사이즈
    <ul>
      <li>대역폭 및 비용 감소할 수 있음</li>
      <li>첫 번째 AWS 활용 포트폴리오
        <ol>
          <li>S3에 이미지가 업로드 되면 자동적으로 원하는 크기로 리사이징하여 저장하는 방법</li>
          <li>원하는 사이즈의 이미지를 실시간으로 생성하는 방법
            <ul>
              <li>본인이 자신있는 프로그래밍 언어를 선택하여 AWS Lambda 기능을 활용해서 작성</li>
              <li>‘aws cloudfront 이미지 리사이징’ 구글 검색</li>
            </ul>
          </li>
        </ol>
      </li>
    </ul>
  </li>
  <li>보안
    <ul>
      <li>민감정보 보호 방법
        <ul>
          <li>Signed URL
            <ul>
              <li>특정 사용자에게만 접근 권한을 부여하기 위해 URL에 만료 시간과 암호화된 서명을 포함한 URL</li>
            </ul>
          </li>
          <li>Signed Cookie
            <ul>
              <li>특정 조건을 만족하는 사용자만 CloudFront를 통해 콘텐츠에 접근할 수 있도록 설정하는 보안 메커니즘</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<h3 id="aws-클라우드-인프라의-구성-요소">AWS 클라우드 인프라의 구성 요소</h3>
<ol>
  <li>EC2 (Elastic Compute Cloud)
    <ul>
      <li>개발자가 클라우드 컴퓨팅 작업을 할 수 있도록 설계된 서비스</li>
      <li>가상화된 서버를 하나의 인스턴스 형태로 제공하며, 컴퓨팅 요구사항에 맞게 용량 조절 가능</li>
    </ul>
  </li>
  <li>IDC
    <ul>
      <li>Internet Data Center</li>
      <li>물리적 인프라를 제공하는 시설</li>
    </ul>
  </li>
  <li>리전 (Region)
    <ul>
      <li>물리적으로 분리된 지리적 위치</li>
      <li>각 리전은 여러 개의 데이터 센터(Availability Zone, AZ)로 구성되어 있음</li>
      <li>리전 간 데이터 전송은 네트워크 지연 시간(latency)이 발생할 수 있음</li>
      <li>각 리전은 법적, 규제 요구 사항을 충족하도록 설계됨</li>
    </ul>
  </li>
  <li>Availability Zone
    <ul>
      <li>리전 내에서 독립적으로 운영되는 데이터 센터</li>
      <li>각 AZ는 하나 이상의 데이터 센터로 구성되어 있음</li>
      <li>VPC (가상 사설 네트워크)
        <ul>
          <li>Virtual Private Cloud</li>
          <li>네트워크
            <ul>
              <li>2개 이상의 컴퓨터나 장치가 서로 데이터를 주고 받을 수 있도록 연결된 시스템</li>
            </ul>
          </li>
          <li>사설
            <ul>
              <li>공개되지 않은, 외부와 분리되느 특정 사용자나 조직만 접근할 수 있는</li>
            </ul>
          </li>
          <li>가상
            <ul>
              <li>물리적인 하드웨어 장비나 네트워크 인프라 없이, 소프트웨어를 통해 논리적으로 격리</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<h3 id="aws-네트워크-구성-요소-설명-캠퍼스-예시로-이해하기">AWS 네트워크 구성 요소 설명: 캠퍼스 예시로 이해하기</h3>
<ul>
  <li>퍼블릭 서브넷
    <ul>
      <li>Public Subnet
        <ul>
          <li>public : 인터넷과 직접 연결되어있다.</li>
          <li>subnet : sub + network, 하나의 네트워크를 더 작은 단위의 네트워크로 (부분 집합)</li>
        </ul>
      </li>
      <li>중앙 운동장, 도서관, 기념품샵 등등</li>
    </ul>
  </li>
  <li>프라이빗 서브넷
    <ul>
      <li>Private Subnet
        <ul>
          <li>인터넷과 직접 연결되어있지 않다.</li>
        </ul>
      </li>
      <li>교수 연구실, 실험실 (아무나 못들어가는)</li>
    </ul>
  </li>
  <li>라우팅 / 라우팅 테이블
    <ul>
      <li>Routing Table
        <ul>
          <li>라우팅 : 경로, 네트워크 내에서 데이터가 이동할 경로를 결정</li>
        </ul>
      </li>
      <li>캠퍼스 내 길 / 길 안내 지도</li>
    </ul>
  </li>
  <li>인터넷 게이트웨이
    <ul>
      <li>학교 정문</li>
    </ul>
  </li>
  <li>NAT 게이트웨이
    <ul>
      <li>Network Address Translation
        <ul>
          <li>Network Address : IP주소 (Internet Protocol)
            <ul>
              <li>네트워크 상에서 각 장치를 식별하기 위해 사용되는 고유한 숫자 주소</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>내부 네트워크의 사설 IP 주소를 공용 IP주소로 변환</li>
      <li>경비실, 차량 차단기, 보안 검사대</li>
    </ul>
  </li>
  <li>네트워크 ACL (Access Control List)
    <ul>
      <li>전체 구역 통제 시스템</li>
      <li>서브넷 단위</li>
      <li>Stateless, 상태 비기반, 독립적인 제어
        <ul>
          <li>들어올 때도 검사하고 나갈때도 검사함</li>
        </ul>
      </li>
      <li>우선순위가 있음</li>
      <li>차단기의 정책, 비행기 탈 때와 비슷</li>
    </ul>
  </li>
  <li>보안 그룹 (Security Group)
    <ul>
      <li>개별 사무실 출입 통제 시스템</li>
      <li>기본적으로 모든 트래픽은 차단하며 허용 규칙만 있음</li>
      <li>stateful, 상태 기반 (신분증 제출하고 출입증 받아가는 느낌)</li>
    </ul>
  </li>
  <li>라우팅 테이블에 인터넷 게이트웨이랑 <strong>퍼블릭 서브넷</strong>이 연결
    <ul>
      <li>반대로 생각하면 퍼블릭 서브넷과 프라이빗 서브넷을 구분짓는 중요한 요소가 됨</li>
    </ul>
  </li>
</ul>

<h3 id="aws-초기-설정-및-구성-시-주의점">AWS 초기 설정 및 구성 시 주의점</h3>
<ul>
  <li>AWS에서 처음으로 제공해주는 VPC는 가급적으로 사용하지 말자</li>
  <li>람다를 private 서브에 올리고 nat를 사용하는 것을 추천
    <ul>
      <li>람다는 실행할 때마다 ip가 바뀜, 문제가 될 수 있음</li>
    </ul>
  </li>
</ul>]]></content><author><name>Nahyun Eun</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="aws" /><summary type="html"><![CDATA[AWS의 기본 내용에 대해 알아본다.]]></summary></entry></feed>