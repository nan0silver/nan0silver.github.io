<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko-KR, en-US"><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://nan0silver.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://nan0silver.github.io/" rel="alternate" type="text/html" hreflang="ko-KR, en-US" /><updated>2025-01-27T04:00:58+00:00</updated><id>https://nan0silver.github.io/feed.xml</id><title type="html">NAHYUN BLOG</title><subtitle>Nahyun’s Development Blog
Hi, I’m Nahyun Eun, a student from South Korea studying backend development with Java.  In this blog, I organize and share my learning journey in programming, with notes and insights on backend concepts and practical examples.
 Follow along as I dive into the world of coding!
</subtitle><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><entry><title type="html">[JavaScript] JavaScript 단축 평가 (Short-circuit evaluation)</title><link href="https://nan0silver.github.io/miscellaneous/2025-01-27-javascript-short-circuit-evaluation/" rel="alternate" type="text/html" title="[JavaScript] JavaScript 단축 평가 (Short-circuit evaluation)" /><published>2025-01-27T00:00:00+00:00</published><updated>2025-01-27T04:00:13+00:00</updated><id>https://nan0silver.github.io/miscellaneous/javascript-short-circuit-evaluation</id><content type="html" xml:base="https://nan0silver.github.io/miscellaneous/2025-01-27-javascript-short-circuit-evaluation/"><![CDATA[<ul>
  <li><a href="#단축-평가란">단축 평가란?</a></li>
  <li><a href="#단축-평가-동작-방식">단축 평가 동작 방식</a></li>
  <li><a href="#단축-평가-활용-예시">단축 평가 활용 예시</a></li>
  <li><a href="#주의사항">주의사항</a></li>
</ul>

<hr />

<h2 id="단축-평가란">단축 평가란?</h2>

<ul>
  <li>논리 연산자 (<code class="language-plaintext highlighter-rouge">&amp;&amp;</code>, <code class="language-plaintext highlighter-rouge">||</code>) 를 평가할 때, <strong>결과를 미리 결정할 수 있다면 나머지 표현식을 평가하지 않고 곧바로 결과를 반환하는 것</strong>
    <ul>
      <li><strong><code class="language-plaintext highlighter-rouge">&amp;&amp;</code> (AND) 연산자</strong>: 두 피연산자가 모두 <code class="language-plaintext highlighter-rouge">true</code> 일 때만 <code class="language-plaintext highlighter-rouge">true</code> 를 반환합니다.</li>
      <li><strong><code class="language-plaintext highlighter-rouge">||</code> (OR) 연산자</strong>: 두 피연산자 중 하나라도 <code class="language-plaintext highlighter-rouge">true</code> 이면 <code class="language-plaintext highlighter-rouge">true</code> 를 반환합니다.</li>
    </ul>
  </li>
  <li>논리 연산자의 동작 방식을 이용하여 불필요한 연산을 줄이고, 코드 실행 효율성을 높임.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">&amp;&amp;</code> (AND) 와 <code class="language-plaintext highlighter-rouge">||</code> (OR) 연산자를 조건문 없이 사용하는 코드를 가능하게 함</li>
    </ul>
  </li>
</ul>

<h2 id="단축-평가-동작-방식">단축 평가 동작 방식</h2>

<h3 id="1--and-연산자">1. <code class="language-plaintext highlighter-rouge">&amp;&amp;</code> (AND) 연산자</h3>

<p><code class="language-plaintext highlighter-rouge">&amp;&amp;</code> 연산자는 <strong>좌항부터 평가</strong></p>

<ul>
  <li><strong>좌항이 <code class="language-plaintext highlighter-rouge">false</code> 라면</strong>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">&amp;&amp;</code> 연산의 결과는 항상 <code class="language-plaintext highlighter-rouge">false</code> 이므로, <strong>우항을 평가하지 않고 곧바로 <code class="language-plaintext highlighter-rouge">false</code> 를 반환</strong></li>
    </ul>
  </li>
  <li><strong>좌항이 <code class="language-plaintext highlighter-rouge">true</code> 라면</strong>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">&amp;&amp;</code> 연산의 결과는 우항에 따라 결정되므로, <strong>우항을 평가하고 그 결과를 반환</strong></li>
    </ul>
  </li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">false</span> <span class="o">&amp;&amp;</span> <span class="kc">true</span><span class="p">);</span> <span class="c1">//falsk</span>
<span class="c1">//(좌항이 false이므로 우항을 평가하지 않고 false 반환)</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="kc">false</span><span class="p">);</span> <span class="c1">//false</span>
<span class="c1">//(좌항이 true이므로 우항을 평가하여 false 반환)</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="kc">true</span><span class="p">);</span> <span class="c1">//true</span>
<span class="c1">//(좌항이 true이므로 우항을 평가하여 true 반환)</span>
</code></pre></div></div>

<h3 id="2--or-연산자">2. <code class="language-plaintext highlighter-rouge">||</code> (OR) 연산자</h3>

<p><code class="language-plaintext highlighter-rouge">||</code> 연산자는 <code class="language-plaintext highlighter-rouge">&amp;&amp;</code> 연산자와 마찬가지로 <strong>좌항부터 평가</strong></p>

<ul>
  <li><strong>좌항이 <code class="language-plaintext highlighter-rouge">true</code> 라면</strong>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">||</code> 연산의 결과는 항상 <code class="language-plaintext highlighter-rouge">true</code> 이므로, <strong>우항을 평가하지 않고 곧바로 <code class="language-plaintext highlighter-rouge">true</code> 를 반환</strong></li>
    </ul>
  </li>
  <li><strong>좌항이 <code class="language-plaintext highlighter-rouge">false</code> 라면</strong>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">||</code> 연산의 결과는 우항에 따라 결정되므로, <strong>우항을 평가하고 그 결과를 반환</strong></li>
    </ul>
  </li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">true</span> <span class="o">||</span> <span class="kc">false</span><span class="p">);</span> <span class="c1">//true</span>
<span class="c1">//(좌항이 true이므로 우항을 평가하지 않고 true 반환)</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">false</span> <span class="o">||</span> <span class="kc">true</span><span class="p">);</span> <span class="c1">//true</span>
<span class="c1">//(좌항이 false이므로 우항을 평가하여 true 반환)</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">false</span> <span class="o">||</span> <span class="kc">false</span><span class="p">);</span> <span class="c1">//false</span>
<span class="c1">//(좌항이 false이므로 우항을 평가하여 false 반환)</span>
</code></pre></div></div>

<h2 id="단축-평가-활용-예시">단축 평가 활용 예시</h2>

<h3 id="1-객체의-속성에-접근할-때">1. 객체의 속성에 접근할 때</h3>

<p>객체의 속성에 접근하기 전에 객체가 <code class="language-plaintext highlighter-rouge">null</code> 또는 <code class="language-plaintext highlighter-rouge">undefined</code> 인지 확인하는 코드를 단축 평가로 간결하게 작성 가능</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Alice</span><span class="dl">"</span> <span class="p">};</span>
<span class="c1">// const person = null; // person이 null인 경우</span>

<span class="c1">// 조건문 사용</span>
<span class="kd">let</span> <span class="nx">name</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">name</span> <span class="o">=</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Unknown</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Alice</span>

<span class="c1">// 단축 평가 사용</span>
<span class="kd">const</span> <span class="nx">name2</span> <span class="o">=</span> <span class="nx">person</span> <span class="o">&amp;&amp;</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name2</span><span class="p">);</span>
<span class="c1">// Alice (person이 truthy 값이므로 person.name 평가)</span>

<span class="kd">const</span> <span class="nx">person2</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">name3</span> <span class="o">=</span> <span class="nx">person2</span> <span class="o">&amp;&amp;</span> <span class="nx">person2</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name3</span><span class="p">);</span> <span class="c1">// null (person2가 falsy 값이므로 person2 그대로 반환)</span>

<span class="c1">// || 연산자를 사용한 기본값 설정</span>
<span class="kd">const</span> <span class="nx">name4</span> <span class="o">=</span> <span class="nx">person2</span> <span class="o">||</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Unknown</span><span class="dl">"</span> <span class="p">};</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name4</span><span class="p">);</span> <span class="c1">// { name: 'Unknown' } (person2가 falsy 값이므로 { name: 'Unknown' } 반환)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name4</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Unknown</span>
</code></pre></div></div>

<h3 id="2-함수-매개변수에-기본값-설정">2. 함수 매개변수에 기본값 설정</h3>

<p>함수 매개변수에 기본값을 설정할 때 <code class="language-plaintext highlighter-rouge">||</code> 연산자를 사용하여 코드를 간결하게 만들 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">greet</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// 조건문 사용</span>
  <span class="kd">const</span> <span class="nx">userName</span> <span class="o">=</span> <span class="nx">name</span> <span class="p">?</span> <span class="nx">name</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">Guest</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello, </span><span class="p">${</span><span class="nx">userName</span><span class="p">}</span><span class="s2">!`</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">greet</span><span class="p">(</span><span class="dl">"</span><span class="s2">Bob</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// Hello, Bob!</span>
<span class="nx">greet</span><span class="p">();</span> <span class="c1">// Hello, Guest!</span>

<span class="kd">function</span> <span class="nx">greet2</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// 단축 평가 사용</span>
  <span class="kd">const</span> <span class="nx">userName</span> <span class="o">=</span> <span class="nx">name</span> <span class="o">||</span> <span class="dl">"</span><span class="s2">Guest</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello, </span><span class="p">${</span><span class="nx">userName</span><span class="p">}</span><span class="s2">!`</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">greet2</span><span class="p">(</span><span class="dl">"</span><span class="s2">Charlie</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// Hello, Charlie!</span>
<span class="nx">greet2</span><span class="p">();</span> <span class="c1">// Hello, Guest!</span>
</code></pre></div></div>

<h3 id="3-조건부-렌더링-react">3. 조건부 렌더링 (React)</h3>

<p>React와 같은 UI 라이브러리에서 조건부 렌더링을 구현할 때 단축 평가를 유용하게 사용할 수 있다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">MyComponent</span><span class="p">({</span> <span class="nx">items</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="si">{</span><span class="sr">/_ items가 존재하고 배열인 경우에만 목록 렌더링 _/</span><span class="si">}</span>
      <span class="si">{</span><span class="nx">items</span> <span class="o">&amp;&amp;</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">items</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
          <span class="si">{</span><span class="nx">items</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">li</span> <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
          <span class="p">))</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
      <span class="p">)</span><span class="si">}</span>
      <span class="si">{</span><span class="sr">/_ items가 없거나 배열이 아닌 경우 메시지 표시 _/</span><span class="si">}</span>
      <span class="si">{</span><span class="o">!</span><span class="nx">items</span> <span class="o">&amp;&amp;</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>No items to display.<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span><span class="si">}</span>
      <span class="si">{</span><span class="nx">items</span> <span class="o">||</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>No items to display.<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span><span class="si">}</span> <span class="si">{</span><span class="sr">/_ || 연산자 사용 _/</span><span class="si">}</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="주의사항">주의사항</h2>

<ul>
  <li>단축 평가는 코드를 간결하게 만들어주지만, 남용하면 코드의 가독성을 해칠 수 있음.
    <ul>
      <li>적절한 상황에서 사용하는 것이 중요합니다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&amp;&amp;</code> 와 <code class="language-plaintext highlighter-rouge">||</code> 연산자는 boolean 값이 아닌 값도 반환 가능
    <ul>
      <li>단축 평가의 반환 값은 마지막으로 평가된 표현식의 결과이다.</li>
    </ul>
  </li>
</ul>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="miscellaneous" /><summary type="html"><![CDATA[JavaScript 단축 평가 (Short-circuit evaluation)에 대해 알아보자.]]></summary></entry><entry><title type="html">[JAVA] int와 long의 차이 ➡️ 범위와 오버플로우 문제 완벽 정리</title><link href="https://nan0silver.github.io/java/2025-01-23-int-long/" rel="alternate" type="text/html" title="[JAVA] int와 long의 차이 ➡️ 범위와 오버플로우 문제 완벽 정리" /><published>2025-01-23T00:00:00+00:00</published><updated>2025-01-27T04:00:13+00:00</updated><id>https://nan0silver.github.io/java/int-long</id><content type="html" xml:base="https://nan0silver.github.io/java/2025-01-23-int-long/"><![CDATA[<ul>
  <li><a href="#int와-long의-차이">int와 long의 차이</a></li>
  <li><a href="#int와-long의-입력값">int와 long의 입력값</a></li>
  <li><a href="#연산-결과의-최대값-예상하기">연산 결과의 최대값 예상하기</a></li>
  <li><a href="#문제를-보고-빠르게-판단하는-팁">문제를 보고 빠르게 판단하는 팁</a></li>
</ul>

<hr />

<h2 id="int와-long의-차이">int와 long의 차이</h2>

<ul>
  <li>자꾸 문제를 풀다 int와 long을 혼동해서 문제를 틀리는 경우가 있어서 완벽 정리하려고 한다.</li>
  <li><strong>입력값의 범위와 연산 결과의 최댓값</strong>을 기준으로 판단하는 습관을 들여야 함</li>
</ul>

<h2 id="int와-long의-입력값">int와 long의 입력값</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">int</code> : 약 -2,147,483,648 ~ 2,147,483,648</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">long</code> : 약 -9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,808</p>
  </li>
  <li>문제에 입력값이 명시되어 있다면
    <ul>
      <li>-2,000,000,000 &lt;= N,M &lt;= 2,000,000,000
        <ul>
          <li><code class="language-plaintext highlighter-rouge">int</code>는 처리 가능. 하지만 연산 결과를 생각해야 함</li>
        </ul>
      </li>
      <li>범위가 <code class="language-plaintext highlighter-rouge">int</code>의 한계와 가깝다면, 입력값은 int로 가능하더라도 연산 결과가 범위를 초과할 수 있기 때문에 <code class="language-plaintext highlighter-rouge">long</code>을 사용하는 것이 안전</li>
    </ul>
  </li>
</ul>

<h3 id="판단-기준">판단 기준</h3>

<ul>
  <li>입력값이 <code class="language-plaintext highlighter-rouge">-10^9 ~ 10^9</code> 사이일 경우
    <ul>
      <li>단순한 덧셈이나 뺄셈은 <code class="language-plaintext highlighter-rouge">int</code>로 처리 가능</li>
      <li>곱셈, 제곱 연산, 누적 합계 등은 <code class="language-plaintext highlighter-rouge">long</code>이 필요할 수 있음</li>
    </ul>
  </li>
  <li>입력값이 <code class="language-plaintext highlighter-rouge">-10^{10}</code> 이상이거나, 결과적으로 큰 숫자가 나올 가능성이 있다면
    <ul>
      <li>무조건 <code class="language-plaintext highlighter-rouge">long</code> 사용</li>
    </ul>
  </li>
</ul>

<h2 id="연산-결과의-최대값-예상하기">연산 결과의 최대값 예상하기</h2>

<ul>
  <li>문제에서 요구하는 연산 결과 예상하기</li>
  <li>예) 누적합 문제
    <ul>
      <li>배열의 크기가 1,000,000이고, 각 원소가 최대 10^6이라면, 누적합은 최대 10^12가 될 수 있음</li>
      <li>이 경우 int의 범위를 초과하므로 long을 사용해야 함</li>
    </ul>
  </li>
</ul>

<h2 id="문제를-보고-빠르게-판단하는-팁">문제를 보고 빠르게 판단하는 팁</h2>

<ol>
  <li>입력 범위 확인</li>
  <li>연산의 종류 확인</li>
  <li>규칙 만들기
    <ul>
      <li>“입력값이 10^9 이상이면 무조건 <code class="language-plaintext highlighter-rouge">long</code>으로 처리한다”</li>
    </ul>
  </li>
  <li>테스트 데이터 체크
    <ul>
      <li>극단적인 입력값을 대입해보기</li>
    </ul>
  </li>
</ol>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="java" /><summary type="html"><![CDATA[프론트엔드 개발자 관점에서 Responsive와 Reactive의 뜻을 알아보자.]]></summary></entry><entry><title type="html">[Git] git rebase</title><link href="https://nan0silver.github.io/miscellaneous/2025-01-23-git-rebase/" rel="alternate" type="text/html" title="[Git] git rebase" /><published>2025-01-23T00:00:00+00:00</published><updated>2025-01-27T04:00:13+00:00</updated><id>https://nan0silver.github.io/miscellaneous/git-rebase</id><content type="html" xml:base="https://nan0silver.github.io/miscellaneous/2025-01-23-git-rebase/"><![CDATA[<ul>
  <li><a href="#git-rebase">git rebase</a></li>
  <li><a href="#git-rebase-vs-git-merge">git rebase VS git merge</a></li>
  <li><a href="#git-rebase-사용법">git rebase 사용법</a></li>
  <li><a href="#장점">장점</a></li>
  <li><a href="#주의-사항">주의 사항</a></li>
</ul>

<hr />

<h2 id="git-rebase">git rebase</h2>

<ul>
  <li>Git에서 브랜치의 커밋 히스토리를 재구성할 때 사용하는 명령어</li>
  <li>이를 통해 브랜치의 히스토리를 “정리(clean)”하거나 최신 상태를 기반으로 변경사항을 다시 적용할 수 있음</li>
</ul>

<h2 id="git-rebase-vs-git-merge">git rebase VS git merge</h2>

<ul>
  <li>일반적으로 merge와 같은 목적으로 사용되지만, 다른 방식으로 작동
    <ul>
      <li>merge
        <ul>
          <li>두 브랜치의 히스토리를 합치면서, 새로운 병합 커밋을 생성</li>
        </ul>
      </li>
      <li>rebase
        <ul>
          <li>한 브랜치의 커밋을 다른 브랜치의 끝으로 옮겨서, 히스토리가 마치 일렬로 정리된 것처럼 보임</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>예시 이미지</p>

    <ul>
      <li>
        <p><img src="https://github.com/nan0silver/nan0silver.github.io/blob/main/assets/img/blog/2025-01-23-git-rebase.png?raw=true" alt="git-rebase" style="width:150px; " /></p>
      </li>
      <li><code class="language-plaintext highlighter-rouge">16d0e75</code> 커밋 아래는 merge 흔적</li>
      <li><code class="language-plaintext highlighter-rouge">16d0e75</code> 커밋 위는 rebase로 인한 선형 히스토리</li>
    </ul>
  </li>
</ul>

<h2 id="git-rebase-사용법">git rebase 사용법</h2>

<ol>
  <li>
    <p>업스트림 브랜치로 리베이스</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git swicth -c feature
git rebase main
</code></pre></div>    </div>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">feature</code> 브랜치에서 작업한 커밋을들 <code class="language-plaintext highlighter-rouge">main</code> 브랜치의 최신 상태를 기반으로 재적용</li>
    </ul>
  </li>
  <li>
    <p>interactive rebase</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git rebase -i HEAD~n
</code></pre></div>    </div>
    <ul>
      <li>마지막 n개의 커밋을 선택적으로 수정하거나 합칠 수 있음</li>
      <li>실행하면 편집 모드가 열리며, 옵션을 선택할 수 있음
        <ul>
          <li>pick, reword, edit, squash, drop등</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<h2 id="장점">장점</h2>

<ul>
  <li>히스토리 정리</li>
  <li>불필요한 merge 커밋 제거</li>
  <li>최신 상태 유지</li>
</ul>

<h2 id="주의-사항">주의 사항</h2>

<ul>
  <li>리베이스 중 충돌</li>
  <li>이미 푸시된 브랜치에 리베이스 금지</li>
  <li><code class="language-plaintext highlighter-rouge">git pull --rebase</code>
    <ul>
      <li>원격 브랜치의 변경 사항을 병합 대신 리베이스로 가져올 때 사용</li>
    </ul>
  </li>
</ul>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="miscellaneous" /><summary type="html"><![CDATA[git rebase의 동작 방식에 대해 알아보자.]]></summary></entry><entry><title type="html">[Git] git clone VS git fork</title><link href="https://nan0silver.github.io/miscellaneous/2025-01-22-git-clone-fork/" rel="alternate" type="text/html" title="[Git] git clone VS git fork" /><published>2025-01-22T00:00:00+00:00</published><updated>2025-01-27T04:00:13+00:00</updated><id>https://nan0silver.github.io/miscellaneous/git-clone-fork</id><content type="html" xml:base="https://nan0silver.github.io/miscellaneous/2025-01-22-git-clone-fork/"><![CDATA[<ul>
  <li><a href="#git-clone">git clone</a></li>
  <li><a href="#git-fork">git fork</a></li>
  <li><a href="#주요-차이점-정리">주요 차이점 정리</a></li>
  <li><a href="#워크플로우">워크플로우</a></li>
  <li><a href="#실전-예시">실전 예시</a></li>
</ul>

<hr />

<h2 id="git-clone">git clone</h2>

<ul>
  <li>역할
    <ul>
      <li>원격 저장소를 로컬 컴퓨터에 복제</li>
    </ul>
  </li>
  <li>작업 대상
    <ul>
      <li>원격 저장소</li>
    </ul>
  </li>
  <li>특징
    <ul>
      <li>저장소의 완전한 복사본(전체 커밋 내역, 브랜치 등)을 가져옴</li>
      <li>복제 후, 원격 저장소가 자동으로 <code class="language-plaintext highlighter-rouge">origin</code>이라는 이름으로 연결됨</li>
      <li>로컬에서 작업한 내용을 원격 저장소에 반영하려면 <code class="language-plaintext highlighter-rouge">push</code>사용</li>
    </ul>
  </li>
  <li>동작 방식
    <ol>
      <li>Git 저장소 초기화 (<code class="language-plaintext highlighter-rouge">git init</code>)
        <ul>
          <li>새로 생성된 폴더는 Git 저장소로 설정됨</li>
          <li><code class="language-plaintext highlighter-rouge">.git</code> 디렉터리가 자동으로 생성됨</li>
        </ul>
      </li>
      <li>원격 저장소 설정 (<code class="language-plaintext highlighter-rouge">git remote add origin</code>)
        <ul>
          <li>복제한 원격 저장소가 자동으로 <code class="language-plaintext highlighter-rouge">origin</code>이라는 이름으로 연결됨</li>
          <li>로컬에서 원격 저장소와 동기화(<code class="language-plaintext highlighter-rouge">push</code>, <code class="language-plaintext highlighter-rouge">pull</code>)를 가능하게 함</li>
        </ul>
      </li>
      <li>브랜치 체크아웃
        <ul>
          <li>기본 브랜치(<code class="language-plaintext highlighter-rouge">main</code> or <code class="language-plaintext highlighter-rouge">master</code>)의 최신 상태가 복제됨</li>
          <li>이 브랜치는 로컬 저장소로 가져와 자동으로 체크아웃됨</li>
        </ul>
      </li>
      <li>파일 다운로드
        <ul>
          <li>원격 저장소에 있는 모든 파일과 폴더가 로컬 디렉토리에 다운로드됨</li>
        </ul>
      </li>
    </ol>
  </li>
  <li><code class="language-plaintext highlighter-rouge">git clone</code> 명령을 실행하면, 다운받은 폴더는 자동으로 Git 저장소로 초기화되고, 원격 저장소와도 연결된 상태임
    <ul>
      <li><strong><code class="language-plaintext highlighter-rouge">git init</code>이나 <code class="language-plaintext highlighter-rouge">git remote add</code>를 실행할 필요가 없음</strong></li>
    </ul>
  </li>
</ul>

<h2 id="git-fork">git fork</h2>

<ul>
  <li>역할
    <ul>
      <li>원격 저장소를 자신의 원격 계정으로 복제</li>
    </ul>
  </li>
  <li>작업 대상
    <ul>
      <li>GitHub/GitLab 계정 상의 저장소</li>
    </ul>
  </li>
  <li>특징
    <ul>
      <li>원본 저장소의 복사본이 내 계정의 원격 저장소로 생성됨</li>
      <li><strong>내 계정에서 관리할 수 있는 원격 저장소를 만든다는 것</strong>이 핵심</li>
      <li>원본 저장소와 연결은 유지되지만, 독립적인 저장소로 사용됨</li>
      <li>추가 단계
        <ul>
          <li>포크 후, 로컬에 복사하려면 <strong><code class="language-plaintext highlighter-rouge">git clone</code></strong>을 사용해야 함</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>사용 시기
    <ul>
      <li>오픈소스 프로젝트에 기여할 때, 원본 저장소를 수정하지 않고 내 계정에서 관리 가능한 복사본을 만들어야 할 때 사용</li>
      <li><strong>Pull Request</strong>를 보내기 위한 준비 단계로 사용</li>
    </ul>
  </li>
</ul>

<h2 id="주요-차이점-정리">주요 차이점 정리</h2>

<table>
  <thead>
    <tr>
      <th><strong>특징</strong></th>
      <th><strong>git clone</strong></th>
      <th><strong>git fork</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>복제 대상</td>
      <td>원격 저장소 ➡️ 로컬 저장소</td>
      <td>원격 저장소 ➡️ 내 원격 저장소</td>
    </tr>
    <tr>
      <td>저장소 위치</td>
      <td>로컬에서 작업</td>
      <td>내 계정의 원격 저장소에서 작업</td>
    </tr>
    <tr>
      <td>연결된 원격 저장소</td>
      <td><code class="language-plaintext highlighter-rouge">origin</code>으로 원본 저장소 연결</td>
      <td>내 계정의 원격 저장소 (원본 저장소는 upstream으로 연결 가능)</td>
    </tr>
    <tr>
      <td>사용 목적</td>
      <td>로컬에서 작업하고 원본 저장소에 반영</td>
      <td>내 계정에서 독립적으로 원격 저장소 관리</td>
    </tr>
    <tr>
      <td>주로 사용 상황</td>
      <td>협업 프로젝트에 바로 참여</td>
      <td>오픈소스 프로젝트에 기여 (Pull Request 준비)</td>
    </tr>
  </tbody>
</table>

<h2 id="워크플로우">워크플로우</h2>

<h3 id="일반적으로-fork--clone--push--pull-request가-오픈-소스-협업의-표준-워크플로우">일반적으로 <strong>Fork → Clone → Push → Pull Request</strong>가 오픈 소스 협업의 표준 워크플로우</h3>

<ol>
  <li>
    <p>Fork 저장소 생성</p>

    <ul>
      <li>먼저, 해당 저장소를 <strong>Fork</strong>하여 내 계정으로 복사
        <ul>
          <li>GitHub에서 기여하고자 하는 저장소 페이지로 이동</li>
          <li>우측 상단의 <strong>Fork</strong> 버튼을 클릭</li>
          <li>그러면 내 계정에 저장소 복사본이 생성됨</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>Fork 저장소 Clone</p>

    <ul>
      <li>Fork된 저장소를 로컬로 복제
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/your-username/repository.git
</code></pre></div>        </div>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">your-username</code>은 GitHub 계정 이름으로 대체</li>
          <li>Clone이 완료되면 로컬 환경에서 작업 가능</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>원본 저장소 추가 (선택 사항)</p>

    <ul>
      <li>원본 저장소와 동기화를 유지하려면, 원본 저장소를 <strong><code class="language-plaintext highlighter-rouge">upstream</code></strong>으로 추가
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote add upstream https://github.com/original-owner/repository.git
</code></pre></div>        </div>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">original-owner</code>는 원본 저장소의 소유자 이름으로 대체</li>
          <li><code class="language-plaintext highlighter-rouge">git remote -v</code> 명령을 사용하여 설정이 제대로 되었는지 확인 가능</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>로컬에서 작업</p>

    <ul>
      <li>새로운 파일을 추가하거나 수정 후 커밋
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"Add new feature"</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>Fork된 저장소에 Push</p>

    <ul>
      <li>로컬에서 작업한 내용을 자신의 Fork 저장소에 Push
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push origin main
</code></pre></div>        </div>
        <ul>
          <li>여기서 <code class="language-plaintext highlighter-rouge">main</code>은 사용하는 브랜치 이름</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>Pull Request 생성</p>

    <ul>
      <li>
        <p>GitHub로 돌아가, Fork된 저장소에서 원본 저장소로 <strong>Pull Request</strong>를 생성</p>

        <ol>
          <li>내 Fork 저장소 페이지에서 <strong>“Contribute”</strong> 버튼 클릭.</li>
          <li><strong>“Open Pull Request”</strong> 버튼 클릭.</li>
          <li>변경 사항에 대한 설명을 작성하고 Pull Request를 제출합니다.</li>
        </ol>
      </li>
    </ul>
  </li>
</ol>

<h3 id="-요약">✅ 요약</h3>

<p>다른 사람의 저장소에 기여하기 위한 전체 과정</p>

<ol>
  <li><strong>Fork</strong>: 저장소를 내 계정으로 복제.</li>
  <li><strong>Clone</strong>: 내 계정에 있는 저장소를 로컬로 복제.</li>
  <li><strong>원본 저장소 추가</strong>: 원본 저장소와 동기화(선택 사항).</li>
  <li><strong>작업</strong>: 로컬에서 파일 수정 및 커밋.</li>
  <li><strong>Push</strong>: 작업 내용을 내 계정 저장소로 업로드.</li>
  <li><strong>Pull Request</strong>: 원본 저장소에 변경 사항을 제안.</li>
</ol>

<h2 id="실전-예시">실전 예시</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">git clone</code>만 사용하는 경우</p>

    <ul>
      <li>팀 프로젝트에서 기존 저장소를 복제하여 작업 후, 원본 저장소에 바로 push</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone &lt;repository-url&gt;
<span class="nb">cd</span> &lt;repository-folder&gt;
<span class="c"># 작업 후</span>
git push origin &lt;branch-name&gt;
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">git fork</code>와 <code class="language-plaintext highlighter-rouge">git clone</code>을 함께 사용하는 경우</p>
    <ul>
      <li>오픈소스 프로젝트에서 자신의 계정으로 fork 후, 로컬에서 복제하여 작업 후 pull request 보냄
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># GitHub에서 Fork한 후</span>
git clone &lt;forked-repository-url&gt;
<span class="nb">cd</span> &lt;repository-folder&gt;
<span class="c"># 원본 저장소를 upstream으로 추가</span>
git remote add upstream &lt;original-repository-url&gt;
git fetch upstream
<span class="c"># 작업 후, 내 계정 원격 저장소에 Push</span>
git push origin &lt;branch-name&gt;
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ol>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="miscellaneous" /><summary type="html"><![CDATA[git clone과 git fork의 동작 방식에 대해 알아보자.]]></summary></entry><entry><title type="html">[Etc] Naming Convention</title><link href="https://nan0silver.github.io/miscellaneous/2025-01-22-naming-convention/" rel="alternate" type="text/html" title="[Etc] Naming Convention" /><published>2025-01-22T00:00:00+00:00</published><updated>2025-01-27T04:00:13+00:00</updated><id>https://nan0silver.github.io/miscellaneous/naming-convention</id><content type="html" xml:base="https://nan0silver.github.io/miscellaneous/2025-01-22-naming-convention/"><![CDATA[<ul>
  <li><a href="#naming-convention이란">Naming Convention이란?</a></li>
  <li><a href="#1-케밥-케이스-kebab-case">케밥 케이스 (Kebab-case)</a></li>
  <li><a href="#2-카멜-케이스-camelcase">카멜 케이스 (camelCase)</a></li>
  <li><a href="#3-스네이크-케이스-snake_case">스네이크 케이스 (snake_case)</a></li>
  <li><a href="#4-파스칼-케이스-pascalcase">파스칼 케이스 (PascalCase)</a></li>
  <li><a href="#선택-기준">선택 기준</a></li>
</ul>

<hr />

<h2 id="naming-convention이란">Naming Convention이란?</h2>

<ul>
  <li>프로그래밍에서 변수, 함수, 클래스 이름 등을 작성하는 규칙</li>
</ul>

<hr />

<h2 id="1-케밥-케이스-kebab-case">1. 케밥 케이스 (Kebab-case)</h2>

<ul>
  <li>단어를 <strong>하이픈(-)</strong>으로 구분하며, 모든 문자를 소문자로 작성</li>
  <li>모양이 케밥을 닮았다고 해서 붙여진 이름</li>
  <li>특징
    <ul>
      <li>가독성이 좋음</li>
      <li>HTML, CSS에서 자주 사용됨</li>
      <li>언어에 따라 변수나 함수이름으로는 사용할 수 없는 경우도 있음
        <ul>
          <li>하이픈이 연산자로 해석될 수 있어서</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>예시</p>

    <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* CSS 클래스 이름 */</span>
<span class="nc">.button-primary</span> <span class="p">{</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* 파일 이름 */</span>
<span class="nt">my-awesome-file</span><span class="nc">.js</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="2-카멜-케이스-camelcase">2. 카멜 케이스 (camelCase)</h2>

<ul>
  <li>첫 단어는 소문자로 시작하고, 이후 단어의 첫 글자를 대문자로 작성</li>
  <li>이름이 낙타의 등처럼 튀어나온 형태를 닮아서 붙인 이름</li>
  <li>특징
    <ul>
      <li>JavaScript, Java, C#, Python 등에서 변수와 함수 이름으로 자주 사용됨</li>
      <li>대문자 없이 단어를 연결해 코드 가독성을 높이는 데 도움을 줌</li>
    </ul>
  </li>
  <li>예시
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript 변수와 함수</span>
<span class="kd">let</span> <span class="nx">userName</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Alice</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">function</span> <span class="nx">getUserData</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">userName</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="3-스네이크-케이스-snake_case">3. 스네이크 케이스 (snake_case)</h2>

<ul>
  <li>단어를 <strong>밑줄(_)</strong>로 구분하며, 모든 문자를 소문자로 작성</li>
  <li>뱀이 기어다니는 모양을 닮아서 붙여진 이름</li>
  <li>특징
    <ul>
      <li>Python, SQL, Ruby, C, C++, PHP, JSON 데이터 스키마에서 변수와 함수 이름으로 자주 사용됨</li>
    </ul>
  </li>
  <li>
    <p>예시</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python 변수 이름
</span><span class="n">user_name</span> <span class="o">=</span> <span class="s">"Alice"</span>

<span class="c1"># Python 함수 이름
</span><span class="k">def</span> <span class="nf">get_user_data</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">user_name</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="4-파스칼-케이스-pascalcase">4. 파스칼 케이스 (PascalCase)</h2>

<ul>
  <li>각 단어의 첫 글자를 대문자로 작성
    <ul>
      <li>카멜 케이스와 비슷하지만 첫 단어도 대문자</li>
    </ul>
  </li>
  <li>특징
    <ul>
      <li>Java, TypeScript등의 클래스 이름과 타입 이름으로 자주 사용됨</li>
    </ul>
  </li>
  <li>
    <p>예시</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Java 클래스 이름</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserAccount</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="nc">UserName</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">UserAccount</span><span class="o">(</span><span class="nc">String</span> <span class="n">userName</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">UserName</span> <span class="o">=</span> <span class="n">userName</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="선택-기준">선택 기준</h2>

<ul>
  <li>언어/환경의 표준에 따라 케이스를 선택
    <ul>
      <li>JavaScript, Java
        <ul>
          <li>camelCase (변수/함수)</li>
          <li>PascalCase (클래스)</li>
        </ul>
      </li>
      <li>Python
        <ul>
          <li>snake_case</li>
        </ul>
      </li>
      <li>CSS/HTML
        <ul>
          <li>kebab-case</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>팀 또는 프로젝트의 코딩 컨벤션에 따라 일관성 유지가 중요 (가독성을 위해)</li>
</ul>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="miscellaneous" /><summary type="html"><![CDATA[식별자를 만들 때 가독성이 좋도록 규정한 이름짓는 규칙인 naming convention에 대해 알아보자.]]></summary></entry><entry><title type="html">[HTML] CSS Flex</title><link href="https://nan0silver.github.io/miscellaneous/2025-01-21-css-flex/" rel="alternate" type="text/html" title="[HTML] CSS Flex" /><published>2025-01-21T00:00:00+00:00</published><updated>2025-01-27T04:00:13+00:00</updated><id>https://nan0silver.github.io/miscellaneous/css-flex</id><content type="html" xml:base="https://nan0silver.github.io/miscellaneous/2025-01-21-css-flex/"><![CDATA[<ul>
  <li><a href="#flexflexbox">Flex(Flexbox)</a></li>
  <li><a href="#주요-flexbox-속성">주요 Flexbox 속성 20개</a></li>
  <li><a href="#예제-통합-코드">예제: 통합 코드</a></li>
  <li><a href="#flex를-이용한-게임">flex를 이용한 게임</a></li>
</ul>

<hr />

<h2 id="flexflexbox">Flex(Flexbox)</h2>

<ul>
  <li>Flexbox(Flexible Box Layout Module)</li>
  <li>컨테이너 내의 아이템 간 공간 배분과 정렬 기능을 제공하는 1차원 레이아웃 모델</li>
  <li>
    <p>주로 행이나 열 단위로 작동하며, 복잡한 계산 없이도 요소들의 크기와 순서를 유연하게 배치할 수 있음</p>
  </li>
  <li>장점
    <ul>
      <li>복잡한 레이아웃을 간단하게 구현</li>
      <li>컨테이너 내 요소의 크기가 불명확하거나 동적인 경우에도 효과적으로 대응</li>
      <li>요소의 순서를 CSS로 변경할 수 있어 반응형 디자인에 유용</li>
      <li>float나 Position을 사용할 때보다 코드가 간결해짐</li>
    </ul>
  </li>
</ul>

<h2 id="주요-flexbox-속성">주요 Flexbox 속성</h2>

<p>CSS3 Flexbox에서 가장 많이 사용되는 <strong>20개의 속성(property)</strong>을 아래에 정리했습니다. 각각의 속성에 대한 간략한 설명과 함께 예제 코드를 제공합니다.</p>

<hr />

<h3 id="1-display-flex"><strong>1. <code class="language-plaintext highlighter-rouge">display: flex</code></strong></h3>

<ul>
  <li>Flexbox를 활성화.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="2-flex-direction"><strong>2. <code class="language-plaintext highlighter-rouge">flex-direction</code></strong></h3>

<ul>
  <li>주축의 방향 설정.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">row</code> (기본값), <code class="language-plaintext highlighter-rouge">row-reverse</code>, <code class="language-plaintext highlighter-rouge">column</code>, <code class="language-plaintext highlighter-rouge">column-reverse</code>.</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">flex-direction</span><span class="p">:</span> <span class="n">column</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="3-justify-content"><strong>3. <code class="language-plaintext highlighter-rouge">justify-content</code></strong></h3>

<ul>
  <li>주축에서 항목 정렬.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">flex-start</code>, <code class="language-plaintext highlighter-rouge">flex-end</code>, <code class="language-plaintext highlighter-rouge">center</code>, <code class="language-plaintext highlighter-rouge">space-between</code>, <code class="language-plaintext highlighter-rouge">space-around</code>, <code class="language-plaintext highlighter-rouge">space-evenly</code>.</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">justify-content</span><span class="p">:</span> <span class="n">space-between</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="4-align-items"><strong>4. <code class="language-plaintext highlighter-rouge">align-items</code></strong></h3>

<ul>
  <li>교차축에서 항목 정렬.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">stretch</code> (기본값), <code class="language-plaintext highlighter-rouge">flex-start</code>, <code class="language-plaintext highlighter-rouge">flex-end</code>, <code class="language-plaintext highlighter-rouge">center</code>, <code class="language-plaintext highlighter-rouge">baseline</code>.</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="5-align-content"><strong>5. <code class="language-plaintext highlighter-rouge">align-content</code></strong></h3>

<ul>
  <li>여러 줄에서 교차축 정렬.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">stretch</code>, <code class="language-plaintext highlighter-rouge">flex-start</code>, <code class="language-plaintext highlighter-rouge">flex-end</code>, <code class="language-plaintext highlighter-rouge">center</code>, <code class="language-plaintext highlighter-rouge">space-between</code>, <code class="language-plaintext highlighter-rouge">space-around</code>.</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">align-content</span><span class="p">:</span> <span class="n">space-around</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="6-flex-wrap"><strong>6. <code class="language-plaintext highlighter-rouge">flex-wrap</code></strong></h3>

<ul>
  <li>항목이 컨테이너를 초과하면 줄 바꿈 여부.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">nowrap</code> (기본값), <code class="language-plaintext highlighter-rouge">wrap</code>, <code class="language-plaintext highlighter-rouge">wrap-reverse</code>.</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">flex-wrap</span><span class="p">:</span> <span class="n">wrap</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="7-flex"><strong>7. <code class="language-plaintext highlighter-rouge">flex</code></strong></h3>

<ul>
  <li>개별 항목의 크기 설정 (약어).
    <ul>
      <li><code class="language-plaintext highlighter-rouge">flex: grow shrink basis;</code></li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">flex</span><span class="p">:</span> <span class="m">1</span> <span class="m">1</span> <span class="nb">auto</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="8-flex-grow"><strong>8. <code class="language-plaintext highlighter-rouge">flex-grow</code></strong></h3>

<ul>
  <li>남은 공간을 차지할 비율.
    <ul>
      <li>기본값: <code class="language-plaintext highlighter-rouge">0</code>.</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">flex-grow</span><span class="p">:</span> <span class="m">2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="9-flex-shrink"><strong>9. <code class="language-plaintext highlighter-rouge">flex-shrink</code></strong></h3>

<ul>
  <li>공간 부족 시 줄어드는 비율.
    <ul>
      <li>기본값: <code class="language-plaintext highlighter-rouge">1</code>.</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">flex-shrink</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="10-flex-basis"><strong>10. <code class="language-plaintext highlighter-rouge">flex-basis</code></strong></h3>

<ul>
  <li>항목의 기본 크기 설정.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">flex-basis</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="11-order"><strong>11. <code class="language-plaintext highlighter-rouge">order</code></strong></h3>

<ul>
  <li>항목의 배치 순서.
    <ul>
      <li>기본값: <code class="language-plaintext highlighter-rouge">0</code>.</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">order</span><span class="p">:</span> <span class="m">2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="12-gap"><strong>12. <code class="language-plaintext highlighter-rouge">gap</code></strong></h3>

<ul>
  <li>항목 간 간격 설정.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="py">gap</span><span class="p">:</span> <span class="m">20px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="13-row-gap"><strong>13. <code class="language-plaintext highlighter-rouge">row-gap</code></strong></h3>

<ul>
  <li>가로축 항목 간 간격 설정.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="py">row-gap</span><span class="p">:</span> <span class="m">15px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="14-column-gap"><strong>14. <code class="language-plaintext highlighter-rouge">column-gap</code></strong></h3>

<ul>
  <li>세로축 항목 간 간격 설정.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">column-gap</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="15-align-self"><strong>15. <code class="language-plaintext highlighter-rouge">align-self</code></strong></h3>

<ul>
  <li>개별 항목의 교차축 정렬 설정.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">auto</code>, <code class="language-plaintext highlighter-rouge">flex-start</code>, <code class="language-plaintext highlighter-rouge">flex-end</code>, <code class="language-plaintext highlighter-rouge">center</code>, <code class="language-plaintext highlighter-rouge">baseline</code>, <code class="language-plaintext highlighter-rouge">stretch</code>.</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">align-self</span><span class="p">:</span> <span class="n">flex-end</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="16-min-width"><strong>16. <code class="language-plaintext highlighter-rouge">min-width</code></strong></h3>

<ul>
  <li>항목의 최소 너비.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">min-width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="17-max-width"><strong>17. <code class="language-plaintext highlighter-rouge">max-width</code></strong></h3>

<ul>
  <li>항목의 최대 너비.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">max-width</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="18-min-height"><strong>18. <code class="language-plaintext highlighter-rouge">min-height</code></strong></h3>

<ul>
  <li>항목의 최소 높이.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">min-height</span><span class="p">:</span> <span class="m">50px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="19-max-height"><strong>19. <code class="language-plaintext highlighter-rouge">max-height</code></strong></h3>

<ul>
  <li>항목의 최대 높이.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">max-height</span><span class="p">:</span> <span class="m">150px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="20-place-content"><strong>20. <code class="language-plaintext highlighter-rouge">place-content</code></strong></h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">justify-content</code>와 <code class="language-plaintext highlighter-rouge">align-content</code>를 한 번에 설정.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">center</code>, <code class="language-plaintext highlighter-rouge">stretch</code>, <code class="language-plaintext highlighter-rouge">space-between</code> 등.</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="py">place-content</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="예제-통합-코드">예제: 통합 코드</h3>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item"</span><span class="nt">&gt;</span>Item 1<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item"</span><span class="nt">&gt;</span>Item 2<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item"</span><span class="nt">&gt;</span>Item 3<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;style&gt;</span>
  <span class="nc">.container</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
    <span class="nl">flex-direction</span><span class="p">:</span> <span class="n">row</span><span class="p">;</span>
    <span class="nl">justify-content</span><span class="p">:</span> <span class="n">space-between</span><span class="p">;</span>
    <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
    <span class="nl">flex-wrap</span><span class="p">:</span> <span class="n">wrap</span><span class="p">;</span>
    <span class="py">gap</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
    <span class="nl">height</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nc">.item</span> <span class="p">{</span>
    <span class="nl">flex</span><span class="p">:</span> <span class="m">1</span> <span class="m">1</span> <span class="m">100px</span><span class="p">;</span>
    <span class="nl">align-self</span><span class="p">:</span> <span class="n">stretch</span><span class="p">;</span>
    <span class="nl">min-width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
    <span class="nl">max-width</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div></div>

<h2 id="flex를-이용한-게임">flex를 이용한 게임</h2>

<ul>
  <li>https://flexboxfroggy.com/#ko</li>
  <li><img src="https://github.com/nan0silver/nan0silver.github.io/blob/main/assets/img/blog/2025-01-21-css-flex-image.png?raw=true" alt="flexboxfroggy" />
    <ul>
      <li>다 깼다!</li>
    </ul>
  </li>
</ul>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="miscellaneous" /><summary type="html"><![CDATA[웹 페이지의 컨테이너 내 아이템 간 공간 배분에 사용되는 CSS Flex에 대해 알아보자.]]></summary></entry><entry><title type="html">[Etc] Responsive VS Reactive</title><link href="https://nan0silver.github.io/miscellaneous/2025-01-20-responsive/" rel="alternate" type="text/html" title="[Etc] Responsive VS Reactive" /><published>2025-01-20T00:00:00+00:00</published><updated>2025-01-27T04:00:13+00:00</updated><id>https://nan0silver.github.io/miscellaneous/responsive</id><content type="html" xml:base="https://nan0silver.github.io/miscellaneous/2025-01-20-responsive/"><![CDATA[<ul>
  <li><a href="#responsive-반응형">Responsive</a></li>
  <li><a href="#reactive-반응형">Reactive</a></li>
  <li><a href="#responsive-vs-reactive">Responsive VS Reactive</a></li>
  <li><a href="#결합된-활용">결합된 활용</a></li>
</ul>

<hr />

<h2 id="responsive-반응형">Responsive (반응형)</h2>

<ul>
  <li>Responsive는 주로 UI/UX 디자인이나 프론트엔트 개발에서 사용되는 개념</li>
  <li>애플리케이션 또는 웹 페이지가 화면 크기, 해상도, 디바이스 특성에 따라 적절히 변하도록 설계된 것을 의미</li>
  <li>특징
    <ul>
      <li>주요 초점
        <ul>
          <li>레이아웃 및 디자인이 다양한 화면 환경(데스크톱, 태블릿, 모바일)에 적응</li>
        </ul>
      </li>
      <li>기술
        <ul>
          <li>주로 CSS, Flexbox, Grid, Viewport 등을 사용</li>
        </ul>
      </li>
      <li>목적
        <ul>
          <li>사용자 경험을 개선하고, 어떤 장치에서도 보기 좋은 디자인을 제공</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>예시
    <ul>
      <li>웹사이트 반응형 디자인
        <ul>
          <li>큰 화면에서는 여러 열(column)을 보여주고, 작은 화면에서는 한 열로 정렬</li>
          <li>이미지와 텍스트 사이즈가 디바이스 크기에 따라 자동으로 조정</li>
        </ul>
      </li>
      <li><a href="https://getbootstrap.kr/">부트스트랩 (Bootstrap)</a>
        <ul>
          <li>col-m-6와 같은 클래스 이름을 사용하여 화면 크기에 따라 레이아웃을 조정</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="reactive-반응형">Reactive (반응형)</h2>

<ul>
  <li>Reactive는 주로 프로그래밍 패러다임과 관련이 있음</li>
  <li>시스템이 변화를 감지하고 즉각적으로 동작을 수행하는 것을 의미</li>
  <li>특징
    <ul>
      <li>주요 초점
        <ul>
          <li>데이터와 상태의 변화에 따라 UI가 자동으로 업데이트</li>
        </ul>
      </li>
      <li>기술
        <ul>
          <li>Reactive Programming과 관련된 라이브러리와 프레임워크를 활용</li>
          <li>ex) RxJS, React, Vue, Svelte 등</li>
        </ul>
      </li>
      <li>목적
        <ul>
          <li>상태 관리와 데이터 흐름을 단순화하고, 사용자 입력 또는 데이터 변화에 실시간으로 반응</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>예시</p>

    <ul>
      <li>
        <p>React.js에서의 State변화</p>

        <ul>
          <li>사용자가 버튼을 클릭하면 상태가 변경되고, 해당 상태에 따라 UI가 즉각적으로 업데이트</li>
        </ul>

        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">Counter</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Count</span><span class="p">:</span> <span class="p">{</span><span class="nx">count</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)}</span><span class="o">&gt;</span><span class="nx">Increase</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>RxJS 스트림</p>

        <ul>
          <li>데이터를 스트림(stream) 형태로 처리하고, 데이터 변경에 실시간으로 반응</li>
        </ul>

        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">fromEvent</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">rxjs</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">myButton</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">clicks</span> <span class="o">=</span> <span class="nx">fromEvent</span><span class="p">(</span><span class="nx">button</span><span class="p">,</span> <span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">clicks</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Button clicked!</span><span class="dl">"</span><span class="p">));</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h2 id="responsive-vs-reactive">Responsive VS Reactive</h2>

<table>
  <thead>
    <tr>
      <th><strong>측면</strong></th>
      <th><strong>Responsive</strong></th>
      <th><strong>Reactive</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>적용 범위</td>
      <td>주로 UI/UX와 레이아웃 디자인</td>
      <td>상태 관리와 데이터 흐름</td>
    </tr>
    <tr>
      <td>목적</td>
      <td>화면 크기에 따른 레이아웃 및 스타일 변경</td>
      <td>데이터 및 상태 변경에 따른 즉각적인 반응</td>
    </tr>
    <tr>
      <td>사용 기술</td>
      <td>CSS, Flexbox, Grid 등</td>
      <td>React, RxJS, Vue 등 상태 기반 프레임워크</td>
    </tr>
    <tr>
      <td>초점</td>
      <td>디바이스별 최적화된 레이아웃 제공</td>
      <td>데이터의 흐름과 UI 동기화</td>
    </tr>
    <tr>
      <td>예시</td>
      <td>모바일에서 1열 레이아웃, 데스크톱에서 3열 레이아웃</td>
      <td>버튼 클릭 시 상태 업데이트 후 UI 리렌더링</td>
    </tr>
  </tbody>
</table>

<h2 id="결합된-활용">결합된 활용</h2>

<ul>
  <li>Responsive와 Reactive는 함께 사용될 때 더 큰 효과를 발휘한다.</li>
  <li>예를 들어, React.js로 만들어진 SPA(Single Page Application)에서 반응형 디자인(CSS)을 사용해 다양한 디바이스를 지원하면서, React의 상태 관리(State Management)를 통해 UI를 데이터와 동기화할 수 있음.</li>
  <li>
    <p>예시</p>

    <ul>
      <li>Reaponsive는 레이아웃과 UI에 초점을 맞추고, Reactive는 데이터와 상태 관리에 집중
        <ul>
          <li>둘이 상호보완적!</li>
        </ul>
      </li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">'</span><span class="s1">./App.css</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// Responsive 스타일 포함</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">isDarkMode</span><span class="p">,</span> <span class="nx">setIsDarkMode</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>

    <span class="k">return</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="s2">`app </span><span class="p">${</span><span class="nx">isDarkMode</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">dark-mode</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">''</span><span class="p">}</span><span class="s2">`</span><span class="p">}</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Welcome</span> <span class="nx">to</span> <span class="nx">the</span> <span class="nx">responsive</span> <span class="nx">and</span> <span class="nx">reactive</span> <span class="nx">app</span><span class="o">!&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">setIsDarkMode</span><span class="p">(</span><span class="o">!</span><span class="nx">isDarkMode</span><span class="p">)}</span><span class="o">&gt;</span>
                <span class="nx">Toggle</span> <span class="nx">Dark</span> <span class="nx">Mode</span>
            <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="p">);</span>
<span class="p">}</span>

<span class="cm">/* App.css */</span>
<span class="p">.</span><span class="nx">app</span> <span class="p">{</span>
    <span class="nl">padding</span><span class="p">:</span> <span class="mi">20</span><span class="nx">px</span><span class="p">;</span>
    <span class="nl">transition</span><span class="p">:</span> <span class="nx">background</span><span class="o">-</span><span class="nx">color</span> <span class="mf">0.3</span><span class="nx">s</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="nx">dark</span><span class="o">-</span><span class="nx">mode</span> <span class="p">{</span>
    <span class="nx">background</span><span class="o">-</span><span class="nx">color</span><span class="p">:</span> <span class="err">#</span><span class="mi">333</span><span class="p">;</span>
    <span class="nl">color</span><span class="p">:</span> <span class="err">#</span><span class="nx">fff</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">@</span><span class="nd">media</span> <span class="p">(</span><span class="nx">max</span><span class="o">-</span><span class="nx">width</span><span class="p">:</span> <span class="mi">768</span><span class="nx">px</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">.</span><span class="nx">app</span> <span class="p">{</span>
        <span class="nx">font</span><span class="o">-</span><span class="nx">size</span><span class="p">:</span> <span class="mi">14</span><span class="nx">px</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="miscellaneous" /><summary type="html"><![CDATA[프론트엔드 개발자 관점에서 Responsive와 Reactive의 뜻을 알아보자.]]></summary></entry><entry><title type="html">[HTML] CSS Float</title><link href="https://nan0silver.github.io/miscellaneous/2025-01-19-css-float/" rel="alternate" type="text/html" title="[HTML] CSS Float" /><published>2025-01-19T00:00:00+00:00</published><updated>2025-01-27T04:00:13+00:00</updated><id>https://nan0silver.github.io/miscellaneous/css-float</id><content type="html" xml:base="https://nan0silver.github.io/miscellaneous/2025-01-19-css-float/"><![CDATA[<ul>
  <li><a href="#css-float이란">CSS Float란</a></li>
  <li><a href="#clearfix">Clearfix</a></li>
  <li><a href="#clear-속성">Clear 속성</a></li>
  <li><a href="#clearfix-vs-clear-속성">Clearfix VS Clear</a></li>
  <li><a href="#float-사용-시-주의사항">Float 사용시 주의사항</a></li>
  <li><a href="#결론">결론</a></li>
</ul>

<hr />

<h2 id="css-float이란">CSS Float이란?</h2>

<ul>
  <li>
    <p><strong>Float의 기본 개념</strong></p>

    <ul>
      <li>요소가 normal flow에서 벗어나 부모 요소의 왼쪽 또는 오른쪽으로 이동한다.</li>
      <li>텍스트와 inline 요소들이 float된 요소 주변을 감싼다.</li>
    </ul>
  </li>
  <li>
    <p><strong>Float의 사용</strong></p>
    <ul>
      <li>전통적으로 다단 레이아웃을 만드는 데 사용된다.</li>
      <li>이미지나 다른 요소를 텍스트 흐름 내에 배치하는 데 유용</li>
    </ul>
  </li>
</ul>

<h2 id="clearfix">Clearfix</h2>

<ul>
  <li>Float의 문제점
    <ul>
      <li><strong>부모 요소 높이 붕괴</strong> float된 요소는 부모 요소의 높이에 영향을 주지 않아 부모 요소가 높이를 잃을 수 있다.</li>
    </ul>
  </li>
  <li>
    <p><strong>Clearfix</strong></p>

    <ul>
      <li>이 문제를 해결하기 위해 clearfix 기법이 사용된다.</li>
      <li><code class="language-plaintext highlighter-rouge">overflow: auto</code> 또는 <code class="language-plaintext highlighter-rouge">overflow: hidden</code>을 부모 요소에 적용한다.</li>
      <li>가상 요소 (<code class="language-plaintext highlighter-rouge">::after</code>)를 사용하여 float를 해제한다.</li>
    </ul>
  </li>
  <li><strong>Clearfix 방법:</strong>
    <ul>
      <li><strong>CSS를 이용한 Clearfix:</strong>
        <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.clearfix</span><span class="nd">::after</span> <span class="p">{</span>
  <span class="nl">content</span><span class="p">:</span> <span class="s1">""</span><span class="p">;</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>
  <span class="nl">clear</span><span class="p">:</span> <span class="nb">both</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>부모 요소에 <code class="language-plaintext highlighter-rouge">clearfix</code> 클래스를 추가하여 float 문제를 해결한다.</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="clear-속성">Clear 속성</h2>

<ul>
  <li><strong>핵심 문제</strong>: 특정 요소가 바로 앞에 있는 float 요소의 영향을 받아 원하는 위치에 배치되지 않을 수 있다.</li>
  <li><strong>clear 속성의 역할</strong>:
    <ul>
      <li>특정 요소가 이전의 float 요소 아래로 내려가도록 강제하여 float의 영향을 방지한다.</li>
      <li>float 요소 다음에 나오는 요소에 주로 사용된다.</li>
    </ul>
  </li>
</ul>

<p><strong>사용 예시 (clear 속성):</strong></p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.element</span> <span class="p">{</span>
  <span class="nl">clear</span><span class="p">:</span> <span class="nb">both</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">clear: both</code>: 왼쪽과 오른쪽의 float 요소로부터 벗어남.</li>
  <li>특정 요소 자체의 위치를 조정하기 위한 용도로 사용된다.</li>
</ul>

<hr />

<h2 id="clearfix-vs-clear-속성">Clearfix VS Clear 속성</h2>

<table>
  <thead>
    <tr>
      <th><strong>개념</strong></th>
      <th><strong>Clearfix</strong></th>
      <th><strong>Clear 속성</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>적용 대상</strong></td>
      <td>부모 요소가 float된 자식 요소를 감싸도록 해결</td>
      <td>특정 요소가 float 요소의 영향을 받지 않도록 해결</td>
    </tr>
    <tr>
      <td><strong>해결 문제</strong></td>
      <td>부모 요소 높이 붕괴 문제</td>
      <td>특정 요소의 위치 문제</td>
    </tr>
    <tr>
      <td><strong>주요 방식</strong></td>
      <td><code class="language-plaintext highlighter-rouge">overflow</code> 속성, <code class="language-plaintext highlighter-rouge">::after</code> 가상 요소</td>
      <td><code class="language-plaintext highlighter-rouge">clear: left/right/both</code> 속성</td>
    </tr>
    <tr>
      <td><strong>사용 위치</strong></td>
      <td>부모 요소</td>
      <td>float 요소 바로 다음에 나오는 요소</td>
    </tr>
  </tbody>
</table>

<hr />

<ul>
  <li><strong>부모 요소의 높이 붕괴 문제</strong>를 해결하려면 <strong>Clearfix</strong>를 사용한다.</li>
  <li><strong>요소가 float의 영향을 받아 잘못된 위치에 있을 때</strong>는 <strong>clear 속성</strong>을 사용한다.</li>
</ul>

<hr />

<h3 id="float-사용-시-주의사항">Float 사용 시 주의사항</h3>

<ul>
  <li>Float는 레이아웃의 기본적인 도구이지만, Flexbox나 Grid와 같은 현대적인 레이아웃 기술로 대체될 수 있다.</li>
  <li>복잡한 레이아웃에서는 유지보수가 어려워질 수 있다.</li>
  <li><strong>Float의 대안:</strong>
    <ul>
      <li><strong>Flexbox:</strong> 1차원 레이아웃에 적합하며, 요소의 정렬 및 간격 조절에 강력하다.</li>
      <li><strong>CSS Grid:</strong> 2차원 레이아웃에 적합하며, 행과 열을 기반으로 복잡한 레이아웃을 만들 수 있다.</li>
    </ul>
  </li>
</ul>

<h3 id="결론">결론</h3>

<ul>
  <li>CSS Float는 여전히 유용한 기술이지만, 현대적인 레이아웃 기술과 함께 이해하고 사용하는 것이 중요</li>
  <li>프로젝트의 요구 사항에 따라 적절한 레이아웃 기술을 선택해야 함</li>
</ul>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="miscellaneous" /><summary type="html"><![CDATA[웹 페이지 레이아웃을 만들때 사용되는 CSS Float에 대해 알아보자.]]></summary></entry><entry><title type="html">[HTML] CSS 문법</title><link href="https://nan0silver.github.io/miscellaneous/2025-01-18-css/" rel="alternate" type="text/html" title="[HTML] CSS 문법" /><published>2025-01-18T00:00:00+00:00</published><updated>2025-01-27T04:00:13+00:00</updated><id>https://nan0silver.github.io/miscellaneous/css</id><content type="html" xml:base="https://nan0silver.github.io/miscellaneous/2025-01-18-css/"><![CDATA[<ul>
  <li><a href="#css란">CSS란?</a></li>
  <li><a href="#css-문법-기초">CSS 문법 기초</a></li>
  <li><a href="#css-적용-방법">CSS 적용 방법</a></li>
  <li><a href="#css-프로퍼티-값의-단위">CSS 프로퍼티 값의 단위</a></li>
</ul>

<hr />

<h2 id="css란">CSS란?</h2>

<ul>
  <li>CSS : Cascading Style Sheets</li>
  <li>웹 페이지의 시각적 표현을 담당하는 스타일 언어
    <ul>
      <li>다양한 디바이스의 화면 크기에 대응하는 반응형 디자인 구현</li>
      <li>내용과 디자인의 분리로 유지보수성 향</li>
    </ul>
  </li>
  <li>HTML VS CSS
    <ul>
      <li>HTML
        <ul>
          <li>웹페이지 구조와 콘텐츠 정의</li>
        </ul>
      </li>
      <li>CSS
        <ul>
          <li>HTML 요소의 스타일과 레이아웃 지정</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="css-문법-기초">CSS 문법 기초</h2>

<ul>
  <li>
    <p>선택자 (Selector)</p>

    <ul>
      <li>스타일을 적용할 HTML 요소 지정</li>
      <li>
        <pre><code class="language-CSS">    /* 요소 선택자 */
    p {
    color: blue;
    }

    /* 클래스 선택자 */
    .highlight {
    background-color: yellow;
    }

    /* ID 선택자 */
    #header {
    font-size: 24px;
    }

    /* 전체 선택자 */
    * {
    margin: 0;
    padding: 0;
    }
    /* 무조건 뒤에 오는게 이긴다. 뒤로 갈수록 덮어씌우는 개념 */
    /* 아이디랑 클래스 중 아이디가 이김 */


</code></pre>
      </li>
    </ul>
  </li>
  <li>속성 (Property)
    <ul>
      <li>변경하고자 하는 스타일의 종류</li>
    </ul>
  </li>
  <li>값 (Value)
    <ul>
      <li>속성에 적용할 구체적인 스타일 값</li>
    </ul>
  </li>
  <li>선언 (Declaration)
    <ul>
      <li>속성과 값의 쌍</li>
    </ul>
  </li>
  <li>규칙 (Rule)
    <ul>
      <li>선택자와 선언 블록의 조합</li>
    </ul>
  </li>
</ul>

<pre><code class="language-CSS">    선택자 {
        속성: 값;
        속성: 값;
    }

    /* 구체적인 예시 */
    h1 {
        color: blue;
        font-size: 18px;
    }
</code></pre>

<h2 id="css-적용-방법">CSS 적용 방법</h2>

<ol>
  <li>인라인 스타일
    <ul>
      <li>HTML 요소 내부에 직접 스타일 적용</li>
    </ul>
  </li>
  <li>내부 스타일시트
    <ul>
      <li>head 섹션 내 style 태그에 CSS 작성</li>
    </ul>
  </li>
  <li>외부 스타일시트
    <ul>
      <li>별도의 .css파일에 스타일 정의</li>
      <li>HTML 문서의 head 섹션에서 링크로 연결</li>
    </ul>
  </li>
</ol>

<h2 id="css-프로퍼티-값의-단위">CSS 프로퍼티 값의 단위</h2>

<ul>
  <li>크기 단위
    <ul>
      <li>px : 픽셀 단위, 절대값</li>
      <li>% : 백분율 단위, 상대값</li>
      <li>em : 요소에 지정된 사이즈에 상대적인 배수 단위</li>
      <li>rem : 최상위 요소(html)의 사이즈 기준 배수 단위</li>
      <li>Viewport 단위 : vh, vw, vmin, vmax</li>
    </ul>
  </li>
</ul>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="miscellaneous" /><summary type="html"><![CDATA[웹 개발 생산성을 극대화하는 Emmet의 강력한 기능과 활용법을 알아보자.]]></summary></entry><entry><title type="html">[HTML] Emmet</title><link href="https://nan0silver.github.io/miscellaneous/2025-01-17-emmet/" rel="alternate" type="text/html" title="[HTML] Emmet" /><published>2025-01-17T00:00:00+00:00</published><updated>2025-01-27T04:00:13+00:00</updated><id>https://nan0silver.github.io/miscellaneous/emmet</id><content type="html" xml:base="https://nan0silver.github.io/miscellaneous/2025-01-17-emmet/"><![CDATA[<ol>
  <li><a href="#emmet이란">Emmet이란?</a></li>
  <li><a href="#emmet의-강력한-단축키---tab">Emmet의 강력한 단축키 !+Tab</a></li>
  <li><a href="#emmet-사용법-굉장히-쉽고-편리함">Emmet 사용법</a></li>
  <li><a href="#emmet-어디에서-사용할-수-있나요">Emmet, 어디에서 사용할 수 있나요?</a></li>
</ol>

<hr />

<h2 id="emmet이란">Emmet이란?</h2>

<p>Emmet은 웹 개발자가 HTML, CSS 코드를 훨씬 빠르고 효율적으로 작성할 수 있도록 도와주는 플러그인입니다. <br />
간단한 축약어를 입력하면 Emmet이 알아서 전체 코드로 확장해줍니다. 예를 들어, <code class="language-plaintext highlighter-rouge">ul&gt;li*5&gt;a</code>라고 입력하면 다음과 같은 HTML 코드가 자동으로 생성됩니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ul&gt;</span>
  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">""</span><span class="nt">&gt;&lt;/a&gt;&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">""</span><span class="nt">&gt;&lt;/a&gt;&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">""</span><span class="nt">&gt;&lt;/a&gt;&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">""</span><span class="nt">&gt;&lt;/a&gt;&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">""</span><span class="nt">&gt;&lt;/a&gt;&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div></div>

<p>Emmet을 사용하면 이런 불필요한 작업을 줄이고, 개발자는 오롯이 로직과 디자인에 집중할 수 있습니다.</p>

<h2 id="emmet의-강력한-단축키---tab">Emmet의 강력한 단축키 ! + Tab</h2>

<p>Emmet을 사용하는 가장 대표적인 사례 중 하나는 ! + Tab 단축키입니다. 이 단축키를 입력하면 기본 HTML 문서의 구조가 즉시 생성됩니다. 예를 들어, 빈 파일에서 !를 입력한 후 Tab 키를 누르면 다음과 같은 기본 HTML 문서가 자동으로 작성됩니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>Document<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>이 기본 구조는 웹 페이지를 시작할 때 반드시 필요한 요소들로 구성되어 있으며, 직접 입력하는 번거로움을 크게 줄여줍니다. 이 기능만 사용해도 초보자부터 숙련된 개발자까지 작업 시간을 크게 단축할 수 있습니다.</p>

<h2 id="emmet-사용법-굉장히-쉽고-편리함">Emmet 사용법 (굉장히 쉽고 편리함)</h2>

<p>Emmet의 문법은 간단하면서도 강력합니다. 몇 가지 기본 규칙만 익히면 금방 능숙하게 사용할 수 있습니다.</p>

<ul>
  <li><strong>자식 요소:</strong> <code class="language-plaintext highlighter-rouge">&gt;</code> 기호를 사용하여 자식 요소를 생성합니다. 예를 들어, <code class="language-plaintext highlighter-rouge">div&gt;p</code>는 <code class="language-plaintext highlighter-rouge">&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</code>로 확장됩니다.</li>
  <li><strong>형제 요소:</strong> <code class="language-plaintext highlighter-rouge">+</code> 기호를 사용하여 형제 요소를 생성합니다. 예를 들어, <code class="language-plaintext highlighter-rouge">h2+p</code>는 <code class="language-plaintext highlighter-rouge">&lt;h2&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;</code>로 확장됩니다.</li>
  <li><strong>반복 요소:</strong> <code class="language-plaintext highlighter-rouge">*</code> 기호를 사용하여 요소를 반복 생성합니다. 예를 들어, <code class="language-plaintext highlighter-rouge">li*3</code>는 <code class="language-plaintext highlighter-rouge">&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;</code>로 확장됩니다.</li>
  <li><strong>그룹화:</strong> <code class="language-plaintext highlighter-rouge">()</code> 괄호를 사용하여 요소들을 그룹으로 묶을 수 있습니다. 예를 들어, <code class="language-plaintext highlighter-rouge">div&gt;(header&gt;ul&gt;li*2)+footer</code>는 다음과 같이 확장됩니다.</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div&gt;</span>
  <span class="nt">&lt;header&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
      <span class="nt">&lt;li&gt;&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;&lt;/li&gt;</span>
    <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;/header&gt;</span>
  <span class="nt">&lt;footer&gt;&lt;/footer&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<ul>
  <li><strong>속성 추가:</strong> <code class="language-plaintext highlighter-rouge">[]</code> 괄호를 사용하여 요소에 속성을 추가할 수 있습니다. 예를 들어, <code class="language-plaintext highlighter-rouge">a[href=#]</code>는 <code class="language-plaintext highlighter-rouge">&lt;a href="#"&gt;&lt;/a&gt;</code>로 확장됩니다. 여러 속성을 추가하려면 <code class="language-plaintext highlighter-rouge">a[href=# title=링크]</code>와 같이 작성합니다.</li>
  <li><strong>클래스 및 ID 추가:</strong> CSS 선택자처럼 <code class="language-plaintext highlighter-rouge">.</code> 기호로 클래스를, <code class="language-plaintext highlighter-rouge">#</code> 기호로 ID를 추가할 수 있습니다. 예를 들어, <code class="language-plaintext highlighter-rouge">div.container</code>는 <code class="language-plaintext highlighter-rouge">&lt;div class="container"&gt;&lt;/div&gt;</code>로, <code class="language-plaintext highlighter-rouge">div#header</code>는 <code class="language-plaintext highlighter-rouge">&lt;div id="header"&gt;&lt;/div&gt;</code>로 확장됩니다. 여러 개의 클래스를 추가하려면 <code class="language-plaintext highlighter-rouge">div.container.main</code>처럼 작성합니다.</li>
  <li><strong>텍스트 내용 추가:</strong> <code class="language-plaintext highlighter-rouge">{}</code> 중괄호 안에 텍스트 내용을 입력할 수 있습니다. 예를 들어, <code class="language-plaintext highlighter-rouge">p{안녕하세요}</code>는 <code class="language-plaintext highlighter-rouge">&lt;p&gt;안녕하세요&lt;/p&gt;</code>로 확장됩니다.</li>
</ul>

<p>이 외에도 다양한 기능들이 있지만, 이 정도만 알아도 Emmet의 강력함을 충분히 경험할 수 있습니다.</p>

<h2 id="emmet-어디에서-사용할-수-있나요">Emmet, 어디에서 사용할 수 있나요?</h2>

<p>Emmet은 대부분의 텍스트 에디터와 IDE에서 플러그인 형태로 제공됩니다. Visual Studio Code, Sublime Text, Atom, IntelliJ IDEA 등 유명한 에디터에서는 기본적으로 Emmet을 지원하거나, 간단한 설치만으로 사용할 수 있습니다.</p>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="miscellaneous" /><summary type="html"><![CDATA[웹 개발 생산성을 극대화하는 Emmet의 강력한 기능과 활용법을 알아보자.]]></summary></entry></feed>