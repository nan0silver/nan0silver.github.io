<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko-KR, en-US"><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://nan0silver.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://nan0silver.github.io/" rel="alternate" type="text/html" hreflang="ko-KR, en-US" /><updated>2025-02-05T02:46:22+00:00</updated><id>https://nan0silver.github.io/feed.xml</id><title type="html">NAHYUN BLOG</title><subtitle>Nahyun’s Development Blog
Hi, I’m Nahyun Eun, a student from South Korea studying backend development with Java.  In this blog, I organize and share my learning journey in programming, with notes and insights on backend concepts and practical examples.
 Follow along as I dive into the world of coding!
</subtitle><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><entry><title type="html">[JavaScript] 함수</title><link href="https://nan0silver.github.io/javascript/2025-02-04-test/" rel="alternate" type="text/html" title="[JavaScript] 함수" /><published>2025-02-04T00:00:00+00:00</published><updated>2025-02-05T02:45:38+00:00</updated><id>https://nan0silver.github.io/javascript/test</id><content type="html" xml:base="https://nan0silver.github.io/javascript/2025-02-04-test/"><![CDATA[<ul>
  <li><a href="#함수-function">함수 (function)</a></li>
  <li><a href="#화살표-함수">화살표 함수</a></li>
  <li><a href="#고차-함수">고차 함수 (map, filter, reduce)</a></li>
  <li><a href="#구조-분해-할당">구조 분해 할당</a></li>
</ul>

<hr />

<h2 id="함수-function">함수 (function)</h2>

<ul>
  <li>
    <p>함수 선언</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">function</code>으로 선언</li>
      <li>호이스팅 (hoisting)</li>
    </ul>
  </li>
</ul>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="javascript" /><summary type="html"><![CDATA[JavaScript의 함수에 대해 알아보자.]]></summary></entry><entry><title type="html">[JavaScript] 함수</title><link href="https://nan0silver.github.io/miscellaneous/2025-01-30-js-function/" rel="alternate" type="text/html" title="[JavaScript] 함수" /><published>2025-01-30T00:00:00+00:00</published><updated>2025-02-05T02:45:38+00:00</updated><id>https://nan0silver.github.io/miscellaneous/js-function</id><content type="html" xml:base="https://nan0silver.github.io/miscellaneous/2025-01-30-js-function/"><![CDATA[<ul>
  <li><a href="#함수-function">함수 (function)</a></li>
  <li><a href="#화살표-함수">화살표 함수</a></li>
  <li><a href="#고차-함수">고차 함수 (map, filter, reduce)</a></li>
  <li><a href="#구조-분해-할당">구조 분해 할당</a></li>
</ul>

<hr />

<h2 id="함수-function">함수 (function)</h2>

<ul>
  <li>
    <p>함수 선언</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">function</code>으로 선언</li>
      <li>
        <p>호이스팅 (hoisting)</p>

        <ul>
          <li>JavaScript에서 변수, 함수 선언, 클래스 등의 선언이 코드 실행 전에 메모리에 미리 할당되는 현상
            <ul>
              <li>코드에서 선언이 끌어올려진(hoisted) 것처럼 동작</li>
            </ul>
          </li>
          <li>
            <table>
              <thead>
                <tr>
                  <th>변수 타입</th>
                  <th>선언 Hoisting</th>
                  <th>초기화 여부</th>
                  <th>선언 전 접근</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td><code class="language-plaintext highlighter-rouge">var</code></td>
                  <td>✅ O</td>
                  <td>✅ (undefined)</td>
                  <td>✅ 가능 (undefined 반환)</td>
                </tr>
                <tr>
                  <td><code class="language-plaintext highlighter-rouge">let</code></td>
                  <td>✅ O</td>
                  <td>❌ (TDZ 존재)</td>
                  <td>❌ ReferenceError</td>
                </tr>
                <tr>
                  <td><code class="language-plaintext highlighter-rouge">const</code></td>
                  <td>✅ O</td>
                  <td>❌ (TDZ 존재)</td>
                  <td>❌ ReferenceError</td>
                </tr>
              </tbody>
            </table>
          </li>
          <li>함수 선언 이전에 호출이 가능</li>
        </ul>
      </li>
      <li>
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">welcomeMessage</span><span class="p">(</span><span class="nx">username</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="dl">"</span><span class="s2">Hi, ${username}!</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">welcomeMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Lily</span><span class="dl">"</span><span class="p">));</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>함수 표현식</p>
    <ul>
      <li>이름이 없는 함수를 만들어 변수에 할당하여 정의</li>
      <li>호이스팅되지 않으므로, 함수 정의 이후에만 호출 가능</li>
    </ul>
  </li>
</ul>

<h2 id="화살표-함수">화살표 함수</h2>

<ul>
  <li>ES6에서 도입된 간결한 함수 표현 방식</li>
  <li>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//ex1</span>
<span class="kd">const</span> <span class="nx">welcomeMessage</span> <span class="o">=</span> <span class="p">(</span><span class="nx">username</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="dl">"</span><span class="s2">Hi, ${username}!</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">welcomeMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Lily</span><span class="dl">"</span><span class="p">));</span>

<span class="c1">//ex2</span>
<span class="kd">const</span> <span class="nx">calculateArea</span> <span class="o">=</span> <span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">area</span> <span class="o">=</span> <span class="nx">width</span> <span class="o">*</span> <span class="nx">height</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">area</span><span class="p">;</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">calculateArea</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">));</span> <span class="c1">// 출력: 50</span>
</code></pre></div>    </div>
  </li>
  <li>함수 표현식보다 간결하게 작성 가능함</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">this</code> 바인딩이 화살표 함수의 정의 위치에서 고정되는 특성을 가짐</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">this</code> 바인딩 (Binding)</p>

        <ul>
          <li><code class="language-plaintext highlighter-rouge">this</code> 키워드가 특정 실행 문맥(Excution Context)에서 어떤 객체를 가리키는지 결정되는 과정</li>
          <li>JavaScript에서 <code class="language-plaintext highlighter-rouge">this</code>는 어떻게, 어디서 호출되었느냐에 따라 값이 달라짐</li>
          <li>전통적인 함수와 화살표 함수의 <code class="language-plaintext highlighter-rouge">this</code> 바인딩 방식이 다름
            <ul>
              <li>전통적인 함수
                <ul>
                  <li>호출 맥락에 따라 this가 변경될 수 있음</li>
                </ul>
              </li>
              <li>화살표 함수
                <ul>
                  <li>this가 고정되어 예상치 못한 this의 문제를 방지함</li>
                </ul>
              </li>
            </ul>
          </li>
          <li>
            <h3 id="기본적인-this-바인딩-규칙">기본적인 this 바인딩 규칙</h3>

            <ul>
              <li>
                <table>
                  <thead>
                    <tr>
                      <th>호출 방식</th>
                      <th><code class="language-plaintext highlighter-rouge">this</code>가 가리키는 대상</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>일반 함수 호출</td>
                      <td><code class="language-plaintext highlighter-rouge">window</code> (브라우저) 또는 <code class="language-plaintext highlighter-rouge">undefined</code> (strict mode)</td>
                    </tr>
                    <tr>
                      <td>메서드 호출 (객체 안에서)</td>
                      <td>해당 객체</td>
                    </tr>
                    <tr>
                      <td>생성자 함수</td>
                      <td>새로 생성된 인스턴스</td>
                    </tr>
                    <tr>
                      <td><code class="language-plaintext highlighter-rouge">call</code>, <code class="language-plaintext highlighter-rouge">apply</code>, <code class="language-plaintext highlighter-rouge">bind</code> 사용</td>
                      <td>명시적으로 지정된 객체</td>
                    </tr>
                    <tr>
                      <td>화살표 함수</td>
                      <td>부모(외부) 스코프의 <code class="language-plaintext highlighter-rouge">this</code></td>
                    </tr>
                  </tbody>
                </table>
              </li>
              <li>예시</li>
            </ul>

            <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//일반 함수 호출</span>
    <span class="kd">function</span> <span class="nx">showThis</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">showThis</span><span class="p">();</span> <span class="c1">//브라우저: window, strict mode: undefined</span>

    <span class="c1">//화살표 함수</span>
    <span class="kd">const</span> <span class="nx">user2</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Lily</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">greet</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">arrow</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
            <span class="p">};</span>
            <span class="nx">arrow</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">};</span>
    <span class="nx">user2</span><span class="p">.</span><span class="nx">greet</span><span class="p">();</span> <span class="c1">//"Lily"</span>
    <span class="s2">```
</span></code></pre></div>            </div>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="고차-함수">고차 함수</h2>

<h3 id="map">map</h3>

<ul>
  <li>배열의 각 요소를 변환하여 새로운 배열 생성</li>
  <li>원본 배열은 유지</li>
  <li>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">num</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">mul</span> <span class="o">=</span> <span class="nx">num</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">n</span> <span class="o">*</span> <span class="mi">10</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">mul</span><span class="p">);</span> <span class="c1">//[ 10, 20, 30 ]</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="filter">filter</h3>

<ul>
  <li>배열에서 조건에 맞는 요소만 반환하여 새로운 배열을 생성</li>
  <li>원본 배열은 유지</li>
  <li>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">words</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">apple</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">banana</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">avocado</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">cherry</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">apricot</span><span class="dl">"</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">aWords</span> <span class="o">=</span> <span class="nx">words</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">word</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">word</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">));</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">aWords</span><span class="p">);</span> <span class="c1">// ["apple", "avocado", "apricot"]</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="reduce">reduce</h3>

<ul>
  <li>배열의 모든 요소를 순회하며 누적하여 단일 값(accumulator) 생성</li>
  <li>초기값 설정 가능</li>
  <li>집계 연산에 유용</li>
  <li>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">product</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">num</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">acc</span> <span class="o">*</span> <span class="nx">num</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">product</span><span class="p">);</span> <span class="c1">// 120</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="구조-분해-할당">구조 분해 할당</h2>

<ul>
  <li>배열 구조 분해 할당
    <ul>
      <li>배열을 개별 변수로 분해 가능</li>
      <li>스프레드 연산자(<code class="language-plaintext highlighter-rouge">...</code>)로 나머지 요소 처리 가능</li>
      <li>
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="p">...</span><span class="nx">remaining</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">];</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">remaining</span><span class="p">);</span> <span class="c1">// 10 20 [30, 40, 50]</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>객체 구조 분해 할당</p>

    <ul>
      <li>객체에서 속성을 변후로 추출 가능</li>
      <li>기본값 설정 가능</li>
      <li>
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">brand</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">year</span> <span class="o">=</span> <span class="mi">2023</span> <span class="p">}</span> <span class="o">=</span> <span class="p">{</span> <span class="na">brand</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Tesla</span><span class="dl">"</span><span class="p">,</span> <span class="na">model</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Model S</span><span class="dl">"</span> <span class="p">};</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">brand</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">year</span><span class="p">);</span> <span class="c1">// Tesla Model S 2023</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>중첩된 객체의 속성도 분해하여 사용 가능</p>

        <ul>
          <li>
            <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">info</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">firstName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Alice</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Johnson</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">28</span><span class="p">,</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="p">{</span>
  <span class="na">info</span><span class="p">:</span> <span class="p">{</span> <span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span> <span class="p">},</span>
  <span class="nx">age</span><span class="p">,</span>
<span class="p">}</span> <span class="o">=</span> <span class="nx">person</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">,</span> <span class="nx">age</span><span class="p">);</span> <span class="c1">// Alice Johnson 28</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>함수에서 구조 분해 활용</p>

    <ul>
      <li>
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">displayCar</span><span class="p">({</span> <span class="nx">brand</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">year</span> <span class="p">})</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`The car is a </span><span class="p">${</span><span class="nx">year</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nx">brand</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nx">model</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">displayCar</span><span class="p">({</span> <span class="na">brand</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Toyota</span><span class="dl">"</span><span class="p">,</span> <span class="na">model</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Corolla</span><span class="dl">"</span><span class="p">,</span> <span class="na">year</span><span class="p">:</span> <span class="mi">2022</span> <span class="p">});</span>
<span class="c1">// The car is a 2022 Toyota Corolla</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="miscellaneous" /><summary type="html"><![CDATA[JavaScript의 함수에 대해 알아보자.]]></summary></entry><entry><title type="html">[JAVA] Generic</title><link href="https://nan0silver.github.io/java/2025-01-29-generic/" rel="alternate" type="text/html" title="[JAVA] Generic" /><published>2025-01-29T00:00:00+00:00</published><updated>2025-02-05T02:45:38+00:00</updated><id>https://nan0silver.github.io/java/generic</id><content type="html" xml:base="https://nan0silver.github.io/java/2025-01-29-generic/"><![CDATA[<ul>
  <li><a href="#generic이란">Generic이란?</a></li>
  <li><a href="#generic의-장점">Generic의 장점</a></li>
  <li><a href="#generic-사용법">Generic 사용법</a></li>
</ul>

<hr />

<h2 id="generic이란">Generic이란?</h2>

<ul>
  <li>클래스나 메서드에서 사용할 데이터 타입을 지정하지 않고, 나중에 사용할 때 타입을 결정하는 기능
    <ul>
      <li>하나의 값이 여러 다른 데이터 타입들을 가질 수 있도록 하는 방법</li>
      <li>클래스 내부에서 지정하는 것이 아닌, 외부에서 사용자에 의해 지정되는 것을 의미
        <ul>
          <li>specific 타입을 미리 지정해주는 것이 아닌 필요에 의해 지정할 수 있도록 하는 generic 타입</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>제네릭을 사용하면 코드의 재사용성을 높이고, 타입 안정성을 보장할 수 있음</li>
  <li><code class="language-plaintext highlighter-rouge">ArrayList&lt;T&gt;</code>, <code class="language-plaintext highlighter-rouge">HashMap&lt;K, V&gt;</code>같은 자바 컬렉션 프레임워크에서 많이 사용됨</li>
</ul>

<h2 id="generic의-장점">Generic의 장점</h2>

<ol>
  <li>타입 안정성 (Type Safety) 보장
    <ul>
      <li>제네릭을 사용하면 컴파일 시점에 타입을 검사해서 타입 오류 방지 가능</li>
      <li>예를 들어, ArrayList에 String만 저장하도록 지정하면 다른 타입을 추가하는 실수를 막을 수 있음</li>
    </ul>
  </li>
  <li>형변환(Casting) 불필요
    <ul>
      <li>제네릭을 사용하면 클래스 외부에서 타입을 지정해주기 때문에 따로 타입을 체크하고 변환할 필요 없음</li>
      <li>관리하기 편함</li>
    </ul>
  </li>
  <li>코드의 재사용성 증가
    <ul>
      <li>같은 로직을 다양한 데이터 타입에 대해 사용할 수 있어 코드의 중복을 줄일 수 있음</li>
    </ul>
  </li>
</ol>

<h2 id="generic-사용법">Generic 사용법</h2>

<ul>
  <li>
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>

  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">WithGenerics</span> <span class="o">{</span>
      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
          <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span> <span class="c1">//제네릭 사용</span>
          <span class="c1">//ArrayList list = new ArrayList(); 제네릭 미사용</span>

          <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Hello"</span><span class="o">);</span>
          <span class="c1">//list.add(123);  오류 발생 (타입 안정성 보장)</span>
          <span class="c1">//제네릭을 사용하지 않으면 오류 발생 X -&gt; 문제 발생 가능</span>

          <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">//형변환 없이 바로 사용 가능</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
      <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>제네릭 클래스 만들기</p>

    <ul>
      <li>
        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 제네릭 클래스 선언 (T는 타입 매개변수)</span>
  <span class="kd">class</span> <span class="nc">Box</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
      <span class="kd">private</span> <span class="no">T</span> <span class="n">value</span><span class="o">;</span>

      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setValue</span><span class="o">(</span><span class="no">T</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
          <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
      <span class="o">}</span>

      <span class="kd">public</span> <span class="no">T</span> <span class="nf">getValue</span><span class="o">()</span> <span class="o">{</span>
          <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
      <span class="o">}</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">GenericExample</span> <span class="o">{</span>
      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
          <span class="nc">Box</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">stringBox</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">&lt;&gt;();</span>
          <span class="c1">//String으로 구체적인 타입 지정</span>

          <span class="n">stringBox</span><span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="s">"Hello"</span><span class="o">);</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stringBox</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>

          <span class="nc">Box</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">intBox</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">&lt;&gt;();</span>
          <span class="n">intBox</span><span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">intBox</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
      <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>제네릭 메서드 만들기</p>

    <ul>
      <li>
        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nc">Util</span> <span class="o">{</span>
      <span class="c1">// 제네릭 메서드 선언</span>
      <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="nf">printData</span><span class="o">(</span><span class="no">T</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
      <span class="o">}</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">GenericMethodExample</span> <span class="o">{</span>
      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
          <span class="nc">Util</span><span class="o">.</span><span class="na">printData</span><span class="o">(</span><span class="s">"Hello"</span><span class="o">);</span> <span class="c1">// String 타입</span>
          <span class="nc">Util</span><span class="o">.</span><span class="na">printData</span><span class="o">(</span><span class="mi">123</span><span class="o">);</span> <span class="c1">// Integer 타입</span>
          <span class="nc">Util</span><span class="o">.</span><span class="na">printData</span><span class="o">(</span><span class="mf">3.14</span><span class="o">);</span> <span class="c1">// Double 타입</span>
      <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>제네릭 타입 제한 (Bounded Type Parameter)</p>

    <ul>
      <li>
        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// Number를 상속받은 타입만 사용 가능 (Integer, Double 등)</span>
  <span class="kd">class</span> <span class="nc">NumberBox</span><span class="o">&lt;</span><span class="no">T</span> <span class="kd">extends</span> <span class="nc">Number</span><span class="o">&gt;</span> <span class="o">{</span>
      <span class="kd">private</span> <span class="no">T</span> <span class="n">number</span><span class="o">;</span>

      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setNumber</span><span class="o">(</span><span class="no">T</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
          <span class="k">this</span><span class="o">.</span><span class="na">number</span> <span class="o">=</span> <span class="n">number</span><span class="o">;</span>
      <span class="o">}</span>

      <span class="kd">public</span> <span class="no">T</span> <span class="nf">getNumber</span><span class="o">()</span> <span class="o">{</span>
          <span class="k">return</span> <span class="n">number</span><span class="o">;</span>
      <span class="o">}</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">BoundedGenericExample</span> <span class="o">{</span>
      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
          <span class="nc">NumberBox</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">intBox</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NumberBox</span><span class="o">&lt;&gt;();</span>
          <span class="n">intBox</span><span class="o">.</span><span class="na">setNumber</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">intBox</span><span class="o">.</span><span class="na">getNumber</span><span class="o">());</span>

          <span class="nc">NumberBox</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">&gt;</span> <span class="n">doubleBox</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NumberBox</span><span class="o">&lt;&gt;();</span>
          <span class="n">doubleBox</span><span class="o">.</span><span class="na">setNumber</span><span class="o">(</span><span class="mf">3.14</span><span class="o">);</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">doubleBox</span><span class="o">.</span><span class="na">getNumber</span><span class="o">());</span>

          <span class="c1">// NumberBox&lt;String&gt; strBox = new NumberBox&lt;&gt;(); // 오류 발생 (String은 Number가 아님)</span>
      <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>와일드카드 (<code class="language-plaintext highlighter-rouge">?</code> - 제네릭 타입 미지정)</p>

    <ul>
      <li>특정 타입을 제한하지 않고 유연하게 사용하고 싶은 경우</li>
      <li>
        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

  <span class="kd">class</span> <span class="nc">WildcardExample</span> <span class="o">{</span>
      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">printList</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;?&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 와일드카드 사용</span>
          <span class="k">for</span> <span class="o">(</span><span class="nc">Object</span> <span class="n">obj</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
              <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
          <span class="o">}</span>
      <span class="o">}</span>

      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
          <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">stringList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
          <span class="n">stringList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Apple"</span><span class="o">);</span>
          <span class="n">stringList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Banana"</span><span class="o">);</span>

          <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">intList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
          <span class="n">intList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
          <span class="n">intList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>

          <span class="n">printList</span><span class="o">(</span><span class="n">stringList</span><span class="o">);</span> <span class="c1">// 가능</span>
          <span class="n">printList</span><span class="o">(</span><span class="n">intList</span><span class="o">);</span> <span class="c1">// 가능</span>
      <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="java" /><summary type="html"><![CDATA[java에서 Generic이 무엇인지 알아보자.]]></summary></entry><entry><title type="html">[Etc] TDD (Test-Driven Development, 테스트 주도 개발)</title><link href="https://nan0silver.github.io/miscellaneous/2025-01-28-tdd/" rel="alternate" type="text/html" title="[Etc] TDD (Test-Driven Development, 테스트 주도 개발)" /><published>2025-01-28T00:00:00+00:00</published><updated>2025-02-05T02:45:38+00:00</updated><id>https://nan0silver.github.io/miscellaneous/tdd</id><content type="html" xml:base="https://nan0silver.github.io/miscellaneous/2025-01-28-tdd/"><![CDATA[<ul>
  <li><a href="#tdd-test-driven-development란">TDD란?</a></li>
  <li><a href="#tdd의-주요-과정">TDD의 주요 과정</a></li>
  <li><a href="#tdd의-장점">TDD의 장점</a></li>
  <li><a href="#tdd-예제-java">TDD 예제 (Java)</a></li>
  <li><a href="#tdd-vs-전통적인-개발-방식">TDD VS 전통적인 개발 방식</a></li>
  <li><a href="#tdd가-필요한-경우">TDD가 필요한 경우</a></li>
  <li><a href="#tdd의-단점">TDD의 단점</a></li>
  <li><a href="#xunit">xUnit</a></li>
</ul>

<hr />

<h2 id="tdd-test-driven-development란">TDD (Test-Driven Development)란?</h2>

<blockquote>
  <p>테스트 주도 개발</p>
</blockquote>

<ul>
  <li>소프트웨어 개발 방법론 중 하나로, 테스트 코드를 먼저 작성한 후 실제 기능을 구현하는 방식
    <ul>
      <li><strong>테스트 먼저, 코드 작성 나중!</strong></li>
    </ul>
  </li>
  <li>짧은 개발 주기의 반복에 의존하는 개발 프로세스</li>
  <li>애자일 방법론 중 하나인 eXtream Programming(XP)의 “Test-First” 개념에 기반을 둔 단순한 설계를 중요시함
    <ul>
      <li>eXtream Programming(XP)
        <ul>
          <li>미래에 대한 예측을 최대한 하지 않고, 지속적으로 프로토타입을 완성하는 애자일 방법론 중 하나</li>
          <li>추가 요구사항이 생기더라도, 실시간으로 반영할 수 있음</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="tdd의-주요-과정">TDD의 주요 과정</h2>

<ul>
  <li><strong>Red-Green-Refactor</strong> 세 단계 반복</li>
</ul>

<h3 id="1️⃣-red-실패하는-테스트-작성">1️⃣ Red (실패하는 테스트 작성)</h3>

<ul>
  <li>구현할 기능에 대한 테스트 코드 작성</li>
  <li>실제 기능이 이 시점에서는 없기 때문에 테스트는 실패
    <ul>
      <li>빨간색 = 실패</li>
    </ul>
  </li>
</ul>

<h3 id="2️⃣-green-코드-작성-후-테스트-통과">2️⃣ Green (코드 작성 후 테스트 통과)</h3>

<ul>
  <li>테스트를 통과할 최소한의 코드만 작성</li>
  <li>코드가 정상적으로 동작하여 테스트가 성공하면 다음 단계로 넘어감
    <ul>
      <li>초록색 = 성공</li>
    </ul>
  </li>
</ul>

<h3 id="3️⃣-refactor-리팩토링">3️⃣ Refactor (리팩토링)</h3>

<ul>
  <li>코드의 중복을 제거하고 더 나은 구조로 개선</li>
  <li>테스트를 다시 실행하여 리팩토링 후에도 테스트가 성공하는지 확인</li>
  <li>성능 개선, 코드 가독성 높이기</li>
</ul>

<h2 id="tdd의-장점">TDD의 장점</h2>

<ul>
  <li>버그 감소
    <ul>
      <li>미리 테스트를 작성하기 때문에 오류를 조기에 발견할 수 있음</li>
    </ul>
  </li>
  <li>리팩토링 용이
    <ul>
      <li>테스트 코드가 보장되므로 안심하고 코드를 사용 가능</li>
    </ul>
  </li>
  <li>유지보수성 향상
    <ul>
      <li>코드가 변경될 때 기존 기능이 정상적으로 동작하는지 확인 가능</li>
    </ul>
  </li>
  <li>문서 역할
    <ul>
      <li>테스트 코드 자체가 기능 명세서 역할을 함</li>
    </ul>
  </li>
</ul>

<h2 id="tdd-예제-java">TDD 예제 (Java)</h2>

<h3 id="1-실패하는-테스트-작성">1. 실패하는 테스트 작성</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">jupiter</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.*;</span>

    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">CalculatorTest</span> <span class="o">{</span>
        <span class="nd">@Test</span>
        <span class="kt">void</span> <span class="nf">testAddition</span><span class="o">()</span> <span class="o">{</span>
            <span class="nc">Calculator</span> <span class="n">calc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Calculator</span><span class="o">();</span>
            <span class="n">assertEquals</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="n">calc</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>현재 Calculator 클래스와 add() 메서드가 없어서 테스트 실패</li>
</ul>

<h3 id="2-최소한의-코드-작성-테스트-통과">2. 최소한의 코드 작성 (테스트 통과)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Calculator</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">add</span> <span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>이제 테스트 실행하면 성공!</li>
</ul>

<h3 id="3-리팩토링">3. 리팩토링</h3>

<ul>
  <li>코드가 복잡한 경우 성능 최적화나 코드 구조 개선 가능</li>
</ul>

<h2 id="tdd-vs-전통적인-개발-방식">TDD VS 전통적인 개발 방식</h2>

<table>
  <thead>
    <tr>
      <th>구분</th>
      <th>전통적인 개발 방식</th>
      <th>TDD</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>순서</strong></td>
      <td>기능 구현 → 테스트 작성</td>
      <td>테스트 작성 → 기능 구현</td>
    </tr>
    <tr>
      <td><strong>목적</strong></td>
      <td>기능 개발 후 버그 찾기</td>
      <td>처음부터 버그 방지</td>
    </tr>
    <tr>
      <td><strong>유지보수</strong></td>
      <td>테스트 부족 시 리팩토링 어려움</td>
      <td>안전한 리팩토링 가능</td>
    </tr>
  </tbody>
</table>

<h2 id="tdd가-필요한-경우">TDD가 필요한 경우</h2>

<ul>
  <li>복잡한 로직이 포함된 코드
    <ul>
      <li>알고리즘, 비즈니스 로직</li>
    </ul>
  </li>
  <li>장기적으로 유지보수해야하는 프로젝트</li>
  <li>협업이 필요한 개발 환경
    <ul>
      <li>테스트 코드가 문서 역할을 하므로 이해하기 쉬움</li>
    </ul>
  </li>
</ul>

<h2 id="tdd의-단점">TDD의 단점</h2>

<ul>
  <li>간단한 코드에는 불필요한 오버헤드가 발생할 수 있음</li>
  <li>초기 개발 속도가 느려질 수 있음</li>
</ul>

<h2 id="xunit">xUnit</h2>

<ul>
  <li>단위 테스트를 위한 프레임워크</li>
  <li>JUnit(for JAVA)을 시작으로 여러 xUnit 프레임워크가 탄생함</li>
</ul>

<table>
  <thead>
    <tr>
      <th>xUnit 이름</th>
      <th>해당 언어</th>
      <th>관련 사이트</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>CUnit</strong></td>
      <td>C</td>
      <td><a href="http://cunit.sourceforge.net/">CUnit</a></td>
    </tr>
    <tr>
      <td><strong>CppUnit</strong></td>
      <td>C++</td>
      <td><a href="https://sourceforge.net/projects/cppunit/">CppUnit</a></td>
    </tr>
    <tr>
      <td><strong>PHPUnit</strong></td>
      <td>PHP</td>
      <td><a href="https://phpunit.de/">PHPUnit</a></td>
    </tr>
    <tr>
      <td><strong>PyUnit</strong></td>
      <td>Python</td>
      <td><a href="http://pyunit.sourceforge.net/">PyUnit</a></td>
    </tr>
    <tr>
      <td><strong>JUnit</strong></td>
      <td>Java</td>
      <td><a href="http://junit.org/">JUnit</a></td>
    </tr>
  </tbody>
</table>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="miscellaneous" /><summary type="html"><![CDATA[TDD (Test-Driven Development)에 대해 알아보자.]]></summary></entry><entry><title type="html">[JavaScript] 단축 평가 (Short-circuit evaluation)</title><link href="https://nan0silver.github.io/miscellaneous/2025-01-27-javascript-short-circuit-evaluation/" rel="alternate" type="text/html" title="[JavaScript] 단축 평가 (Short-circuit evaluation)" /><published>2025-01-27T00:00:00+00:00</published><updated>2025-02-05T02:45:38+00:00</updated><id>https://nan0silver.github.io/miscellaneous/javascript-short-circuit-evaluation</id><content type="html" xml:base="https://nan0silver.github.io/miscellaneous/2025-01-27-javascript-short-circuit-evaluation/"><![CDATA[<ul>
  <li><a href="#단축-평가란">단축 평가란?</a></li>
  <li><a href="#단축-평가-동작-방식">단축 평가 동작 방식</a></li>
  <li><a href="#단축-평가-활용-예시">단축 평가 활용 예시</a></li>
  <li><a href="#주의사항">주의사항</a></li>
</ul>

<hr />

<h2 id="단축-평가란">단축 평가란?</h2>

<ul>
  <li>논리 연산자 (<code class="language-plaintext highlighter-rouge">&amp;&amp;</code>, <code class="language-plaintext highlighter-rouge">||</code>) 를 평가할 때, <strong>결과를 미리 결정할 수 있다면 나머지 표현식을 평가하지 않고 곧바로 결과를 반환하는 것</strong>
    <ul>
      <li><strong><code class="language-plaintext highlighter-rouge">&amp;&amp;</code> (AND) 연산자</strong>: 두 피연산자가 모두 <code class="language-plaintext highlighter-rouge">true</code> 일 때만 <code class="language-plaintext highlighter-rouge">true</code> 를 반환합니다.</li>
      <li><strong><code class="language-plaintext highlighter-rouge">||</code> (OR) 연산자</strong>: 두 피연산자 중 하나라도 <code class="language-plaintext highlighter-rouge">true</code> 이면 <code class="language-plaintext highlighter-rouge">true</code> 를 반환합니다.</li>
    </ul>
  </li>
  <li>논리 연산자의 동작 방식을 이용하여 불필요한 연산을 줄이고, 코드 실행 효율성을 높임.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">&amp;&amp;</code> (AND) 와 <code class="language-plaintext highlighter-rouge">||</code> (OR) 연산자를 조건문 없이 사용하는 코드를 가능하게 함</li>
    </ul>
  </li>
</ul>

<h2 id="단축-평가-동작-방식">단축 평가 동작 방식</h2>

<h3 id="1--and-연산자">1. <code class="language-plaintext highlighter-rouge">&amp;&amp;</code> (AND) 연산자</h3>

<p><code class="language-plaintext highlighter-rouge">&amp;&amp;</code> 연산자는 <strong>좌항부터 평가</strong></p>

<ul>
  <li><strong>좌항이 <code class="language-plaintext highlighter-rouge">false</code> 라면</strong>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">&amp;&amp;</code> 연산의 결과는 항상 <code class="language-plaintext highlighter-rouge">false</code> 이므로, <strong>우항을 평가하지 않고 곧바로 <code class="language-plaintext highlighter-rouge">false</code> 를 반환</strong></li>
    </ul>
  </li>
  <li><strong>좌항이 <code class="language-plaintext highlighter-rouge">true</code> 라면</strong>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">&amp;&amp;</code> 연산의 결과는 우항에 따라 결정되므로, <strong>우항을 평가하고 그 결과를 반환</strong></li>
    </ul>
  </li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">false</span> <span class="o">&amp;&amp;</span> <span class="kc">true</span><span class="p">);</span> <span class="c1">//falsk</span>
<span class="c1">//(좌항이 false이므로 우항을 평가하지 않고 false 반환)</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="kc">false</span><span class="p">);</span> <span class="c1">//false</span>
<span class="c1">//(좌항이 true이므로 우항을 평가하여 false 반환)</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="kc">true</span><span class="p">);</span> <span class="c1">//true</span>
<span class="c1">//(좌항이 true이므로 우항을 평가하여 true 반환)</span>
</code></pre></div></div>

<h3 id="2--or-연산자">2. <code class="language-plaintext highlighter-rouge">||</code> (OR) 연산자</h3>

<p><code class="language-plaintext highlighter-rouge">||</code> 연산자는 <code class="language-plaintext highlighter-rouge">&amp;&amp;</code> 연산자와 마찬가지로 <strong>좌항부터 평가</strong></p>

<ul>
  <li><strong>좌항이 <code class="language-plaintext highlighter-rouge">true</code> 라면</strong>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">||</code> 연산의 결과는 항상 <code class="language-plaintext highlighter-rouge">true</code> 이므로, <strong>우항을 평가하지 않고 곧바로 <code class="language-plaintext highlighter-rouge">true</code> 를 반환</strong></li>
    </ul>
  </li>
  <li><strong>좌항이 <code class="language-plaintext highlighter-rouge">false</code> 라면</strong>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">||</code> 연산의 결과는 우항에 따라 결정되므로, <strong>우항을 평가하고 그 결과를 반환</strong></li>
    </ul>
  </li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">true</span> <span class="o">||</span> <span class="kc">false</span><span class="p">);</span> <span class="c1">//true</span>
<span class="c1">//(좌항이 true이므로 우항을 평가하지 않고 true 반환)</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">false</span> <span class="o">||</span> <span class="kc">true</span><span class="p">);</span> <span class="c1">//true</span>
<span class="c1">//(좌항이 false이므로 우항을 평가하여 true 반환)</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">false</span> <span class="o">||</span> <span class="kc">false</span><span class="p">);</span> <span class="c1">//false</span>
<span class="c1">//(좌항이 false이므로 우항을 평가하여 false 반환)</span>
</code></pre></div></div>

<h2 id="단축-평가-활용-예시">단축 평가 활용 예시</h2>

<h3 id="1-객체의-속성에-접근할-때">1. 객체의 속성에 접근할 때</h3>

<p>객체의 속성에 접근하기 전에 객체가 <code class="language-plaintext highlighter-rouge">null</code> 또는 <code class="language-plaintext highlighter-rouge">undefined</code> 인지 확인하는 코드를 단축 평가로 간결하게 작성 가능</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Alice</span><span class="dl">"</span> <span class="p">};</span>
<span class="c1">// const person = null; // person이 null인 경우</span>

<span class="c1">// 조건문 사용</span>
<span class="kd">let</span> <span class="nx">name</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">name</span> <span class="o">=</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Unknown</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Alice</span>

<span class="c1">// 단축 평가 사용</span>
<span class="kd">const</span> <span class="nx">name2</span> <span class="o">=</span> <span class="nx">person</span> <span class="o">&amp;&amp;</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name2</span><span class="p">);</span>
<span class="c1">// Alice (person이 truthy 값이므로 person.name 평가)</span>

<span class="kd">const</span> <span class="nx">person2</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">name3</span> <span class="o">=</span> <span class="nx">person2</span> <span class="o">&amp;&amp;</span> <span class="nx">person2</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name3</span><span class="p">);</span> <span class="c1">// null (person2가 falsy 값이므로 person2 그대로 반환)</span>

<span class="c1">// || 연산자를 사용한 기본값 설정</span>
<span class="kd">const</span> <span class="nx">name4</span> <span class="o">=</span> <span class="nx">person2</span> <span class="o">||</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Unknown</span><span class="dl">"</span> <span class="p">};</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name4</span><span class="p">);</span> <span class="c1">// { name: 'Unknown' } (person2가 falsy 값이므로 { name: 'Unknown' } 반환)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name4</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Unknown</span>
</code></pre></div></div>

<h3 id="2-함수-매개변수에-기본값-설정">2. 함수 매개변수에 기본값 설정</h3>

<p>함수 매개변수에 기본값을 설정할 때 <code class="language-plaintext highlighter-rouge">||</code> 연산자를 사용하여 코드를 간결하게 만들 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">greet</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// 조건문 사용</span>
  <span class="kd">const</span> <span class="nx">userName</span> <span class="o">=</span> <span class="nx">name</span> <span class="p">?</span> <span class="nx">name</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">Guest</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello, </span><span class="p">${</span><span class="nx">userName</span><span class="p">}</span><span class="s2">!`</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">greet</span><span class="p">(</span><span class="dl">"</span><span class="s2">Bob</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// Hello, Bob!</span>
<span class="nx">greet</span><span class="p">();</span> <span class="c1">// Hello, Guest!</span>

<span class="kd">function</span> <span class="nx">greet2</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// 단축 평가 사용</span>
  <span class="kd">const</span> <span class="nx">userName</span> <span class="o">=</span> <span class="nx">name</span> <span class="o">||</span> <span class="dl">"</span><span class="s2">Guest</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello, </span><span class="p">${</span><span class="nx">userName</span><span class="p">}</span><span class="s2">!`</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">greet2</span><span class="p">(</span><span class="dl">"</span><span class="s2">Charlie</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// Hello, Charlie!</span>
<span class="nx">greet2</span><span class="p">();</span> <span class="c1">// Hello, Guest!</span>
</code></pre></div></div>

<h3 id="3-조건부-렌더링-react">3. 조건부 렌더링 (React)</h3>

<p>React와 같은 UI 라이브러리에서 조건부 렌더링을 구현할 때 단축 평가를 유용하게 사용할 수 있다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">MyComponent</span><span class="p">({</span> <span class="nx">items</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="si">{</span><span class="sr">/_ items가 존재하고 배열인 경우에만 목록 렌더링 _/</span><span class="si">}</span>
      <span class="si">{</span><span class="nx">items</span> <span class="o">&amp;&amp;</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">items</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
          <span class="si">{</span><span class="nx">items</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">li</span> <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
          <span class="p">))</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
      <span class="p">)</span><span class="si">}</span>
      <span class="si">{</span><span class="sr">/_ items가 없거나 배열이 아닌 경우 메시지 표시 _/</span><span class="si">}</span>
      <span class="si">{</span><span class="o">!</span><span class="nx">items</span> <span class="o">&amp;&amp;</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>No items to display.<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span><span class="si">}</span>
      <span class="si">{</span><span class="nx">items</span> <span class="o">||</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>No items to display.<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span><span class="si">}</span> <span class="si">{</span><span class="sr">/_ || 연산자 사용 _/</span><span class="si">}</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="주의사항">주의사항</h2>

<ul>
  <li>단축 평가는 코드를 간결하게 만들어주지만, 남용하면 코드의 가독성을 해칠 수 있음.
    <ul>
      <li>적절한 상황에서 사용하는 것이 중요합니다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&amp;&amp;</code> 와 <code class="language-plaintext highlighter-rouge">||</code> 연산자는 boolean 값이 아닌 값도 반환 가능
    <ul>
      <li>단축 평가의 반환 값은 마지막으로 평가된 표현식의 결과이다.</li>
    </ul>
  </li>
</ul>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="miscellaneous" /><summary type="html"><![CDATA[JavaScript 단축 평가 (Short-circuit evaluation)에 대해 알아보자.]]></summary></entry><entry><title type="html">[JAVA] int와 long의 차이 ➡️ 범위와 오버플로우 문제 완벽 정리</title><link href="https://nan0silver.github.io/java/2025-01-23-int-long/" rel="alternate" type="text/html" title="[JAVA] int와 long의 차이 ➡️ 범위와 오버플로우 문제 완벽 정리" /><published>2025-01-23T00:00:00+00:00</published><updated>2025-02-05T02:45:38+00:00</updated><id>https://nan0silver.github.io/java/int-long</id><content type="html" xml:base="https://nan0silver.github.io/java/2025-01-23-int-long/"><![CDATA[<ul>
  <li><a href="#int와-long의-차이">int와 long의 차이</a></li>
  <li><a href="#int와-long의-입력값">int와 long의 입력값</a></li>
  <li><a href="#연산-결과의-최대값-예상하기">연산 결과의 최대값 예상하기</a></li>
  <li><a href="#문제를-보고-빠르게-판단하는-팁">문제를 보고 빠르게 판단하는 팁</a></li>
</ul>

<hr />

<h2 id="int와-long의-차이">int와 long의 차이</h2>

<ul>
  <li>자꾸 문제를 풀다 int와 long을 혼동해서 문제를 틀리는 경우가 있어서 완벽 정리하려고 한다.</li>
  <li><strong>입력값의 범위와 연산 결과의 최댓값</strong>을 기준으로 판단하는 습관을 들여야 함</li>
</ul>

<h2 id="int와-long의-입력값">int와 long의 입력값</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">int</code> : 약 -2,147,483,648 ~ 2,147,483,648</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">long</code> : 약 -9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,808</p>
  </li>
  <li>문제에 입력값이 명시되어 있다면
    <ul>
      <li>-2,000,000,000 &lt;= N,M &lt;= 2,000,000,000
        <ul>
          <li><code class="language-plaintext highlighter-rouge">int</code>는 처리 가능. 하지만 연산 결과를 생각해야 함</li>
        </ul>
      </li>
      <li>범위가 <code class="language-plaintext highlighter-rouge">int</code>의 한계와 가깝다면, 입력값은 int로 가능하더라도 연산 결과가 범위를 초과할 수 있기 때문에 <code class="language-plaintext highlighter-rouge">long</code>을 사용하는 것이 안전</li>
    </ul>
  </li>
</ul>

<h3 id="판단-기준">판단 기준</h3>

<ul>
  <li>입력값이 <code class="language-plaintext highlighter-rouge">-10^9 ~ 10^9</code> 사이일 경우
    <ul>
      <li>단순한 덧셈이나 뺄셈은 <code class="language-plaintext highlighter-rouge">int</code>로 처리 가능</li>
      <li>곱셈, 제곱 연산, 누적 합계 등은 <code class="language-plaintext highlighter-rouge">long</code>이 필요할 수 있음</li>
    </ul>
  </li>
  <li>입력값이 <code class="language-plaintext highlighter-rouge">-10^{10}</code> 이상이거나, 결과적으로 큰 숫자가 나올 가능성이 있다면
    <ul>
      <li>무조건 <code class="language-plaintext highlighter-rouge">long</code> 사용</li>
    </ul>
  </li>
</ul>

<h2 id="연산-결과의-최대값-예상하기">연산 결과의 최대값 예상하기</h2>

<ul>
  <li>문제에서 요구하는 연산 결과 예상하기</li>
  <li>예) 누적합 문제
    <ul>
      <li>배열의 크기가 1,000,000이고, 각 원소가 최대 10^6이라면, 누적합은 최대 10^12가 될 수 있음</li>
      <li>이 경우 int의 범위를 초과하므로 long을 사용해야 함</li>
    </ul>
  </li>
</ul>

<h2 id="문제를-보고-빠르게-판단하는-팁">문제를 보고 빠르게 판단하는 팁</h2>

<ol>
  <li>입력 범위 확인</li>
  <li>연산의 종류 확인</li>
  <li>규칙 만들기
    <ul>
      <li>“입력값이 10^9 이상이면 무조건 <code class="language-plaintext highlighter-rouge">long</code>으로 처리한다”</li>
    </ul>
  </li>
  <li>테스트 데이터 체크
    <ul>
      <li>극단적인 입력값을 대입해보기</li>
    </ul>
  </li>
</ol>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="java" /><summary type="html"><![CDATA[프론트엔드 개발자 관점에서 Responsive와 Reactive의 뜻을 알아보자.]]></summary></entry><entry><title type="html">[Git] git rebase</title><link href="https://nan0silver.github.io/miscellaneous/2025-01-23-git-rebase/" rel="alternate" type="text/html" title="[Git] git rebase" /><published>2025-01-23T00:00:00+00:00</published><updated>2025-02-05T02:45:38+00:00</updated><id>https://nan0silver.github.io/miscellaneous/git-rebase</id><content type="html" xml:base="https://nan0silver.github.io/miscellaneous/2025-01-23-git-rebase/"><![CDATA[<ul>
  <li><a href="#git-rebase">git rebase</a></li>
  <li><a href="#git-rebase-vs-git-merge">git rebase VS git merge</a></li>
  <li><a href="#git-rebase-사용법">git rebase 사용법</a></li>
  <li><a href="#장점">장점</a></li>
  <li><a href="#주의-사항">주의 사항</a></li>
</ul>

<hr />

<h2 id="git-rebase">git rebase</h2>

<ul>
  <li>Git에서 브랜치의 커밋 히스토리를 재구성할 때 사용하는 명령어</li>
  <li>이를 통해 브랜치의 히스토리를 “정리(clean)”하거나 최신 상태를 기반으로 변경사항을 다시 적용할 수 있음</li>
</ul>

<h2 id="git-rebase-vs-git-merge">git rebase VS git merge</h2>

<ul>
  <li>일반적으로 merge와 같은 목적으로 사용되지만, 다른 방식으로 작동
    <ul>
      <li>merge
        <ul>
          <li>두 브랜치의 히스토리를 합치면서, 새로운 병합 커밋을 생성</li>
        </ul>
      </li>
      <li>rebase
        <ul>
          <li>한 브랜치의 커밋을 다른 브랜치의 끝으로 옮겨서, 히스토리가 마치 일렬로 정리된 것처럼 보임</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>예시 이미지</p>

    <ul>
      <li>
        <p><img src="https://github.com/nan0silver/nan0silver.github.io/blob/main/assets/img/blog/2025-01-23-git-rebase.png?raw=true" alt="git-rebase" style="width:150px; " /></p>
      </li>
      <li><code class="language-plaintext highlighter-rouge">16d0e75</code> 커밋 아래는 merge 흔적</li>
      <li><code class="language-plaintext highlighter-rouge">16d0e75</code> 커밋 위는 rebase로 인한 선형 히스토리</li>
    </ul>
  </li>
</ul>

<h2 id="git-rebase-사용법">git rebase 사용법</h2>

<ol>
  <li>
    <p>업스트림 브랜치로 리베이스</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git swicth -c feature
git rebase main
</code></pre></div>    </div>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">feature</code> 브랜치에서 작업한 커밋을들 <code class="language-plaintext highlighter-rouge">main</code> 브랜치의 최신 상태를 기반으로 재적용</li>
    </ul>
  </li>
  <li>
    <p>interactive rebase</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git rebase -i HEAD~n
</code></pre></div>    </div>
    <ul>
      <li>마지막 n개의 커밋을 선택적으로 수정하거나 합칠 수 있음</li>
      <li>실행하면 편집 모드가 열리며, 옵션을 선택할 수 있음
        <ul>
          <li>pick, reword, edit, squash, drop등</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<h2 id="장점">장점</h2>

<ul>
  <li>히스토리 정리</li>
  <li>불필요한 merge 커밋 제거</li>
  <li>최신 상태 유지</li>
</ul>

<h2 id="주의-사항">주의 사항</h2>

<ul>
  <li>리베이스 중 충돌</li>
  <li>이미 푸시된 브랜치에 리베이스 금지</li>
  <li><code class="language-plaintext highlighter-rouge">git pull --rebase</code>
    <ul>
      <li>원격 브랜치의 변경 사항을 병합 대신 리베이스로 가져올 때 사용</li>
    </ul>
  </li>
</ul>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="miscellaneous" /><summary type="html"><![CDATA[git rebase의 동작 방식에 대해 알아보자.]]></summary></entry><entry><title type="html">[Git] git clone VS git fork</title><link href="https://nan0silver.github.io/miscellaneous/2025-01-22-git-clone-fork/" rel="alternate" type="text/html" title="[Git] git clone VS git fork" /><published>2025-01-22T00:00:00+00:00</published><updated>2025-02-05T02:45:38+00:00</updated><id>https://nan0silver.github.io/miscellaneous/git-clone-fork</id><content type="html" xml:base="https://nan0silver.github.io/miscellaneous/2025-01-22-git-clone-fork/"><![CDATA[<ul>
  <li><a href="#git-clone">git clone</a></li>
  <li><a href="#git-fork">git fork</a></li>
  <li><a href="#주요-차이점-정리">주요 차이점 정리</a></li>
  <li><a href="#워크플로우">워크플로우</a></li>
  <li><a href="#실전-예시">실전 예시</a></li>
</ul>

<hr />

<h2 id="git-clone">git clone</h2>

<ul>
  <li>역할
    <ul>
      <li>원격 저장소를 로컬 컴퓨터에 복제</li>
    </ul>
  </li>
  <li>작업 대상
    <ul>
      <li>원격 저장소</li>
    </ul>
  </li>
  <li>특징
    <ul>
      <li>저장소의 완전한 복사본(전체 커밋 내역, 브랜치 등)을 가져옴</li>
      <li>복제 후, 원격 저장소가 자동으로 <code class="language-plaintext highlighter-rouge">origin</code>이라는 이름으로 연결됨</li>
      <li>로컬에서 작업한 내용을 원격 저장소에 반영하려면 <code class="language-plaintext highlighter-rouge">push</code>사용</li>
    </ul>
  </li>
  <li>동작 방식
    <ol>
      <li>Git 저장소 초기화 (<code class="language-plaintext highlighter-rouge">git init</code>)
        <ul>
          <li>새로 생성된 폴더는 Git 저장소로 설정됨</li>
          <li><code class="language-plaintext highlighter-rouge">.git</code> 디렉터리가 자동으로 생성됨</li>
        </ul>
      </li>
      <li>원격 저장소 설정 (<code class="language-plaintext highlighter-rouge">git remote add origin</code>)
        <ul>
          <li>복제한 원격 저장소가 자동으로 <code class="language-plaintext highlighter-rouge">origin</code>이라는 이름으로 연결됨</li>
          <li>로컬에서 원격 저장소와 동기화(<code class="language-plaintext highlighter-rouge">push</code>, <code class="language-plaintext highlighter-rouge">pull</code>)를 가능하게 함</li>
        </ul>
      </li>
      <li>브랜치 체크아웃
        <ul>
          <li>기본 브랜치(<code class="language-plaintext highlighter-rouge">main</code> or <code class="language-plaintext highlighter-rouge">master</code>)의 최신 상태가 복제됨</li>
          <li>이 브랜치는 로컬 저장소로 가져와 자동으로 체크아웃됨</li>
        </ul>
      </li>
      <li>파일 다운로드
        <ul>
          <li>원격 저장소에 있는 모든 파일과 폴더가 로컬 디렉토리에 다운로드됨</li>
        </ul>
      </li>
    </ol>
  </li>
  <li><code class="language-plaintext highlighter-rouge">git clone</code> 명령을 실행하면, 다운받은 폴더는 자동으로 Git 저장소로 초기화되고, 원격 저장소와도 연결된 상태임
    <ul>
      <li><strong><code class="language-plaintext highlighter-rouge">git init</code>이나 <code class="language-plaintext highlighter-rouge">git remote add</code>를 실행할 필요가 없음</strong></li>
    </ul>
  </li>
</ul>

<h2 id="git-fork">git fork</h2>

<ul>
  <li>역할
    <ul>
      <li>원격 저장소를 자신의 원격 계정으로 복제</li>
    </ul>
  </li>
  <li>작업 대상
    <ul>
      <li>GitHub/GitLab 계정 상의 저장소</li>
    </ul>
  </li>
  <li>특징
    <ul>
      <li>원본 저장소의 복사본이 내 계정의 원격 저장소로 생성됨</li>
      <li><strong>내 계정에서 관리할 수 있는 원격 저장소를 만든다는 것</strong>이 핵심</li>
      <li>원본 저장소와 연결은 유지되지만, 독립적인 저장소로 사용됨</li>
      <li>추가 단계
        <ul>
          <li>포크 후, 로컬에 복사하려면 <strong><code class="language-plaintext highlighter-rouge">git clone</code></strong>을 사용해야 함</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>사용 시기
    <ul>
      <li>오픈소스 프로젝트에 기여할 때, 원본 저장소를 수정하지 않고 내 계정에서 관리 가능한 복사본을 만들어야 할 때 사용</li>
      <li><strong>Pull Request</strong>를 보내기 위한 준비 단계로 사용</li>
    </ul>
  </li>
</ul>

<h2 id="주요-차이점-정리">주요 차이점 정리</h2>

<table>
  <thead>
    <tr>
      <th><strong>특징</strong></th>
      <th><strong>git clone</strong></th>
      <th><strong>git fork</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>복제 대상</td>
      <td>원격 저장소 ➡️ 로컬 저장소</td>
      <td>원격 저장소 ➡️ 내 원격 저장소</td>
    </tr>
    <tr>
      <td>저장소 위치</td>
      <td>로컬에서 작업</td>
      <td>내 계정의 원격 저장소에서 작업</td>
    </tr>
    <tr>
      <td>연결된 원격 저장소</td>
      <td><code class="language-plaintext highlighter-rouge">origin</code>으로 원본 저장소 연결</td>
      <td>내 계정의 원격 저장소 (원본 저장소는 upstream으로 연결 가능)</td>
    </tr>
    <tr>
      <td>사용 목적</td>
      <td>로컬에서 작업하고 원본 저장소에 반영</td>
      <td>내 계정에서 독립적으로 원격 저장소 관리</td>
    </tr>
    <tr>
      <td>주로 사용 상황</td>
      <td>협업 프로젝트에 바로 참여</td>
      <td>오픈소스 프로젝트에 기여 (Pull Request 준비)</td>
    </tr>
  </tbody>
</table>

<h2 id="워크플로우">워크플로우</h2>

<h3 id="일반적으로-fork--clone--push--pull-request가-오픈-소스-협업의-표준-워크플로우">일반적으로 <strong>Fork → Clone → Push → Pull Request</strong>가 오픈 소스 협업의 표준 워크플로우</h3>

<ol>
  <li>
    <p>Fork 저장소 생성</p>

    <ul>
      <li>먼저, 해당 저장소를 <strong>Fork</strong>하여 내 계정으로 복사
        <ul>
          <li>GitHub에서 기여하고자 하는 저장소 페이지로 이동</li>
          <li>우측 상단의 <strong>Fork</strong> 버튼을 클릭</li>
          <li>그러면 내 계정에 저장소 복사본이 생성됨</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>Fork 저장소 Clone</p>

    <ul>
      <li>Fork된 저장소를 로컬로 복제
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/your-username/repository.git
</code></pre></div>        </div>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">your-username</code>은 GitHub 계정 이름으로 대체</li>
          <li>Clone이 완료되면 로컬 환경에서 작업 가능</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>원본 저장소 추가 (선택 사항)</p>

    <ul>
      <li>원본 저장소와 동기화를 유지하려면, 원본 저장소를 <strong><code class="language-plaintext highlighter-rouge">upstream</code></strong>으로 추가
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote add upstream https://github.com/original-owner/repository.git
</code></pre></div>        </div>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">original-owner</code>는 원본 저장소의 소유자 이름으로 대체</li>
          <li><code class="language-plaintext highlighter-rouge">git remote -v</code> 명령을 사용하여 설정이 제대로 되었는지 확인 가능</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>로컬에서 작업</p>

    <ul>
      <li>새로운 파일을 추가하거나 수정 후 커밋
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"Add new feature"</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>Fork된 저장소에 Push</p>

    <ul>
      <li>로컬에서 작업한 내용을 자신의 Fork 저장소에 Push
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push origin main
</code></pre></div>        </div>
        <ul>
          <li>여기서 <code class="language-plaintext highlighter-rouge">main</code>은 사용하는 브랜치 이름</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>Pull Request 생성</p>

    <ul>
      <li>
        <p>GitHub로 돌아가, Fork된 저장소에서 원본 저장소로 <strong>Pull Request</strong>를 생성</p>

        <ol>
          <li>내 Fork 저장소 페이지에서 <strong>“Contribute”</strong> 버튼 클릭.</li>
          <li><strong>“Open Pull Request”</strong> 버튼 클릭.</li>
          <li>변경 사항에 대한 설명을 작성하고 Pull Request를 제출합니다.</li>
        </ol>
      </li>
    </ul>
  </li>
</ol>

<h3 id="-요약">✅ 요약</h3>

<p>다른 사람의 저장소에 기여하기 위한 전체 과정</p>

<ol>
  <li><strong>Fork</strong>: 저장소를 내 계정으로 복제.</li>
  <li><strong>Clone</strong>: 내 계정에 있는 저장소를 로컬로 복제.</li>
  <li><strong>원본 저장소 추가</strong>: 원본 저장소와 동기화(선택 사항).</li>
  <li><strong>작업</strong>: 로컬에서 파일 수정 및 커밋.</li>
  <li><strong>Push</strong>: 작업 내용을 내 계정 저장소로 업로드.</li>
  <li><strong>Pull Request</strong>: 원본 저장소에 변경 사항을 제안.</li>
</ol>

<h2 id="실전-예시">실전 예시</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">git clone</code>만 사용하는 경우</p>

    <ul>
      <li>팀 프로젝트에서 기존 저장소를 복제하여 작업 후, 원본 저장소에 바로 push</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone &lt;repository-url&gt;
<span class="nb">cd</span> &lt;repository-folder&gt;
<span class="c"># 작업 후</span>
git push origin &lt;branch-name&gt;
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">git fork</code>와 <code class="language-plaintext highlighter-rouge">git clone</code>을 함께 사용하는 경우</p>
    <ul>
      <li>오픈소스 프로젝트에서 자신의 계정으로 fork 후, 로컬에서 복제하여 작업 후 pull request 보냄
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># GitHub에서 Fork한 후</span>
git clone &lt;forked-repository-url&gt;
<span class="nb">cd</span> &lt;repository-folder&gt;
<span class="c"># 원본 저장소를 upstream으로 추가</span>
git remote add upstream &lt;original-repository-url&gt;
git fetch upstream
<span class="c"># 작업 후, 내 계정 원격 저장소에 Push</span>
git push origin &lt;branch-name&gt;
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ol>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="miscellaneous" /><summary type="html"><![CDATA[git clone과 git fork의 동작 방식에 대해 알아보자.]]></summary></entry><entry><title type="html">[Etc] Naming Convention</title><link href="https://nan0silver.github.io/miscellaneous/2025-01-22-naming-convention/" rel="alternate" type="text/html" title="[Etc] Naming Convention" /><published>2025-01-22T00:00:00+00:00</published><updated>2025-02-05T02:45:38+00:00</updated><id>https://nan0silver.github.io/miscellaneous/naming-convention</id><content type="html" xml:base="https://nan0silver.github.io/miscellaneous/2025-01-22-naming-convention/"><![CDATA[<ul>
  <li><a href="#naming-convention이란">Naming Convention이란?</a></li>
  <li><a href="#1-케밥-케이스-kebab-case">케밥 케이스 (Kebab-case)</a></li>
  <li><a href="#2-카멜-케이스-camelcase">카멜 케이스 (camelCase)</a></li>
  <li><a href="#3-스네이크-케이스-snake_case">스네이크 케이스 (snake_case)</a></li>
  <li><a href="#4-파스칼-케이스-pascalcase">파스칼 케이스 (PascalCase)</a></li>
  <li><a href="#선택-기준">선택 기준</a></li>
</ul>

<hr />

<h2 id="naming-convention이란">Naming Convention이란?</h2>

<ul>
  <li>프로그래밍에서 변수, 함수, 클래스 이름 등을 작성하는 규칙</li>
</ul>

<hr />

<h2 id="1-케밥-케이스-kebab-case">1. 케밥 케이스 (Kebab-case)</h2>

<ul>
  <li>단어를 <strong>하이픈(-)</strong>으로 구분하며, 모든 문자를 소문자로 작성</li>
  <li>모양이 케밥을 닮았다고 해서 붙여진 이름</li>
  <li>특징
    <ul>
      <li>가독성이 좋음</li>
      <li>HTML, CSS에서 자주 사용됨</li>
      <li>언어에 따라 변수나 함수이름으로는 사용할 수 없는 경우도 있음
        <ul>
          <li>하이픈이 연산자로 해석될 수 있어서</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>예시</p>

    <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* CSS 클래스 이름 */</span>
<span class="nc">.button-primary</span> <span class="p">{</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* 파일 이름 */</span>
<span class="nt">my-awesome-file</span><span class="nc">.js</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="2-카멜-케이스-camelcase">2. 카멜 케이스 (camelCase)</h2>

<ul>
  <li>첫 단어는 소문자로 시작하고, 이후 단어의 첫 글자를 대문자로 작성</li>
  <li>이름이 낙타의 등처럼 튀어나온 형태를 닮아서 붙인 이름</li>
  <li>특징
    <ul>
      <li>JavaScript, Java, C#, Python 등에서 변수와 함수 이름으로 자주 사용됨</li>
      <li>대문자 없이 단어를 연결해 코드 가독성을 높이는 데 도움을 줌</li>
    </ul>
  </li>
  <li>예시
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JavaScript 변수와 함수</span>
<span class="kd">let</span> <span class="nx">userName</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Alice</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">function</span> <span class="nx">getUserData</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">userName</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="3-스네이크-케이스-snake_case">3. 스네이크 케이스 (snake_case)</h2>

<ul>
  <li>단어를 <strong>밑줄(_)</strong>로 구분하며, 모든 문자를 소문자로 작성</li>
  <li>뱀이 기어다니는 모양을 닮아서 붙여진 이름</li>
  <li>특징
    <ul>
      <li>Python, SQL, Ruby, C, C++, PHP, JSON 데이터 스키마에서 변수와 함수 이름으로 자주 사용됨</li>
    </ul>
  </li>
  <li>
    <p>예시</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python 변수 이름
</span><span class="n">user_name</span> <span class="o">=</span> <span class="s">"Alice"</span>

<span class="c1"># Python 함수 이름
</span><span class="k">def</span> <span class="nf">get_user_data</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">user_name</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="4-파스칼-케이스-pascalcase">4. 파스칼 케이스 (PascalCase)</h2>

<ul>
  <li>각 단어의 첫 글자를 대문자로 작성
    <ul>
      <li>카멜 케이스와 비슷하지만 첫 단어도 대문자</li>
    </ul>
  </li>
  <li>특징
    <ul>
      <li>Java, TypeScript등의 클래스 이름과 타입 이름으로 자주 사용됨</li>
    </ul>
  </li>
  <li>
    <p>예시</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Java 클래스 이름</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserAccount</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="nc">UserName</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">UserAccount</span><span class="o">(</span><span class="nc">String</span> <span class="n">userName</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">UserName</span> <span class="o">=</span> <span class="n">userName</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="선택-기준">선택 기준</h2>

<ul>
  <li>언어/환경의 표준에 따라 케이스를 선택
    <ul>
      <li>JavaScript, Java
        <ul>
          <li>camelCase (변수/함수)</li>
          <li>PascalCase (클래스)</li>
        </ul>
      </li>
      <li>Python
        <ul>
          <li>snake_case</li>
        </ul>
      </li>
      <li>CSS/HTML
        <ul>
          <li>kebab-case</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>팀 또는 프로젝트의 코딩 컨벤션에 따라 일관성 유지가 중요 (가독성을 위해)</li>
</ul>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="miscellaneous" /><summary type="html"><![CDATA[식별자를 만들 때 가독성이 좋도록 규정한 이름짓는 규칙인 naming convention에 대해 알아보자.]]></summary></entry><entry><title type="html">[HTML] CSS Flex</title><link href="https://nan0silver.github.io/miscellaneous/2025-01-21-css-flex/" rel="alternate" type="text/html" title="[HTML] CSS Flex" /><published>2025-01-21T00:00:00+00:00</published><updated>2025-02-05T02:45:38+00:00</updated><id>https://nan0silver.github.io/miscellaneous/css-flex</id><content type="html" xml:base="https://nan0silver.github.io/miscellaneous/2025-01-21-css-flex/"><![CDATA[<ul>
  <li><a href="#flexflexbox">Flex(Flexbox)</a></li>
  <li><a href="#주요-flexbox-속성">주요 Flexbox 속성 20개</a></li>
  <li><a href="#예제-통합-코드">예제: 통합 코드</a></li>
  <li><a href="#flex를-이용한-게임">flex를 이용한 게임</a></li>
</ul>

<hr />

<h2 id="flexflexbox">Flex(Flexbox)</h2>

<ul>
  <li>Flexbox(Flexible Box Layout Module)</li>
  <li>컨테이너 내의 아이템 간 공간 배분과 정렬 기능을 제공하는 1차원 레이아웃 모델</li>
  <li>
    <p>주로 행이나 열 단위로 작동하며, 복잡한 계산 없이도 요소들의 크기와 순서를 유연하게 배치할 수 있음</p>
  </li>
  <li>장점
    <ul>
      <li>복잡한 레이아웃을 간단하게 구현</li>
      <li>컨테이너 내 요소의 크기가 불명확하거나 동적인 경우에도 효과적으로 대응</li>
      <li>요소의 순서를 CSS로 변경할 수 있어 반응형 디자인에 유용</li>
      <li>float나 Position을 사용할 때보다 코드가 간결해짐</li>
    </ul>
  </li>
</ul>

<h2 id="주요-flexbox-속성">주요 Flexbox 속성</h2>

<p>CSS3 Flexbox에서 가장 많이 사용되는 <strong>20개의 속성(property)</strong>을 아래에 정리했습니다. 각각의 속성에 대한 간략한 설명과 함께 예제 코드를 제공합니다.</p>

<hr />

<h3 id="1-display-flex"><strong>1. <code class="language-plaintext highlighter-rouge">display: flex</code></strong></h3>

<ul>
  <li>Flexbox를 활성화.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="2-flex-direction"><strong>2. <code class="language-plaintext highlighter-rouge">flex-direction</code></strong></h3>

<ul>
  <li>주축의 방향 설정.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">row</code> (기본값), <code class="language-plaintext highlighter-rouge">row-reverse</code>, <code class="language-plaintext highlighter-rouge">column</code>, <code class="language-plaintext highlighter-rouge">column-reverse</code>.</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">flex-direction</span><span class="p">:</span> <span class="n">column</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="3-justify-content"><strong>3. <code class="language-plaintext highlighter-rouge">justify-content</code></strong></h3>

<ul>
  <li>주축에서 항목 정렬.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">flex-start</code>, <code class="language-plaintext highlighter-rouge">flex-end</code>, <code class="language-plaintext highlighter-rouge">center</code>, <code class="language-plaintext highlighter-rouge">space-between</code>, <code class="language-plaintext highlighter-rouge">space-around</code>, <code class="language-plaintext highlighter-rouge">space-evenly</code>.</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">justify-content</span><span class="p">:</span> <span class="n">space-between</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="4-align-items"><strong>4. <code class="language-plaintext highlighter-rouge">align-items</code></strong></h3>

<ul>
  <li>교차축에서 항목 정렬.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">stretch</code> (기본값), <code class="language-plaintext highlighter-rouge">flex-start</code>, <code class="language-plaintext highlighter-rouge">flex-end</code>, <code class="language-plaintext highlighter-rouge">center</code>, <code class="language-plaintext highlighter-rouge">baseline</code>.</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="5-align-content"><strong>5. <code class="language-plaintext highlighter-rouge">align-content</code></strong></h3>

<ul>
  <li>여러 줄에서 교차축 정렬.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">stretch</code>, <code class="language-plaintext highlighter-rouge">flex-start</code>, <code class="language-plaintext highlighter-rouge">flex-end</code>, <code class="language-plaintext highlighter-rouge">center</code>, <code class="language-plaintext highlighter-rouge">space-between</code>, <code class="language-plaintext highlighter-rouge">space-around</code>.</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">align-content</span><span class="p">:</span> <span class="n">space-around</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="6-flex-wrap"><strong>6. <code class="language-plaintext highlighter-rouge">flex-wrap</code></strong></h3>

<ul>
  <li>항목이 컨테이너를 초과하면 줄 바꿈 여부.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">nowrap</code> (기본값), <code class="language-plaintext highlighter-rouge">wrap</code>, <code class="language-plaintext highlighter-rouge">wrap-reverse</code>.</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">flex-wrap</span><span class="p">:</span> <span class="n">wrap</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="7-flex"><strong>7. <code class="language-plaintext highlighter-rouge">flex</code></strong></h3>

<ul>
  <li>개별 항목의 크기 설정 (약어).
    <ul>
      <li><code class="language-plaintext highlighter-rouge">flex: grow shrink basis;</code></li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">flex</span><span class="p">:</span> <span class="m">1</span> <span class="m">1</span> <span class="nb">auto</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="8-flex-grow"><strong>8. <code class="language-plaintext highlighter-rouge">flex-grow</code></strong></h3>

<ul>
  <li>남은 공간을 차지할 비율.
    <ul>
      <li>기본값: <code class="language-plaintext highlighter-rouge">0</code>.</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">flex-grow</span><span class="p">:</span> <span class="m">2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="9-flex-shrink"><strong>9. <code class="language-plaintext highlighter-rouge">flex-shrink</code></strong></h3>

<ul>
  <li>공간 부족 시 줄어드는 비율.
    <ul>
      <li>기본값: <code class="language-plaintext highlighter-rouge">1</code>.</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">flex-shrink</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="10-flex-basis"><strong>10. <code class="language-plaintext highlighter-rouge">flex-basis</code></strong></h3>

<ul>
  <li>항목의 기본 크기 설정.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">flex-basis</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="11-order"><strong>11. <code class="language-plaintext highlighter-rouge">order</code></strong></h3>

<ul>
  <li>항목의 배치 순서.
    <ul>
      <li>기본값: <code class="language-plaintext highlighter-rouge">0</code>.</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">order</span><span class="p">:</span> <span class="m">2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="12-gap"><strong>12. <code class="language-plaintext highlighter-rouge">gap</code></strong></h3>

<ul>
  <li>항목 간 간격 설정.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="py">gap</span><span class="p">:</span> <span class="m">20px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="13-row-gap"><strong>13. <code class="language-plaintext highlighter-rouge">row-gap</code></strong></h3>

<ul>
  <li>가로축 항목 간 간격 설정.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="py">row-gap</span><span class="p">:</span> <span class="m">15px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="14-column-gap"><strong>14. <code class="language-plaintext highlighter-rouge">column-gap</code></strong></h3>

<ul>
  <li>세로축 항목 간 간격 설정.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">column-gap</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="15-align-self"><strong>15. <code class="language-plaintext highlighter-rouge">align-self</code></strong></h3>

<ul>
  <li>개별 항목의 교차축 정렬 설정.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">auto</code>, <code class="language-plaintext highlighter-rouge">flex-start</code>, <code class="language-plaintext highlighter-rouge">flex-end</code>, <code class="language-plaintext highlighter-rouge">center</code>, <code class="language-plaintext highlighter-rouge">baseline</code>, <code class="language-plaintext highlighter-rouge">stretch</code>.</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">align-self</span><span class="p">:</span> <span class="n">flex-end</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="16-min-width"><strong>16. <code class="language-plaintext highlighter-rouge">min-width</code></strong></h3>

<ul>
  <li>항목의 최소 너비.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">min-width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="17-max-width"><strong>17. <code class="language-plaintext highlighter-rouge">max-width</code></strong></h3>

<ul>
  <li>항목의 최대 너비.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">max-width</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="18-min-height"><strong>18. <code class="language-plaintext highlighter-rouge">min-height</code></strong></h3>

<ul>
  <li>항목의 최소 높이.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">min-height</span><span class="p">:</span> <span class="m">50px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="19-max-height"><strong>19. <code class="language-plaintext highlighter-rouge">max-height</code></strong></h3>

<ul>
  <li>항목의 최대 높이.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">max-height</span><span class="p">:</span> <span class="m">150px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="20-place-content"><strong>20. <code class="language-plaintext highlighter-rouge">place-content</code></strong></h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">justify-content</code>와 <code class="language-plaintext highlighter-rouge">align-content</code>를 한 번에 설정.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">center</code>, <code class="language-plaintext highlighter-rouge">stretch</code>, <code class="language-plaintext highlighter-rouge">space-between</code> 등.</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="py">place-content</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="예제-통합-코드">예제: 통합 코드</h3>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item"</span><span class="nt">&gt;</span>Item 1<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item"</span><span class="nt">&gt;</span>Item 2<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item"</span><span class="nt">&gt;</span>Item 3<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;style&gt;</span>
  <span class="nc">.container</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
    <span class="nl">flex-direction</span><span class="p">:</span> <span class="n">row</span><span class="p">;</span>
    <span class="nl">justify-content</span><span class="p">:</span> <span class="n">space-between</span><span class="p">;</span>
    <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
    <span class="nl">flex-wrap</span><span class="p">:</span> <span class="n">wrap</span><span class="p">;</span>
    <span class="py">gap</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
    <span class="nl">height</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nc">.item</span> <span class="p">{</span>
    <span class="nl">flex</span><span class="p">:</span> <span class="m">1</span> <span class="m">1</span> <span class="m">100px</span><span class="p">;</span>
    <span class="nl">align-self</span><span class="p">:</span> <span class="n">stretch</span><span class="p">;</span>
    <span class="nl">min-width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
    <span class="nl">max-width</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div></div>

<h2 id="flex를-이용한-게임">flex를 이용한 게임</h2>

<ul>
  <li>https://flexboxfroggy.com/#ko</li>
  <li><img src="https://github.com/nan0silver/nan0silver.github.io/blob/main/assets/img/blog/2025-01-21-css-flex-image.png?raw=true" alt="flexboxfroggy" />
    <ul>
      <li>다 깼다!</li>
    </ul>
  </li>
</ul>]]></content><author><name>Nahyun Eun 은나현</name><email>dmsskgus@sookmyung.ac.kr</email></author><category term="miscellaneous" /><summary type="html"><![CDATA[웹 페이지의 컨테이너 내 아이템 간 공간 배분에 사용되는 CSS Flex에 대해 알아보자.]]></summary></entry></feed>